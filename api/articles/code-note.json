{"title":"搬砖笔记","slug":"code-note","date":"2021-07-31T16:19:16.000Z","updated":"2021-07-31T16:33:11.064Z","comments":true,"path":"api/articles/code-note.json","realPath":"/2021/08/01/code-note/","excerpt":"搬砖杂记，前端是门手艺活，我家狗看多了都会写。","covers":["https://pic.izhaoo.com/20210801001641.jpg","https://pic.izhaoo.com/20210801001546.jpg"],"cover":"https://pic.izhaoo.com/20210714214358.jpg","content":"<p>搬砖杂记，前端是门手艺活，我家狗看多了都会写。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"子组件监听滚动\"><a href=\"#子组件监听滚动\" class=\"headerlink\" title=\"子组件监听滚动\"></a>子组件监听滚动</h3><p>React 子组件生命周期中 <em>addEventListener</em> 的时候，需要将第三个参数设置为 <code>true</code>。因为 React 对事件做了合成处理，子组件滚动是捕获事件，父组件滚动是冒泡事件。addEventListener 第三个参数默认为 <em>false</em>，只监听冒泡事件，所以子组件的捕获事件默认监听不到，需要改成 <em>true</em>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&quot;scroll&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;top, bottom, left, right&#125; = e.target.getBoundingClientRect();<br>  &#125;, <span class=\"hljs-literal\">true</span>);<br>&#125;, []);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"浮层禁止背景滚动\"><a href=\"#浮层禁止背景滚动\" class=\"headerlink\" title=\"浮层禁止背景滚动\"></a>浮层禁止背景滚动</h3><p><em>rxpi-pad</em> 浮动面板有个坑，面板滚动事件和背景滚动事件做了绑定，通过 <em>autoLockScrolling</em> 属性只能全部开启或关闭。一般我们需要让背景禁止滚动，而面板内容可以滚动，只能 hack 一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-built_in\">document</span>.body;<br>  <span class=\"hljs-keyword\">if</span> (visible) &#123;<br>    body.style.overflow = <span class=\"hljs-string\">&quot;hidden&quot;</span>;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    body.style.overflow = <span class=\"hljs-string\">&quot;visible&quot;</span>;<br>  &#125;<br>&#125;, [visible]);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"在数组指定项插入数组\"><a href=\"#在数组指定项插入数组\" class=\"headerlink\" title=\"在数组指定项插入数组\"></a>在数组指定项插入数组</h3><p>JavaScript 中的 <em>splice</em> 只能在数组中删除或插入一个元素，而不能插入数组，可借助 <strong>apply</strong> 赋能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]; <br><span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>]; <br>arr2.unshift(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br><span class=\"hljs-built_in\">Array</span>.prototype.splice.apply(arr1, arr2);<br><span class=\"hljs-built_in\">console</span>.log(arr1)  <span class=\"hljs-comment\">// [&quot;a&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<p>相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]; <br><span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>];<br>arr1.splice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3’);</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"标签换行截断\"><a href=\"#标签换行截断\" class=\"headerlink\" title=\"标签换行截断\"></a>标签换行截断</h3><p>标签组都会设置一个宽度，当标签过多或过长时，最后一项会被“砍掉”，很尴尬。给容器设置一个固定高度和换行，将超出部分顶到第二行隐藏，干掉总比破掉好。</p>\n<p><img  src=\"https://pic.izhaoo.com/20210801001641.jpg\"  ><span class=\"image-caption\">超出截断</span></p>\n<p><img  src=\"https://pic.izhaoo.com/20210801001546.jpg\"  ><span class=\"image-caption\">超出隐藏</span></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.tags-wrapper</span> &#123;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40</span>rpx;  <span class=\"hljs-comment\">/* 标签高度 */</span><br>  <span class=\"hljs-attribute\">flex-wrap</span>: wrap;<br>  <span class=\"hljs-attribute\">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"iphoneX-适配\"><a href=\"#iphoneX-适配\" class=\"headerlink\" title=\"iphoneX 适配\"></a>iphoneX 适配</h3><p>iphoneX 这破手机就是反人类，丑得要死，给前端小哥哥烦的要死，适配 iphoneX 也是老生常谈的事。一次业务中遇到个非主流坑，淘宝端 iphoneX 底部会多出一块白条，其他客户端和机型都没问题。通过层级定位后发现这个白条是在容器外部产生的，甚至可能是客户端处。最后师兄一句 <code>height: 100vh</code> 解决。</p>\n<p>这不是 iphoneX 适配标准解法吗？？？</p>\n<p>666！！！</p>\n<p><strong>方案一</strong></p>\n<p><em>适用于版本 &gt;= IOS11</em></p>\n<p>在 HTML 头部 <em>viewport</em> 标签中，将 <em>viewport-fit</em> 值设置为 <code>contain</code>。（视口完全包含网页内容，头部位置固定元素将被包含在ios11的安全区域内）</p>\n<p>在 CSS 中使用以下布局常数，将布局限定在安全容器内：</p>\n<ul>\n<li>constant(safe-area-inset-top)</li>\n<li>constant(safe-area-inset-bottom)</li>\n<li>constant(safe-area-inset-left)</li>\n<li>constant(safe-area-inset-right)</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.container</span> &#123;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-built_in\">constant</span>(safe-area-inset-top) <span class=\"hljs-built_in\">constant</span>(safe-area-inset-right) <span class=\"hljs-built_in\">constant</span>(safe-area-inset-bottom) <span class=\"hljs-built_in\">constant</span>(safe-area-inset-left);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>方案二</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">position</span>: absolute;<br><span class=\"hljs-attribute\">top</span>: ???;<br><span class=\"hljs-attribute\">bottom</span>: ???;<br></code></pre></td></tr></table></figure>\n\n<p>绝对定位一把梭，不服就干，怕过谁。劳资的代码只有 <strong>absolute</strong>！</p>\n","more":"<h3 id=\"子组件监听滚动\"><a href=\"#子组件监听滚动\" class=\"headerlink\" title=\"子组件监听滚动\"></a>子组件监听滚动</h3><p>React 子组件生命周期中 <em>addEventListener</em> 的时候，需要将第三个参数设置为 <code>true</code>。因为 React 对事件做了合成处理，子组件滚动是捕获事件，父组件滚动是冒泡事件。addEventListener 第三个参数默认为 <em>false</em>，只监听冒泡事件，所以子组件的捕获事件默认监听不到，需要改成 <em>true</em>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&quot;scroll&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;top, bottom, left, right&#125; = e.target.getBoundingClientRect();<br>  &#125;, <span class=\"hljs-literal\">true</span>);<br>&#125;, []);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"浮层禁止背景滚动\"><a href=\"#浮层禁止背景滚动\" class=\"headerlink\" title=\"浮层禁止背景滚动\"></a>浮层禁止背景滚动</h3><p><em>rxpi-pad</em> 浮动面板有个坑，面板滚动事件和背景滚动事件做了绑定，通过 <em>autoLockScrolling</em> 属性只能全部开启或关闭。一般我们需要让背景禁止滚动，而面板内容可以滚动，只能 hack 一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-built_in\">document</span>.body;<br>  <span class=\"hljs-keyword\">if</span> (visible) &#123;<br>    body.style.overflow = <span class=\"hljs-string\">&quot;hidden&quot;</span>;<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    body.style.overflow = <span class=\"hljs-string\">&quot;visible&quot;</span>;<br>  &#125;<br>&#125;, [visible]);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"在数组指定项插入数组\"><a href=\"#在数组指定项插入数组\" class=\"headerlink\" title=\"在数组指定项插入数组\"></a>在数组指定项插入数组</h3><p>JavaScript 中的 <em>splice</em> 只能在数组中删除或插入一个元素，而不能插入数组，可借助 <strong>apply</strong> 赋能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]; <br><span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>]; <br>arr2.unshift(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);<br><span class=\"hljs-built_in\">Array</span>.prototype.splice.apply(arr1, arr2);<br><span class=\"hljs-built_in\">console</span>.log(arr1)  <span class=\"hljs-comment\">// [&quot;a&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<p>相当于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]; <br><span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>];<br>arr1.splice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3’);</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"标签换行截断\"><a href=\"#标签换行截断\" class=\"headerlink\" title=\"标签换行截断\"></a>标签换行截断</h3><p>标签组都会设置一个宽度，当标签过多或过长时，最后一项会被“砍掉”，很尴尬。给容器设置一个固定高度和换行，将超出部分顶到第二行隐藏，干掉总比破掉好。</p>\n<p><img  src=\"https://pic.izhaoo.com/20210801001641.jpg\"  ><span class=\"image-caption\">超出截断</span></p>\n<p><img  src=\"https://pic.izhaoo.com/20210801001546.jpg\"  ><span class=\"image-caption\">超出隐藏</span></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.tags-wrapper</span> &#123;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40</span>rpx;  <span class=\"hljs-comment\">/* 标签高度 */</span><br>  <span class=\"hljs-attribute\">flex-wrap</span>: wrap;<br>  <span class=\"hljs-attribute\">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"iphoneX-适配\"><a href=\"#iphoneX-适配\" class=\"headerlink\" title=\"iphoneX 适配\"></a>iphoneX 适配</h3><p>iphoneX 这破手机就是反人类，丑得要死，给前端小哥哥烦的要死，适配 iphoneX 也是老生常谈的事。一次业务中遇到个非主流坑，淘宝端 iphoneX 底部会多出一块白条，其他客户端和机型都没问题。通过层级定位后发现这个白条是在容器外部产生的，甚至可能是客户端处。最后师兄一句 <code>height: 100vh</code> 解决。</p>\n<p>这不是 iphoneX 适配标准解法吗？？？</p>\n<p>666！！！</p>\n<p><strong>方案一</strong></p>\n<p><em>适用于版本 &gt;= IOS11</em></p>\n<p>在 HTML 头部 <em>viewport</em> 标签中，将 <em>viewport-fit</em> 值设置为 <code>contain</code>。（视口完全包含网页内容，头部位置固定元素将被包含在ios11的安全区域内）</p>\n<p>在 CSS 中使用以下布局常数，将布局限定在安全容器内：</p>\n<ul>\n<li>constant(safe-area-inset-top)</li>\n<li>constant(safe-area-inset-bottom)</li>\n<li>constant(safe-area-inset-left)</li>\n<li>constant(safe-area-inset-right)</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.container</span> &#123;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-built_in\">constant</span>(safe-area-inset-top) <span class=\"hljs-built_in\">constant</span>(safe-area-inset-right) <span class=\"hljs-built_in\">constant</span>(safe-area-inset-bottom) <span class=\"hljs-built_in\">constant</span>(safe-area-inset-left);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>方案二</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">position</span>: absolute;<br><span class=\"hljs-attribute\">top</span>: ???;<br><span class=\"hljs-attribute\">bottom</span>: ???;<br></code></pre></td></tr></table></figure>\n\n<p>绝对定位一把梭，不服就干，怕过谁。劳资的代码只有 <strong>absolute</strong>！</p>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"js","path":"api/tags/js.json"},{"name":"css","path":"api/tags/css.json"}]}