{"title":"VSCode 插件适配 LangChain","slug":"vscode-langchain-chatgpt","date":"2023-08-05T08:16:12.000Z","updated":"2023-08-06T06:17:37.123Z","comments":true,"path":"api/articles/vscode-langchain-chatgpt.json","realPath":"/2023/08/05/vscode-langchain-chatgpt/","excerpt":"记录 VSCode 插件接入 LangChain 过程中踩的一些坑…","covers":["https://gw.alicdn.com/imgextra/i2/O1CN01yhchZp1vBsjLSLrX4_!!6000000006135-0-tps-2060-272.jpg","https://gw.alicdn.com/imgextra/i1/O1CN01hwSxBq29lWATHrVxE_!!6000000008108-0-tps-2122-288.jpg"],"cover":"https://pic.izhaoo.com/20210421013918.jpg","content":"<p>记录 VSCode 插件接入 LangChain 过程中踩的一些坑…</p>\n<span id=\"more\"></span>\n\n<p>最近在写一个基于 ChatGPT 的 VSCode 编码辅助插件，为了便于后续接入其他大语言模型和 Embedding，使用 <a href=\"https://js.langchain.com/docs/get_started/introduction/\">LangChain</a> 框架进行开发。我们的 LangChain 比较潮流只支持 Node.js 18+，燃鹅 VSCode 运行时使用的是内置的 Node.js 16 且无法升级，过程中遇到一些水土不服的问题，在此记录一下。</p>\n<h3 id=\"流式请求\"><a href=\"#流式请求\" class=\"headerlink\" title=\"流式请求\"></a>流式请求</h3><p>LangChain 新版网络请求用的是浏览器环境的 fetch，VSCode 环境无法使用，<a href=\"https://js.langchain.com.cn/docs/getting-started/install#%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81-nodejs-16\">官方文档</a>给出了两种解决方案：</p>\n<p>方案一，只需带着参数 <code>NODE_OPTIONS=&#39;--experimental-fetch&#39;</code> 运行 Node 即可，经过各种场所 VSCode 插件运行时无法动态置入参数，未果。</p>\n<p>方案二，使用 node-fetch 代替 fetch，具体操作如下：</p>\n<ol>\n<li>安装 node-fetch 依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yarn add node-fetch --save<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>polyfill，新建文件 <code>fetch-polyfill.ts</code> 代码如下，并在 LangChain 入口文件处引入此文件</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">/** </span><br><span class=\"hljs-comment\"> * node-fetch polyfill</span><br><span class=\"hljs-comment\"> * 注：langchian 仅支持 Node.js 18+，vscode 插件环境为打包好的 Node.js 16，需加载此垫片，并按此文档替换 langchain 依赖中的流式解析逻辑</span><br><span class=\"hljs-comment\"> * https://github.com/hwchase17/langchainjs/issues/548#issuecomment-1607846463</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">import</span> fetch, &#123;Headers, Request, Response&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node-fetch&#x27;</span>;<br><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-built_in\">global</span> &#123;<br>  <span class=\"hljs-keyword\">var</span> fetch: <span class=\"hljs-built_in\">any</span>;<br>  <span class=\"hljs-keyword\">var</span> Headers: <span class=\"hljs-built_in\">any</span>;<br>  <span class=\"hljs-keyword\">var</span> Request: <span class=\"hljs-built_in\">any</span>;<br>  <span class=\"hljs-keyword\">var</span> Response: <span class=\"hljs-built_in\">any</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">if</span> (!globalThis.fetch) &#123;<br>  globalThis.fetch = fetch;<br>  globalThis.Headers = Headers;<br>  globalThis.Request = Request;<br>  globalThis.Response = Response;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将依赖 <code>/node_modules/langchain/dist/util/event-source-parse.cjs</code> 文件中的 <code>getBytes</code> 函数改成如下代码</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBytes</span>(<span class=\"hljs-params\">stream, onChunk</span>) </span>&#123;<br>    stream.on(<span class=\"hljs-string\">&#x27;readable&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">let</span> chunk;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">null</span> !== (chunk = stream.read())) &#123;<br>            onChunk(chunk);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>重新编辑 VSCode 插件运行即可发现流式请求能跑通了</p>\n<h3 id=\"HNSWLib\"><a href=\"#HNSWLib\" class=\"headerlink\" title=\"HNSWLib\"></a>HNSWLib</h3><p>HNSWLib 是一个内存向量存储器，可以将上下文保存到文件中，VSCode Node.js 16 环境也无法使用。</p>\n<p><img  src=\"https://gw.alicdn.com/imgextra/i2/O1CN01yhchZp1vBsjLSLrX4_!!6000000006135-0-tps-2060-272.jpg\"  ><span class=\"image-caption\">bug</span></p>\n<p>看报错提示虽然是依赖没有安装，但实际翻编译后的源码发现是 <code>dynamic import</code> 在低版本环境不支持，我们只需换种 import 方式即可（CJS or ESM）。</p>\n<p><img  src=\"https://gw.alicdn.com/imgextra/i1/O1CN01hwSxBq29lWATHrVxE_!!6000000008108-0-tps-2122-288.jpg\"  ><span class=\"image-caption\">import</span></p>\n","more":"<p>最近在写一个基于 ChatGPT 的 VSCode 编码辅助插件，为了便于后续接入其他大语言模型和 Embedding，使用 <a href=\"https://js.langchain.com/docs/get_started/introduction/\">LangChain</a> 框架进行开发。我们的 LangChain 比较潮流只支持 Node.js 18+，燃鹅 VSCode 运行时使用的是内置的 Node.js 16 且无法升级，过程中遇到一些水土不服的问题，在此记录一下。</p>\n<h3 id=\"流式请求\"><a href=\"#流式请求\" class=\"headerlink\" title=\"流式请求\"></a>流式请求</h3><p>LangChain 新版网络请求用的是浏览器环境的 fetch，VSCode 环境无法使用，<a href=\"https://js.langchain.com.cn/docs/getting-started/install#%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81-nodejs-16\">官方文档</a>给出了两种解决方案：</p>\n<p>方案一，只需带着参数 <code>NODE_OPTIONS=&#39;--experimental-fetch&#39;</code> 运行 Node 即可，经过各种场所 VSCode 插件运行时无法动态置入参数，未果。</p>\n<p>方案二，使用 node-fetch 代替 fetch，具体操作如下：</p>\n<ol>\n<li>安装 node-fetch 依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">yarn add node-fetch --save<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>polyfill，新建文件 <code>fetch-polyfill.ts</code> 代码如下，并在 LangChain 入口文件处引入此文件</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">/** </span><br><span class=\"hljs-comment\"> * node-fetch polyfill</span><br><span class=\"hljs-comment\"> * 注：langchian 仅支持 Node.js 18+，vscode 插件环境为打包好的 Node.js 16，需加载此垫片，并按此文档替换 langchain 依赖中的流式解析逻辑</span><br><span class=\"hljs-comment\"> * https://github.com/hwchase17/langchainjs/issues/548#issuecomment-1607846463</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">import</span> fetch, &#123;Headers, Request, Response&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node-fetch&#x27;</span>;<br><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-built_in\">global</span> &#123;<br>  <span class=\"hljs-keyword\">var</span> fetch: <span class=\"hljs-built_in\">any</span>;<br>  <span class=\"hljs-keyword\">var</span> Headers: <span class=\"hljs-built_in\">any</span>;<br>  <span class=\"hljs-keyword\">var</span> Request: <span class=\"hljs-built_in\">any</span>;<br>  <span class=\"hljs-keyword\">var</span> Response: <span class=\"hljs-built_in\">any</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">if</span> (!globalThis.fetch) &#123;<br>  globalThis.fetch = fetch;<br>  globalThis.Headers = Headers;<br>  globalThis.Request = Request;<br>  globalThis.Response = Response;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将依赖 <code>/node_modules/langchain/dist/util/event-source-parse.cjs</code> 文件中的 <code>getBytes</code> 函数改成如下代码</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBytes</span>(<span class=\"hljs-params\">stream, onChunk</span>) </span>&#123;<br>    stream.on(<span class=\"hljs-string\">&#x27;readable&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">let</span> chunk;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">null</span> !== (chunk = stream.read())) &#123;<br>            onChunk(chunk);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>重新编辑 VSCode 插件运行即可发现流式请求能跑通了</p>\n<h3 id=\"HNSWLib\"><a href=\"#HNSWLib\" class=\"headerlink\" title=\"HNSWLib\"></a>HNSWLib</h3><p>HNSWLib 是一个内存向量存储器，可以将上下文保存到文件中，VSCode Node.js 16 环境也无法使用。</p>\n<p><img  src=\"https://gw.alicdn.com/imgextra/i2/O1CN01yhchZp1vBsjLSLrX4_!!6000000006135-0-tps-2060-272.jpg\"  ><span class=\"image-caption\">bug</span></p>\n<p>看报错提示虽然是依赖没有安装，但实际翻编译后的源码发现是 <code>dynamic import</code> 在低版本环境不支持，我们只需换种 import 方式即可（CJS or ESM）。</p>\n<p><img  src=\"https://gw.alicdn.com/imgextra/i1/O1CN01hwSxBq29lWATHrVxE_!!6000000008108-0-tps-2122-288.jpg\"  ><span class=\"image-caption\">import</span></p>","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"技术","path":"api/tags/技术.json"}]}