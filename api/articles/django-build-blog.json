{"title":"Django - 搭建博客","slug":"django-build-blog","date":"2018-08-27T05:21:02.000Z","updated":"2020-04-30T03:54:04.000Z","comments":true,"path":"api/articles/django-build-blog.json","realPath":"/2018/08/27/django-build-blog/","excerpt":"最近在学习Vue.js，需要后端配合返回Json，所以就顺便学习了一下Django，这里就记录一下搭建博客的全过程，作为起手式。由于之前用Thinkphp做过一个项目，所以对MVC(MTV)框架有了一点了解，Django就轻车熟路了，直接上手。这里就记个记个流水账，没学过的朋友直接照着敲就行了，敲完一定会有不少理解。","covers":["https://pic.izhaoo.com/20180827131159.jpg","https://pic.izhaoo.com/20180827135408.jpg","https://pic.izhaoo.com/20180827141153.jpg","https://pic.izhaoo.com/20180827141930.jpg","https://pic.izhaoo.com/20180827143126.jpg","https://pic.izhaoo.com/20180827143250.jpg"],"cover":"https://pic.izhaoo.com/20191211065844.jpg","content":"<p>最近在学习Vue.js，需要后端配合返回Json，所以就顺便学习了一下Django，这里就记录一下搭建博客的全过程，作为起手式。由于之前用Thinkphp做过一个项目，所以对MVC(MTV)框架有了一点了解，Django就轻车熟路了，直接上手。这里就记个记个流水账，没学过的朋友直接照着敲就行了，敲完一定会有不少理解。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ol>\n<li>资源下载地址:<a href=\"https://pan.baidu.com/s/1aUI4MEi0T17CfCKCXWFl7g\">项目文件</a>  <a href=\"https://pan.baidu.com/s/1nlCxZ0t93xPPflx01MBSTw\">前端文件</a></li>\n<li>文章中的<code>｛%</code>和<code>%｝</code>已经转义成了<code>&amp;#123;%</code>和<code>%&amp;#125;</code>，请自行更改。因为会和<code>hexo</code>的语法产生冲突，你看哈，我这里都得写成了中文的（其实是英文的），坑爹。</li>\n</ol>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>我的操作系统是Win10，IDE是VSCode。先给VSCode安装几个插件:</p>\n<ul>\n<li>Python</li>\n<li>Django Template</li>\n</ul>\n<p>然后我们需要安装Python，去官网下载最新版本，一路下一步即可，我装的是Python3.7。</p>\n<p>Python安装后我们需要安装一个Virtualenv来创建虚拟环境。为什么呀创建虚拟环境呢？因为Python是基于模块来扩展功能的，我们完成一个项目会安装许多的扩展模块，项目一多不容易管理，且容易发生冲突，所以我们需</p>\n<p>要创建一个虚拟环境将每个项目封装起来。<code>ctrl + ~</code>打开终端，输入以下指令：</p>\n<pre><code>pip install virtualenv  #安装Virtualenv</code></pre><p>新建一个目录，我这叫<code>django_web</code>，cd到目录。</p>\n<pre><code>virtualenv env  #创建env虚拟文件夹\nenv\\Scripts\\activate.bat  #激活虚拟环境</code></pre><p>在当前目录下新建<code>requirements.txt</code>文件，写入如下内容：</p>\n<pre><code>django\npylint\npylint-django\nautopep8</code></pre><p>django–Web开发框架，pylint–Python静态语法检测器,pylint-django– 适用于Django项目的语法检查插件，autopep8–代码格式化工具</p>\n<pre><code>pip install requirements.txt  #安装以上模块</code></pre><h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><p>在<code>django_web</code>目录下输入以下指令：</p>\n<pre><code>django-admin startproject blog  #创建blog项目\n\ncd blog  #cd到blog目录\n\npython manage.py startapp index  #创建index应用</code></pre><p>项目&amp;应用：</p>\n<p>项目： 在这个项目中通俗的讲就是<code>博客项目（blog）</code>。一个项目中可以有许多功能独立的应用组成，最终完成整个系统。</p>\n<p>应用： 在这个项目中通俗的讲有两个应用，分别是<code>前台（index）</code>和<code>后台（admin）</code>。应用是功能相对独立的一个模块，可以移植到不同的项目中。</p>\n<p>在VSCode中按<code>Ctrl + Shift + P</code>，输入<code>工作区</code>，点击<code>工作区：打开工作区配置文件</code>，查看是否含有以下内容，没有的话做适当修改。</p>\n<pre><code>    &quot;settings&quot;: &#123;\n        &quot;python.pythonPath&quot;: &quot;$&#123;workspaceFolder&#125;\\\\env\\\\Scripts\\\\python.exe&quot;,\n        &quot;python.linting.pylintPath&quot;: &quot;pylint&quot;,\n        &quot;python.linting.pylintArgs&quot;: [\n            &quot;--load-plugins&quot;, &quot;pylint_django&quot;\n        ],\n        &quot;python.formatting.autopep8Path&quot;: &quot;autopep8&quot;\n    &#125;</code></pre><p>再次按下<code>Ctrl + Shift + P</code>，输入<code>Python</code>，点击<code>Python：选择解析器</code>，然后点击<code>Python3.7（virtualenv）</code>。即使用虚拟环境中的Python解析器。</p>\n<p>至此，项目目录结构如下：</p>\n<pre><code>django_web\n  - env  #虚拟环境\n  - blog\n    -- manage.py  #Django的管理工具，可以运行web服务、管理数据库等工作。\n    -- blog  #blog项目\n      --- settings.py  #项目配置文件\n      --- urls.py  #将URL模式映射到应用\n      --- wsgi.py  #项目部署\n    -- index  #index应用\n      --- admin.py  #默认的后台管理程序\n      --- apps.py  #应用的相关配置。\n      --- models.py  #模型文件（model），用于配置ORM，设计数据库\n      --- tests.py  #单元测试\n      --- veiws.py  #视图文件（view），用于编写功能的主要处理逻辑</code></pre><h1 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h1><p>Django默认且自带<code>SQLite</code>数据库，对于这个小项目，使用<code>SQLite</code>足够了。如果你想使用其他数据库，如<code>MySQL</code>,请查阅相关文档   </p>\n<p>打开<code>index</code>目录下的<code>model.py</code>，该文件用于定义数据库结构。</p>\n<pre><code>from django.db import models\n\nclass Article(models.Model):\n    title = models.CharField(max_length = 150)  #文章标题\n    content = models.TextField()  #文章正文\n    post_time = models.DateTimeField()  #文章创建时间\n    views = models.IntegerField(default=0)  #文章访问量，初始化为0</code></pre><p>可以看到类名<code>Article</code>将作为数据库中的一张数据表，类中的每一条内容为一个字段，<code>=</code>后面的models的实例为字段的类型。</p>\n<p>在<code>blog</code>目录下执行以下指令：</p>\n<pre><code>python manage.py makemigrations blog  #将模型文件储存为迁移\n\npython manage.py migrate  #通过迁移创建数据库</code></pre><p>现在，项目文件下会生成一个<code>db.sqlite3</code>文件，这个便是系统生成的数据库，可以使用SQLite管理工具打开。</p>\n<h1 id=\"启动默认后台管理程序\"><a href=\"#启动默认后台管理程序\" class=\"headerlink\" title=\"启动默认后台管理程序\"></a>启动默认后台管理程序</h1><p>使用默认的后台管理程序，需要先创建账号。在<code>blog</code>目录下输入以下指令：</p>\n<pre><code>python manage.py createsuperuser  #创建账户\nUsername (leave blank to use &#39;fnngj&#39;):  admin  #管理员帐号\nEmail address:  894519210@qq.com  #email\nPassword:  ********  # 密码\nPassword (again):  ********  #重复密码\nSuperuser created successfully.  #创建成功</code></pre><p>接下来我们将创建好的<code>Article</code>数据表绑定到后台管理程序。</p>\n<p>打开<code>index</code>下的<code>admin.py</code>文件，写入如下内容：</p>\n<pre><code>from django.contrib import admin\nfrom index.models import Article\n\nclass ArticleAdmin(admin.ModelAdmin):\n    list_display = [&#39;title&#39;, &#39;content&#39;, &#39;post_time&#39;, &#39;views&#39;]\n\nadmin.site.register(Article, ArticleAdmin)</code></pre><p>然后在<code>blog</code>下输入以下指令，启动Django：</p>\n<pre><code>python manage.py runserver</code></pre><p>在浏览器中输入<code>127.0.0.1:8000/admin</code>，输入用户名密码，进入后台管理页面。</p>\n<p>在这里，我们可以撰写文章了，当务之急，肯定是先写个“Hello, World!”嘛。</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827131159.jpg\"  ><span class=\"image-caption\">hello,world</span></p>\n<p>可以看到，Django默认配置的后台管理程序还是很方便的，虽说有点小丑，但功能还是很齐全的。没关系，我们后面会开发自己的后台管理页面。</p>\n<h1 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h1><p>数据库已经有文章内容了，这时候我们需要完成我们的前台页面。</p>\n<p>首先在<code>index</code>目录下创建一个<code>templates</code>文件夹，这个文件夹是用来存放我们的<code>.html</code>文件的。在<code>templates</code>目录下将我们<code>前端文件</code>中的<code>.html</code>文件全拷进去。</p>\n<p>打开<code>veiws.py</code>文件，输入：</p>\n<pre><code>from django.shortcuts import render\nfrom index.models import Article  #引入Article类，即数据库\n\ndef index(request):\n    articleList = Article.objects.order_by(&quot;-post_time&quot;).all()  #从数据库中读出所有文章列表\n    return render(request, &#39;index.html&#39;, &#123;&#39;articleList&#39;: articleList&#125;)  #将文章列表渲染到index.html\n\ndef article(request, id):\n    article = Article.objects.get(pk=id)\n    return render(request, &#39;article.html&#39;, &#123;&#39;article&#39;: article&#125;)</code></pre><p>打开<code>index.html</code>，将其中输出文章列表的<code>div</code>内容改成如下（多余的div块删了吧，只留一个就行）</p>\n<pre><code>&lt;div class=&quot;container list wrap&quot;&gt;\n    &amp;#123;% for article in articleList %&amp;#125;\n        &lt;div class=&quot;content&quot;&gt;\n            &lt;h3&gt;\n                &lt;a href=&quot;\\&amp;#123;% url &#39;index:article&#39; article.id %\\&#125;&quot;&gt;&#123;&#123; article.title &#125;&#125;&lt;/a&gt;\n            &lt;/h3&gt;\n            &lt;div class=&quot;info&quot;&gt;\n                &lt;span&gt;\n                    &lt;i class=&quot;fa fa-clock-o&quot;&gt;&lt;/i&gt;发布时间: &#123;&#123; article.post_time &#125;&#125;&lt;/span&gt;\n                &lt;span&gt;\n                    &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;阅读量: &#123;&#123; article.views &#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n            &#123;&#123; article.content &#125;&#125;\n        &lt;/div&gt;\n    &amp;#123;% endfor %&amp;#125;\n&lt;/div&gt;</code></pre><p>稍微解释一下，这个<code>views.py</code>就是负责将数据从数据库调出，业务逻辑处理后，渲染到前端模板（<code>index.html</code>）。我们对应着这两个文件看：</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827135408.jpg\"  ><span class=\"image-caption\">视图层解释</span></p>\n<p><code>views.py</code>读取了<code>Article</code>数据库中的数据，存放到<code>articleList</code>这个变量中，然后渲染到<code>index.html</code>文件。</p>\n<p><code>&amp;#123;% for article in articleList %&amp;#125;</code> 表示进行循环，文章有就循环几次。<code>&#123;&#123; article.title &#125;&#125;</code>双括号中的数据会替换成数据库中读出的每条记录，这里就是对应文章的标题。</p>\n<p><code>\\&amp;#123;% url &#39;index:article&#39; article.id %\\&#125;</code>会渲染成一条链接，链接到<code>index</code>应用中的<code>article</code>类并传入<code>article</code>的<code>ID</code>，即<code>/article/id/</code>。</p>\n<p>同样的，我们将<code>article.html</code>也套入渲染标签，具体的可以参照项目文件。</p>\n<h1 id=\"路由绑定\"><a href=\"#路由绑定\" class=\"headerlink\" title=\"路由绑定\"></a>路由绑定</h1><p>写完模板文件后网页还不能直接访问，因为我们还没有建立对应的路由。</p>\n<p>在<code>blog</code>目录下的<code>urls.py</code>写入内容：</p>\n<pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(&#39;admin/&#39;, admin.site.urls),  #后台的URL\n    path(&#39;&#39;, include(&#39;index.urls&#39;)),  #index应用的URL\n]</code></pre><p>然后在<code>index</code>目录新建一个<code>urls.py</code>，写入：</p>\n<pre><code>from django.urls import path\nfrom . import views  #引入视图类\n\napp_name = &#39;index&#39;  #定义命名空间\nurlpatterns = [\n    path(&#39;&#39;, views.index, name=&#39;index&#39;),  #绑定index，即首页\n    path(&#39;article/&lt;int:id&gt;/&#39;, views.article, name=&#39;article&#39;),  #绑定artile，即文章页\n]</code></pre><p>这里我们用到了俩个<code>urls.py</code>，这样做有个好处，系统先解析到项目目录下的<code>urls</code>，再分发到各个应用下的<code>urls</code>，当应用多时，不容易发生冲突。一图以蔽之：</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827141153.jpg\"  ><span class=\"image-caption\">url分发</span></p>\n<p>解释一下<code>path</code>，<code>path(&#39;article/&lt;int:id&gt;/&#39;, views.article, name=&#39;article&#39;)</code>中： 第一部分为匹配URL（匹配“article/id”），<code>&lt;int:id&gt;</code>说明传入一个int类型的id参数；第二部分将匹配到的链接解析到<code>views.py</code>视图文件中的<code>article</code>类；第三部分<code>name=&#39;article&#39;</code>定义的是一个别名，前面<code>\\&amp;#123;% url &#39;index:article&#39; article.id %\\&#125;</code>中的<code>index:article</code>就是这个别名。</p>\n<p>现在运行<code>python manmage.py runserver</code>，就可以看到页面了。</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827141930.jpg\"  ><span class=\"image-caption\">无样式首页</span></p>\n<p>很丑对不对，因为我们没有引入<code>css</code>样式，下面介绍怎么引入静态资源。</p>\n<h1 id=\"静态资源引入\"><a href=\"#静态资源引入\" class=\"headerlink\" title=\"静态资源引入\"></a>静态资源引入</h1><p>页面中的<code>css、js、images、fonts</code>都是静态资源，我们需要将它存放到公共目录，然后在<code>html</code>中动态引入。</p>\n<pre><code>为什么要动态引入？\n一： 动态引入后，我们如需变动静态资源的位置，只需在`setting.py`中重新设置下静态资源的路径即可，不必到各个`html`中改，省事儿。二： 项目在生产环境中运行时，一般只把静态资源暴露给用户，这样有利于网站安全。</code></pre><p>在<code>index</code>目录中新建一个<code>static</code>文件夹，将前端文件中的静态资源（css、js、images、ico、fonts)全都丢进去。</p>\n<p>由于Django默认就已经设置好了静态资源的路径，即当前应用下的<code>static</code>文件夹，所以我们无需另外设置。</p>\n<p>在<code>index.html</code>中最前面写上<code>\\&amp;#123;% load static %\\&#125;</code>，说明我们引入了静态资源。将标签中的静态资源都改成以下格式<code>\\&amp;#123;% static &#39;css/index.css&#39; %\\&#125;</code>。贴张图很明白：</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827143126.jpg\"  ><span class=\"image-caption\">静态资源</span></p>\n<p>ps: js也要改，如果有图片也得改。</p>\n<p>再次运行服务器，刷新下页面，是不是样式回来啦~</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827143250.jpg\"  ><span class=\"image-caption\">有样式首页</span></p>\n<h1 id=\"模板分离\"><a href=\"#模板分离\" class=\"headerlink\" title=\"模板分离\"></a>模板分离</h1><p>不知道你有没有发现，我们这个项目中<code>index.html</code>和<code>article.html</code>俩个文件的头部和尾部（也就是引入的静态资源部分）是一样的，不同的只是中间内容部分。我们可以建立一个公共模板页面，然后其他页面都套用这个公共页面，只更改变化的部分即可。</p>\n<pre><code>原因很显然，牵一发而动全身。</code></pre><p>在<code>templates</code>目录中新建一个<code>base.html</code>，它就是我们的公共模板，写入：</p>\n<pre><code>\\&amp;#123;% load static %\\&#125;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;\\&amp;#123;% static &#39;css/font-awesome.min.css&#39; %\\&#125;&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;\\&amp;#123;% static &#39;css/bootstrap.min.css&#39; %\\&#125;&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;\\&amp;#123;% static &#39;css/index.css&#39; %\\&#125;&quot;&gt;\n    &lt;link rel=&quot;icon&quot; href=&quot;\\&amp;#123;% static &#39;favicon.ico&#39; %\\&#125;&quot;&gt;\n    &amp;#123;% block header %&amp;#125;&amp;#123;% endblock %&amp;#125;\n    &lt;title&gt;zhaoo&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;nav class=&quot;navbar navbar-expand-md bg-dark navbar-dark&quot;&gt;\n        &lt;div class=&quot;container&quot;&gt;\n            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt;zhaoo&lt;/a&gt;\n            &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapsibleNavbar&quot;&gt;\n                &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;\n            &lt;/button&gt;\n            &lt;!-- &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;collapsibleNavbar&quot;&gt;\n                &lt;ul class=&quot;navbar-nav&quot;&gt;\n                    &lt;li class=&quot;nav-item&quot;&gt;\n                        &lt;a class=&quot;nav-link&quot; href=&quot;/&quot;&gt;&lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt;&amp;nbsp;首页&lt;/a&gt;\n                    &lt;/li&gt;\n                    &lt;li class=&quot;nav-item&quot;&gt;\n                        &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt;&amp;nbsp;文章&lt;/a&gt;\n                    &lt;/li&gt;\n                    &lt;li class=&quot;nav-item&quot;&gt;\n                        &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt;&amp;nbsp;关于&lt;/a&gt;\n                    &lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt; --&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n    &amp;#123;% block content %&amp;#125;&amp;#123;% endblock %&amp;#125;\n    &lt;footer class=&quot;footer&quot;&gt;\n        &lt;div class=&quot;container&quot;&gt;\n            &lt;ul class=&quot;link&quot;&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;友情链接&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;站点地图&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;关于我们&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;管理后台&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p class=&quot;copyright&quot;&gt;Copyright© 2018-2018 | &lt;a href=&quot;#&quot;&gt;zhaoo&lt;/a&gt; .AllRightsReserved&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/footer&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;js/jquery.min.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;js/bootstrap.min.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;js/index.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;/ckeditor/ckeditor/ckeditor.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;/ckeditor/ckeditor-init.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &amp;#123;% block footer %&amp;#125;&amp;#123;% endblock %&amp;#125;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre><p>然后在<code>index.html</code>中我们就可以这么写了：</p>\n<pre><code>&amp;#123;% extends &quot;base.html&quot; %&amp;#125;\n&amp;#123;% block content %&amp;#125;\n&lt;div class=&quot;container list wrap&quot;&gt;\n    &amp;#123;% for article in articleList %&amp;#125;\n        &lt;div class=&quot;content&quot;&gt;\n            &lt;h3&gt;\n                &lt;a href=&quot;\\&amp;#123;% url &#39;index:article&#39; article.id %\\&#125;&quot;&gt;&#123;&#123; article.title &#125;&#125;&lt;/a&gt;\n            &lt;/h3&gt;\n            &lt;div class=&quot;info&quot;&gt;\n                &lt;span&gt;\n                    &lt;i class=&quot;fa fa-clock-o&quot;&gt;&lt;/i&gt;发布时间: &#123;&#123; article.post_time &#125;&#125;&lt;/span&gt;\n                &lt;span&gt;\n                    &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;阅读量: &#123;&#123; article.views &#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n            &#123;&#123; article.content &#125;&#125;\n        &lt;/div&gt;\n    &amp;#123;% endfor %&amp;#125;\n&lt;/div&gt;\n&amp;#123;% endblock %&amp;#125;</code></pre><p>解释：</p>\n<pre><code>模板：\n&amp;#123;% block content %&amp;#125;\n&amp;#123;% endblock %&amp;#125;\n\n子文件：\n&amp;#123;% extends &quot;base.html&quot; %&amp;#125;  //引入base.html模板\n&amp;#123;% block content %&amp;#125;\n    ...code...  #其中变化的部分\n&amp;#123;% endblock %&amp;#125;</code></pre><p>子文件中<code>&amp;#123;% block content %&amp;#125;&amp;#123;% endblock %&amp;#125;</code>块包围的内容就是不同的部分，系统解析时会动态插入模板中，最后生成一个个页面。</p>\n<p>做到这一步，我们的博客项目就已经基本成型了，前台是我们自己写的，后台是Django自带的。</p>\n<h1 id=\"后台管理页面美化\"><a href=\"#后台管理页面美化\" class=\"headerlink\" title=\"后台管理页面美化\"></a>后台管理页面美化</h1><p>这部分开始都是一些无关紧要的优化，做不做随意。</p>\n<h1 id=\"安装Mdeditor富文本编辑器\"><a href=\"#安装Mdeditor富文本编辑器\" class=\"headerlink\" title=\"安装Mdeditor富文本编辑器\"></a>安装Mdeditor富文本编辑器</h1>","more":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ol>\n<li>资源下载地址:<a href=\"https://pan.baidu.com/s/1aUI4MEi0T17CfCKCXWFl7g\">项目文件</a>  <a href=\"https://pan.baidu.com/s/1nlCxZ0t93xPPflx01MBSTw\">前端文件</a></li>\n<li>文章中的<code>｛%</code>和<code>%｝</code>已经转义成了<code>&amp;#123;%</code>和<code>%&amp;#125;</code>，请自行更改。因为会和<code>hexo</code>的语法产生冲突，你看哈，我这里都得写成了中文的（其实是英文的），坑爹。</li>\n</ol>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>我的操作系统是Win10，IDE是VSCode。先给VSCode安装几个插件:</p>\n<ul>\n<li>Python</li>\n<li>Django Template</li>\n</ul>\n<p>然后我们需要安装Python，去官网下载最新版本，一路下一步即可，我装的是Python3.7。</p>\n<p>Python安装后我们需要安装一个Virtualenv来创建虚拟环境。为什么呀创建虚拟环境呢？因为Python是基于模块来扩展功能的，我们完成一个项目会安装许多的扩展模块，项目一多不容易管理，且容易发生冲突，所以我们需</p>\n<p>要创建一个虚拟环境将每个项目封装起来。<code>ctrl + ~</code>打开终端，输入以下指令：</p>\n<pre><code>pip install virtualenv  #安装Virtualenv</code></pre><p>新建一个目录，我这叫<code>django_web</code>，cd到目录。</p>\n<pre><code>virtualenv env  #创建env虚拟文件夹\nenv\\Scripts\\activate.bat  #激活虚拟环境</code></pre><p>在当前目录下新建<code>requirements.txt</code>文件，写入如下内容：</p>\n<pre><code>django\npylint\npylint-django\nautopep8</code></pre><p>django–Web开发框架，pylint–Python静态语法检测器,pylint-django– 适用于Django项目的语法检查插件，autopep8–代码格式化工具</p>\n<pre><code>pip install requirements.txt  #安装以上模块</code></pre><h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><p>在<code>django_web</code>目录下输入以下指令：</p>\n<pre><code>django-admin startproject blog  #创建blog项目\n\ncd blog  #cd到blog目录\n\npython manage.py startapp index  #创建index应用</code></pre><p>项目&amp;应用：</p>\n<p>项目： 在这个项目中通俗的讲就是<code>博客项目（blog）</code>。一个项目中可以有许多功能独立的应用组成，最终完成整个系统。</p>\n<p>应用： 在这个项目中通俗的讲有两个应用，分别是<code>前台（index）</code>和<code>后台（admin）</code>。应用是功能相对独立的一个模块，可以移植到不同的项目中。</p>\n<p>在VSCode中按<code>Ctrl + Shift + P</code>，输入<code>工作区</code>，点击<code>工作区：打开工作区配置文件</code>，查看是否含有以下内容，没有的话做适当修改。</p>\n<pre><code>    &quot;settings&quot;: &#123;\n        &quot;python.pythonPath&quot;: &quot;$&#123;workspaceFolder&#125;\\\\env\\\\Scripts\\\\python.exe&quot;,\n        &quot;python.linting.pylintPath&quot;: &quot;pylint&quot;,\n        &quot;python.linting.pylintArgs&quot;: [\n            &quot;--load-plugins&quot;, &quot;pylint_django&quot;\n        ],\n        &quot;python.formatting.autopep8Path&quot;: &quot;autopep8&quot;\n    &#125;</code></pre><p>再次按下<code>Ctrl + Shift + P</code>，输入<code>Python</code>，点击<code>Python：选择解析器</code>，然后点击<code>Python3.7（virtualenv）</code>。即使用虚拟环境中的Python解析器。</p>\n<p>至此，项目目录结构如下：</p>\n<pre><code>django_web\n  - env  #虚拟环境\n  - blog\n    -- manage.py  #Django的管理工具，可以运行web服务、管理数据库等工作。\n    -- blog  #blog项目\n      --- settings.py  #项目配置文件\n      --- urls.py  #将URL模式映射到应用\n      --- wsgi.py  #项目部署\n    -- index  #index应用\n      --- admin.py  #默认的后台管理程序\n      --- apps.py  #应用的相关配置。\n      --- models.py  #模型文件（model），用于配置ORM，设计数据库\n      --- tests.py  #单元测试\n      --- veiws.py  #视图文件（view），用于编写功能的主要处理逻辑</code></pre><h1 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h1><p>Django默认且自带<code>SQLite</code>数据库，对于这个小项目，使用<code>SQLite</code>足够了。如果你想使用其他数据库，如<code>MySQL</code>,请查阅相关文档   </p>\n<p>打开<code>index</code>目录下的<code>model.py</code>，该文件用于定义数据库结构。</p>\n<pre><code>from django.db import models\n\nclass Article(models.Model):\n    title = models.CharField(max_length = 150)  #文章标题\n    content = models.TextField()  #文章正文\n    post_time = models.DateTimeField()  #文章创建时间\n    views = models.IntegerField(default=0)  #文章访问量，初始化为0</code></pre><p>可以看到类名<code>Article</code>将作为数据库中的一张数据表，类中的每一条内容为一个字段，<code>=</code>后面的models的实例为字段的类型。</p>\n<p>在<code>blog</code>目录下执行以下指令：</p>\n<pre><code>python manage.py makemigrations blog  #将模型文件储存为迁移\n\npython manage.py migrate  #通过迁移创建数据库</code></pre><p>现在，项目文件下会生成一个<code>db.sqlite3</code>文件，这个便是系统生成的数据库，可以使用SQLite管理工具打开。</p>\n<h1 id=\"启动默认后台管理程序\"><a href=\"#启动默认后台管理程序\" class=\"headerlink\" title=\"启动默认后台管理程序\"></a>启动默认后台管理程序</h1><p>使用默认的后台管理程序，需要先创建账号。在<code>blog</code>目录下输入以下指令：</p>\n<pre><code>python manage.py createsuperuser  #创建账户\nUsername (leave blank to use &#39;fnngj&#39;):  admin  #管理员帐号\nEmail address:  894519210@qq.com  #email\nPassword:  ********  # 密码\nPassword (again):  ********  #重复密码\nSuperuser created successfully.  #创建成功</code></pre><p>接下来我们将创建好的<code>Article</code>数据表绑定到后台管理程序。</p>\n<p>打开<code>index</code>下的<code>admin.py</code>文件，写入如下内容：</p>\n<pre><code>from django.contrib import admin\nfrom index.models import Article\n\nclass ArticleAdmin(admin.ModelAdmin):\n    list_display = [&#39;title&#39;, &#39;content&#39;, &#39;post_time&#39;, &#39;views&#39;]\n\nadmin.site.register(Article, ArticleAdmin)</code></pre><p>然后在<code>blog</code>下输入以下指令，启动Django：</p>\n<pre><code>python manage.py runserver</code></pre><p>在浏览器中输入<code>127.0.0.1:8000/admin</code>，输入用户名密码，进入后台管理页面。</p>\n<p>在这里，我们可以撰写文章了，当务之急，肯定是先写个“Hello, World!”嘛。</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827131159.jpg\"  ><span class=\"image-caption\">hello,world</span></p>\n<p>可以看到，Django默认配置的后台管理程序还是很方便的，虽说有点小丑，但功能还是很齐全的。没关系，我们后面会开发自己的后台管理页面。</p>\n<h1 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h1><p>数据库已经有文章内容了，这时候我们需要完成我们的前台页面。</p>\n<p>首先在<code>index</code>目录下创建一个<code>templates</code>文件夹，这个文件夹是用来存放我们的<code>.html</code>文件的。在<code>templates</code>目录下将我们<code>前端文件</code>中的<code>.html</code>文件全拷进去。</p>\n<p>打开<code>veiws.py</code>文件，输入：</p>\n<pre><code>from django.shortcuts import render\nfrom index.models import Article  #引入Article类，即数据库\n\ndef index(request):\n    articleList = Article.objects.order_by(&quot;-post_time&quot;).all()  #从数据库中读出所有文章列表\n    return render(request, &#39;index.html&#39;, &#123;&#39;articleList&#39;: articleList&#125;)  #将文章列表渲染到index.html\n\ndef article(request, id):\n    article = Article.objects.get(pk=id)\n    return render(request, &#39;article.html&#39;, &#123;&#39;article&#39;: article&#125;)</code></pre><p>打开<code>index.html</code>，将其中输出文章列表的<code>div</code>内容改成如下（多余的div块删了吧，只留一个就行）</p>\n<pre><code>&lt;div class=&quot;container list wrap&quot;&gt;\n    &amp;#123;% for article in articleList %&amp;#125;\n        &lt;div class=&quot;content&quot;&gt;\n            &lt;h3&gt;\n                &lt;a href=&quot;\\&amp;#123;% url &#39;index:article&#39; article.id %\\&#125;&quot;&gt;&#123;&#123; article.title &#125;&#125;&lt;/a&gt;\n            &lt;/h3&gt;\n            &lt;div class=&quot;info&quot;&gt;\n                &lt;span&gt;\n                    &lt;i class=&quot;fa fa-clock-o&quot;&gt;&lt;/i&gt;发布时间: &#123;&#123; article.post_time &#125;&#125;&lt;/span&gt;\n                &lt;span&gt;\n                    &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;阅读量: &#123;&#123; article.views &#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n            &#123;&#123; article.content &#125;&#125;\n        &lt;/div&gt;\n    &amp;#123;% endfor %&amp;#125;\n&lt;/div&gt;</code></pre><p>稍微解释一下，这个<code>views.py</code>就是负责将数据从数据库调出，业务逻辑处理后，渲染到前端模板（<code>index.html</code>）。我们对应着这两个文件看：</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827135408.jpg\"  ><span class=\"image-caption\">视图层解释</span></p>\n<p><code>views.py</code>读取了<code>Article</code>数据库中的数据，存放到<code>articleList</code>这个变量中，然后渲染到<code>index.html</code>文件。</p>\n<p><code>&amp;#123;% for article in articleList %&amp;#125;</code> 表示进行循环，文章有就循环几次。<code>&#123;&#123; article.title &#125;&#125;</code>双括号中的数据会替换成数据库中读出的每条记录，这里就是对应文章的标题。</p>\n<p><code>\\&amp;#123;% url &#39;index:article&#39; article.id %\\&#125;</code>会渲染成一条链接，链接到<code>index</code>应用中的<code>article</code>类并传入<code>article</code>的<code>ID</code>，即<code>/article/id/</code>。</p>\n<p>同样的，我们将<code>article.html</code>也套入渲染标签，具体的可以参照项目文件。</p>\n<h1 id=\"路由绑定\"><a href=\"#路由绑定\" class=\"headerlink\" title=\"路由绑定\"></a>路由绑定</h1><p>写完模板文件后网页还不能直接访问，因为我们还没有建立对应的路由。</p>\n<p>在<code>blog</code>目录下的<code>urls.py</code>写入内容：</p>\n<pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(&#39;admin/&#39;, admin.site.urls),  #后台的URL\n    path(&#39;&#39;, include(&#39;index.urls&#39;)),  #index应用的URL\n]</code></pre><p>然后在<code>index</code>目录新建一个<code>urls.py</code>，写入：</p>\n<pre><code>from django.urls import path\nfrom . import views  #引入视图类\n\napp_name = &#39;index&#39;  #定义命名空间\nurlpatterns = [\n    path(&#39;&#39;, views.index, name=&#39;index&#39;),  #绑定index，即首页\n    path(&#39;article/&lt;int:id&gt;/&#39;, views.article, name=&#39;article&#39;),  #绑定artile，即文章页\n]</code></pre><p>这里我们用到了俩个<code>urls.py</code>，这样做有个好处，系统先解析到项目目录下的<code>urls</code>，再分发到各个应用下的<code>urls</code>，当应用多时，不容易发生冲突。一图以蔽之：</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827141153.jpg\"  ><span class=\"image-caption\">url分发</span></p>\n<p>解释一下<code>path</code>，<code>path(&#39;article/&lt;int:id&gt;/&#39;, views.article, name=&#39;article&#39;)</code>中： 第一部分为匹配URL（匹配“article/id”），<code>&lt;int:id&gt;</code>说明传入一个int类型的id参数；第二部分将匹配到的链接解析到<code>views.py</code>视图文件中的<code>article</code>类；第三部分<code>name=&#39;article&#39;</code>定义的是一个别名，前面<code>\\&amp;#123;% url &#39;index:article&#39; article.id %\\&#125;</code>中的<code>index:article</code>就是这个别名。</p>\n<p>现在运行<code>python manmage.py runserver</code>，就可以看到页面了。</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827141930.jpg\"  ><span class=\"image-caption\">无样式首页</span></p>\n<p>很丑对不对，因为我们没有引入<code>css</code>样式，下面介绍怎么引入静态资源。</p>\n<h1 id=\"静态资源引入\"><a href=\"#静态资源引入\" class=\"headerlink\" title=\"静态资源引入\"></a>静态资源引入</h1><p>页面中的<code>css、js、images、fonts</code>都是静态资源，我们需要将它存放到公共目录，然后在<code>html</code>中动态引入。</p>\n<pre><code>为什么要动态引入？\n一： 动态引入后，我们如需变动静态资源的位置，只需在`setting.py`中重新设置下静态资源的路径即可，不必到各个`html`中改，省事儿。二： 项目在生产环境中运行时，一般只把静态资源暴露给用户，这样有利于网站安全。</code></pre><p>在<code>index</code>目录中新建一个<code>static</code>文件夹，将前端文件中的静态资源（css、js、images、ico、fonts)全都丢进去。</p>\n<p>由于Django默认就已经设置好了静态资源的路径，即当前应用下的<code>static</code>文件夹，所以我们无需另外设置。</p>\n<p>在<code>index.html</code>中最前面写上<code>\\&amp;#123;% load static %\\&#125;</code>，说明我们引入了静态资源。将标签中的静态资源都改成以下格式<code>\\&amp;#123;% static &#39;css/index.css&#39; %\\&#125;</code>。贴张图很明白：</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827143126.jpg\"  ><span class=\"image-caption\">静态资源</span></p>\n<p>ps: js也要改，如果有图片也得改。</p>\n<p>再次运行服务器，刷新下页面，是不是样式回来啦~</p>\n<p><img  src=\"https://pic.izhaoo.com/20180827143250.jpg\"  ><span class=\"image-caption\">有样式首页</span></p>\n<h1 id=\"模板分离\"><a href=\"#模板分离\" class=\"headerlink\" title=\"模板分离\"></a>模板分离</h1><p>不知道你有没有发现，我们这个项目中<code>index.html</code>和<code>article.html</code>俩个文件的头部和尾部（也就是引入的静态资源部分）是一样的，不同的只是中间内容部分。我们可以建立一个公共模板页面，然后其他页面都套用这个公共页面，只更改变化的部分即可。</p>\n<pre><code>原因很显然，牵一发而动全身。</code></pre><p>在<code>templates</code>目录中新建一个<code>base.html</code>，它就是我们的公共模板，写入：</p>\n<pre><code>\\&amp;#123;% load static %\\&#125;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;\\&amp;#123;% static &#39;css/font-awesome.min.css&#39; %\\&#125;&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;\\&amp;#123;% static &#39;css/bootstrap.min.css&#39; %\\&#125;&quot;&gt;\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;\\&amp;#123;% static &#39;css/index.css&#39; %\\&#125;&quot;&gt;\n    &lt;link rel=&quot;icon&quot; href=&quot;\\&amp;#123;% static &#39;favicon.ico&#39; %\\&#125;&quot;&gt;\n    &amp;#123;% block header %&amp;#125;&amp;#123;% endblock %&amp;#125;\n    &lt;title&gt;zhaoo&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;nav class=&quot;navbar navbar-expand-md bg-dark navbar-dark&quot;&gt;\n        &lt;div class=&quot;container&quot;&gt;\n            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt;zhaoo&lt;/a&gt;\n            &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#collapsibleNavbar&quot;&gt;\n                &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt;\n            &lt;/button&gt;\n            &lt;!-- &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;collapsibleNavbar&quot;&gt;\n                &lt;ul class=&quot;navbar-nav&quot;&gt;\n                    &lt;li class=&quot;nav-item&quot;&gt;\n                        &lt;a class=&quot;nav-link&quot; href=&quot;/&quot;&gt;&lt;i class=&quot;fa fa-home&quot;&gt;&lt;/i&gt;&amp;nbsp;首页&lt;/a&gt;\n                    &lt;/li&gt;\n                    &lt;li class=&quot;nav-item&quot;&gt;\n                        &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-file-text&quot;&gt;&lt;/i&gt;&amp;nbsp;文章&lt;/a&gt;\n                    &lt;/li&gt;\n                    &lt;li class=&quot;nav-item&quot;&gt;\n                        &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt;&amp;nbsp;关于&lt;/a&gt;\n                    &lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt; --&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n    &amp;#123;% block content %&amp;#125;&amp;#123;% endblock %&amp;#125;\n    &lt;footer class=&quot;footer&quot;&gt;\n        &lt;div class=&quot;container&quot;&gt;\n            &lt;ul class=&quot;link&quot;&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;友情链接&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;站点地图&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;关于我们&lt;/a&gt;&lt;/li&gt;\n                &lt;li&gt;&lt;a href=&quot;#&quot;&gt;管理后台&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p class=&quot;copyright&quot;&gt;Copyright© 2018-2018 | &lt;a href=&quot;#&quot;&gt;zhaoo&lt;/a&gt; .AllRightsReserved&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/footer&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;js/jquery.min.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;js/bootstrap.min.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;js/index.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;/ckeditor/ckeditor/ckeditor.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;\\&amp;#123;% static &#39;/ckeditor/ckeditor-init.js&#39; %\\&#125;&quot;&gt;&lt;/script&gt;\n    &amp;#123;% block footer %&amp;#125;&amp;#123;% endblock %&amp;#125;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre><p>然后在<code>index.html</code>中我们就可以这么写了：</p>\n<pre><code>&amp;#123;% extends &quot;base.html&quot; %&amp;#125;\n&amp;#123;% block content %&amp;#125;\n&lt;div class=&quot;container list wrap&quot;&gt;\n    &amp;#123;% for article in articleList %&amp;#125;\n        &lt;div class=&quot;content&quot;&gt;\n            &lt;h3&gt;\n                &lt;a href=&quot;\\&amp;#123;% url &#39;index:article&#39; article.id %\\&#125;&quot;&gt;&#123;&#123; article.title &#125;&#125;&lt;/a&gt;\n            &lt;/h3&gt;\n            &lt;div class=&quot;info&quot;&gt;\n                &lt;span&gt;\n                    &lt;i class=&quot;fa fa-clock-o&quot;&gt;&lt;/i&gt;发布时间: &#123;&#123; article.post_time &#125;&#125;&lt;/span&gt;\n                &lt;span&gt;\n                    &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;阅读量: &#123;&#123; article.views &#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n            &#123;&#123; article.content &#125;&#125;\n        &lt;/div&gt;\n    &amp;#123;% endfor %&amp;#125;\n&lt;/div&gt;\n&amp;#123;% endblock %&amp;#125;</code></pre><p>解释：</p>\n<pre><code>模板：\n&amp;#123;% block content %&amp;#125;\n&amp;#123;% endblock %&amp;#125;\n\n子文件：\n&amp;#123;% extends &quot;base.html&quot; %&amp;#125;  //引入base.html模板\n&amp;#123;% block content %&amp;#125;\n    ...code...  #其中变化的部分\n&amp;#123;% endblock %&amp;#125;</code></pre><p>子文件中<code>&amp;#123;% block content %&amp;#125;&amp;#123;% endblock %&amp;#125;</code>块包围的内容就是不同的部分，系统解析时会动态插入模板中，最后生成一个个页面。</p>\n<p>做到这一步，我们的博客项目就已经基本成型了，前台是我们自己写的，后台是Django自带的。</p>\n<h1 id=\"后台管理页面美化\"><a href=\"#后台管理页面美化\" class=\"headerlink\" title=\"后台管理页面美化\"></a>后台管理页面美化</h1><p>这部分开始都是一些无关紧要的优化，做不做随意。</p>\n<h1 id=\"安装Mdeditor富文本编辑器\"><a href=\"#安装Mdeditor富文本编辑器\" class=\"headerlink\" title=\"安装Mdeditor富文本编辑器\"></a>安装Mdeditor富文本编辑器</h1>","categories":[{"name":"后端","path":"api/categories/后端.json"}],"tags":[{"name":"框架","path":"api/tags/框架.json"},{"name":"后端","path":"api/tags/后端.json"}]}