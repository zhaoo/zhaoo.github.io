{"title":"口袋拾荒 - 垃圾分类助手","slug":"ai-garbage-classification","date":"2020-08-02T09:46:38.000Z","updated":"2021-02-03T08:01:17.000Z","comments":true,"path":"api/articles/ai-garbage-classification.json","realPath":"/2020/08/02/ai-garbage-classification/","excerpt":"基于 Taro 开发的垃圾分类辅助小程序，支持拍照识别、关键词搜索、字典检索等功能。","covers":["https://pic.izhaoo.com/1596359686072.jpg"],"cover":"https://pic.izhaoo.com/20200228082224.jpg","content":"<p>基于 <code>Taro</code> 开发的垃圾分类辅助小程序，支持拍照识别、关键词搜索、字典检索等功能。</p>\n<span id=\"more\"></span>\n\n<p>&lt;封面摄于浙江·杭州的西溪湿地，与小潘同学秋游。&gt;</p>\n<blockquote>\n<p>GitHub: <a href=\"https://github.com/izhaoo/garbage-classification\">garbage-classification</a></p>\n</blockquote>\n<div align=\"center\">\n  <img  src=\"https://pic.izhaoo.com/1596359686072.jpg\"   width=\"350\" /><span class=\"image-caption\">口袋拾荒</span>\n</div>\n\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><ul>\n<li>小程序: Taro, GraphQL (Apollo), TypeScript, React (Hooks), Canvas</li>\n<li>后台: AntDesign, TypeScript, React</li>\n<li>服务端: Nest.js, Mongoose, GraphQL （Apollo）, TypeScript, 百度AI</li>\n<li>爬虫: cheerio, superagent, Koa, Mongoose</li>\n</ul>\n<h5 id=\"Taro-图片（URL）-转-base64\"><a href=\"#Taro-图片（URL）-转-base64\" class=\"headerlink\" title=\"Taro 图片（URL） 转 base64\"></a>Taro 图片（URL） 转 base64</h5><p><strong>百度AI</strong> 接口接受 <code>base64</code> 形式的图片，并且识别主体内容和轮廓。所以我们需要通过相机拍照，以 <code>base64</code> 的形式上传到服务端。然而 <code>Taro.createCameraContext</code> 返回的是图片在本地缓存地址，而不是图片文件，无法转换为 <code>base64</code>，<code>Taro</code> 中也没相应的文档。后来发现，原来 <code>Taro</code> 是小程序的子集，在 <code>Taro</code> 中也能使用 <code>wx API</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// func.ts</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">url2base64</span>(<span class=\"hljs-params\">url</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    wx.getFileSystemManager().readFile(&#123;<br>      <span class=\"hljs-attr\">filePath</span>: url,<br>      <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">&#x27;base64&#x27;</span>,<br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>        resolve(res.data)<br>      &#125;,<br>      <span class=\"hljs-attr\">fail</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>        reject(err)<br>      &#125;<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// page.ts</span><br><br><span class=\"hljs-keyword\">import</span> &#123;url2base64&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;~/func.js&#x27;</span><br><br>onCamera = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> ctx = Taro.createCameraContext()<br>  ctx.takePhoto(&#123;<br>    <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-string\">&#x27;high&#x27;</span>,<br>    <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">async</span> res =&gt; &#123;<br>      <span class=\"hljs-keyword\">const</span> base64 = <span class=\"hljs-keyword\">await</span> url2base64(res.tempImagePath)<br>      <span class=\"hljs-keyword\">const</span> &#123; width, height &#125; = <span class=\"hljs-keyword\">await</span> Taro.getImageInfo(&#123; <span class=\"hljs-attr\">src</span>: res.tempImagePath &#125;)<br>      <span class=\"hljs-built_in\">this</span>.handleCanvas(base64, res.tempImagePath, &#123; width, height &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Canvas-绘制物品轮廓（自适应设备）\"><a href=\"#Canvas-绘制物品轮廓（自适应设备）\" class=\"headerlink\" title=\"Canvas 绘制物品轮廓（自适应设备）\"></a>Canvas 绘制物品轮廓（自适应设备）</h5><blockquote>\n<p><a href=\"https://cloud.tencent.com/developer/article/1352187\">细说移动端 经典的REM布局 与 新秀VW布局</a></p>\n</blockquote>\n<p>将图片转为 <code>base64</code> 后就可以请求 <code>百度AI</code> 了，成功识别出了物品的名称（text），轮廓（四个坐标点），现在需要通过 <code>Canvas</code> 将它们绘制在画布中。</p>\n<p>遇到一个问题：图片在微信小程序IDE中调试没问题，但是一旦传到真机调试，比例就会失调，主要是因为文字和轮廓受设备分辨率影响进行了偏移。</p>\n<p>之前看过一篇文章，有个概念：<code>设备像素比 ＝ 物理像素 / 设备独立像素</code>。这里的偏移就是 <code>dpr</code> 导致的，所以我们只需要计算出 <code>dpr</code>，再将它缩放回来即可。（机智如我）</p>\n<p>通过以下代码可以获取页面的实际尺寸：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">window</span> = Taro.getSystemInfo()<br><span class=\"hljs-keyword\">const</span> w = <span class=\"hljs-built_in\">window</span>.windowWidth<br><span class=\"hljs-keyword\">const</span> h = <span class=\"hljs-built_in\">window</span>.windowHeight<br></code></pre></td></tr></table></figure>\n\n<p>再将 <strong>页面尺寸</strong> 与 <strong>照片尺寸</strong> 做个除法计算即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">handleCanvas = <span class=\"hljs-function\">(<span class=\"hljs-params\">base64, src, photo</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">//获取设备实际尺寸</span><br>  <span class=\"hljs-keyword\">const</span> w = res.windowWidth<br>  <span class=\"hljs-keyword\">const</span> h = res.windowHeight - <span class=\"hljs-number\">90</span><br>  <span class=\"hljs-comment\">//计算缩放比</span><br>  <span class=\"hljs-keyword\">const</span> scale = &#123;<br>    <span class=\"hljs-attr\">w</span>: w / photo.width,<br>    <span class=\"hljs-attr\">h</span>: h / photo.height<br>  &#125;<br>  <span class=\"hljs-keyword\">const</span> ctx = Taro.createCanvasContext(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>, <span class=\"hljs-built_in\">this</span>.$scope)<br>  Taro.getSystemInfo(&#123;<br>    <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">async</span> res =&gt; &#123;<br>      <span class=\"hljs-comment\">// 渲染图片</span><br>      ctx.drawImage(src, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, w, h)<br>      <span class=\"hljs-comment\">// 主体识别，获得轮廓</span><br>      <span class=\"hljs-keyword\">const</span> subject: any = <span class=\"hljs-keyword\">await</span> baiduSubjectDetection(<span class=\"hljs-built_in\">this</span>.state.baiduToken, &#123;<br>        <span class=\"hljs-attr\">image</span>: base64<br>      &#125;)<br>      <span class=\"hljs-keyword\">const</span> &#123; height, width, top, left &#125; = subject.result<br>      <span class=\"hljs-comment\">// 内容识别，获得物品名称</span><br>      <span class=\"hljs-keyword\">const</span> advance: any = <span class=\"hljs-keyword\">await</span> baiduAdvancedGeneral(<span class=\"hljs-built_in\">this</span>.state.baiduToken, &#123;<br>        <span class=\"hljs-attr\">image</span>: base64<br>      &#125;)<br>      <span class=\"hljs-keyword\">const</span> &#123; keyword &#125; = advance.result[<span class=\"hljs-number\">0</span>]<br>      <span class=\"hljs-comment\">//渲染轮廓和尺寸</span><br>      <span class=\"hljs-built_in\">this</span>.setState(&#123; <span class=\"hljs-attr\">keyword</span>: keyword &#125;)<br>      ctx.setStrokeStyle(<span class=\"hljs-string\">&quot;#00ff00&quot;</span>)<br>      ctx.setLineWidth(<span class=\"hljs-number\">2</span>)<br>      ctx.rect(left, top, width, height)<br>      <span class=\"hljs-comment\">//适配屏幕尺寸进行缩放</span><br>      ctx.scale(scale.w, scale.h)<br>      ctx.setFillStyle(<span class=\"hljs-string\">&quot;#00ff00&quot;</span>)<br>      ctx.setFontSize(<span class=\"hljs-number\">18</span> / scale.w)<br>      ctx.fillText(keyword, left, (top + <span class=\"hljs-number\">30</span>))<br>      ctx.stroke()<br>      ctx.draw()<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Canvas-绘制海报并保存到相册\"><a href=\"#Canvas-绘制海报并保存到相册\" class=\"headerlink\" title=\"Canvas 绘制海报并保存到相册\"></a>Canvas 绘制海报并保存到相册</h5><p>推广页面的二维码海报也是用 <code>Canvas</code> 绘制的，实现了长按图片保存到相册功能，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取画布尺寸</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">window</span> = Taro.getSystemInfoSync()<br><span class=\"hljs-keyword\">const</span> w = <span class=\"hljs-built_in\">window</span>.windowWidth * <span class=\"hljs-number\">0.8</span><br><span class=\"hljs-keyword\">const</span> h = <span class=\"hljs-built_in\">window</span>.windowWidth * <span class=\"hljs-number\">0.8</span> * <span class=\"hljs-number\">9</span> / <span class=\"hljs-number\">5</span><br><br><span class=\"hljs-comment\">//保存海报到相册</span><br><span class=\"hljs-keyword\">const</span> handleSaveImage = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-comment\">//将 canvas 保存到缓存中</span><br>  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> Taro.canvasToTempFilePath(&#123;<br>    <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-attr\">width</span>: w,<br>    <span class=\"hljs-attr\">height</span>: h,<br>    <span class=\"hljs-attr\">canvasId</span>: <span class=\"hljs-string\">&#x27;canvas&#x27;</span>,<br>    <span class=\"hljs-attr\">fileType</span>: <span class=\"hljs-string\">&#x27;png&#x27;</span><br>  &#125;)<br>  <span class=\"hljs-comment\">//将缓存中的图片保存到相册中</span><br>  <span class=\"hljs-keyword\">let</span> saveRes = <span class=\"hljs-keyword\">await</span> Taro.saveImageToPhotosAlbum(&#123;<br>    <span class=\"hljs-attr\">filePath</span>: res.tempFilePath<br>  &#125;)<br>  <span class=\"hljs-keyword\">if</span> (saveRes.errMsg === <span class=\"hljs-string\">&#x27;saveImageToPhotosAlbum:ok&#x27;</span>) &#123;<br>    Taro.showToast(&#123;<br>      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;图片已保存到相册&#x27;</span><br>    &#125;)<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    Taro.showToast(&#123;<br>      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;保存失败&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> renderCanvas = <span class=\"hljs-function\">(<span class=\"hljs-params\">text = <span class=\"hljs-string\">&#x27;快来扫一扫吧&#x27;</span></span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> ctx = Taro.createCanvasContext(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>, <span class=\"hljs-literal\">null</span>)<br>  <span class=\"hljs-comment\">//背景铺满</span><br>  ctx.drawImage(background, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, w, h)<br>  ctx.setFillStyle(<span class=\"hljs-string\">&quot;#ffffff&quot;</span>)<br>  <span class=\"hljs-comment\">//文字居中</span><br>  ctx.setFontSize(<span class=\"hljs-number\">22</span>)<br>  ctx.setTextAlign(<span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>  ctx.fillText(<span class=\"hljs-string\">&#x27;口袋拾荒&#x27;</span>, w / <span class=\"hljs-number\">2</span>, h - <span class=\"hljs-number\">200</span>)<br>  ctx.setFontSize(<span class=\"hljs-number\">12</span>)<br>  ctx.fillText(<span class=\"hljs-string\">`- <span class=\"hljs-subst\">$&#123;text&#125;</span> -`</span>, w / <span class=\"hljs-number\">2</span>, h - <span class=\"hljs-number\">180</span>)<br>  ctx.draw()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>by the way，文字居中官方文档中是用 <code>setTextAlign(&#39;center&#39;)</code> 实现的，但是实际却没有效果。因为它是以整个画布的宽度的一半的中心轴为基准线，我们还需要将文字的横轴移到画布中心轴：<code>ctx.fillText(text, w / 2, h)</code>。</p>\n<h5 id=\"数据爬虫\"><a href=\"#数据爬虫\" class=\"headerlink\" title=\"数据爬虫\"></a>数据爬虫</h5><p>爬虫功能很简单，用 <strong>superagent</strong> 库请求网站获取 <code>html</code> 文档，再用 <strong>cheerio</strong> 库解析标签清洗数据，最后用 <strong>mongoose</strong> 存到数据库中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//爬取数据</span><br><span class=\"hljs-keyword\">const</span> superagent = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;superagent&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> cheerio = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;cheerio&#x27;</span>)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Eight</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.url = &#123;<br>      <span class=\"hljs-attr\">other</span>: <span class=\"hljs-string\">&#x27;https://www.8684.cn/ljfl_glj&#x27;</span>,<br>      <span class=\"hljs-attr\">food</span>: <span class=\"hljs-string\">&#x27;https://www.8684.cn/ljfl_slj&#x27;</span>,<br>      <span class=\"hljs-attr\">harmful</span>: <span class=\"hljs-string\">&#x27;https://www.8684.cn/ljfl_yhlj&#x27;</span>,<br>      <span class=\"hljs-attr\">recyclable</span>: <span class=\"hljs-string\">&#x27;https://www.8684.cn/ljfl_khslj&#x27;</span><br>    &#125;<br>  &#125;<br><br>  parse = <span class=\"hljs-function\">(<span class=\"hljs-params\">body</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> $ = cheerio.load(body.text)<br>    <span class=\"hljs-keyword\">let</span> arr = []<br>    $(<span class=\"hljs-string\">&#x27;.list-col4 li a&#x27;</span>).each(<span class=\"hljs-function\">(<span class=\"hljs-params\">index, ele</span>) =&gt;</span> &#123;<br>      arr.push($(ele).text())<br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> arr<br>  &#125;<br><br>  run = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123; url, parse &#125; = <span class=\"hljs-built_in\">this</span><br>    <span class=\"hljs-keyword\">let</span> data = []<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">in</span> url) &#123;<br>      <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> superagent.get(url[i])<br>      data.push(&#123;<br>        <span class=\"hljs-attr\">key</span>: i,<br>        <span class=\"hljs-attr\">value</span>: parse(res)<br>      &#125;)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> data<br>  &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">exports</span>.Eight = Eight<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//存到数据库</span><br><br><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa()<br><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> &#123; Eight &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./source&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> config = &#123;<br>  <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&#x27;localhost&#x27;</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3000</span>,<br>&#125;<br><br>app.use(<span class=\"hljs-keyword\">async</span> ctx =&gt; &#123;<br>  ctx.body = <span class=\"hljs-string\">&#x27;Hello World&#x27;</span><br>&#125;)<br><br>app.listen(config.port, config.hostname)<br><br><span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">&#x27;Server is running at http://%s:%s . Press Ctrl+C to stop.&#x27;</span>, config.hostname, config.port)<br><br>mongoose.connect(<span class=\"hljs-string\">&#x27;mongodb://localhost/garbage&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> Garbage = mongoose.model(<span class=\"hljs-string\">&#x27;Garbage&#x27;</span>, &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">categoryId</span>: <span class=\"hljs-built_in\">String</span> &#125;);<br><br><span class=\"hljs-keyword\">const</span> eight = <span class=\"hljs-keyword\">new</span> Eight()<br>eight.run().then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> data = res[<span class=\"hljs-number\">0</span>].value<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> data) &#123;<br>    Garbage.create(&#123;<span class=\"hljs-attr\">name</span>:i, <span class=\"hljs-attr\">categoryId</span>: <span class=\"hljs-string\">&#x27;5e427fe8558c2a31cd450fbc&#x27;</span>&#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Taro-封装-Apollo-请求库\"><a href=\"#Taro-封装-Apollo-请求库\" class=\"headerlink\" title=\"Taro 封装 Apollo 请求库\"></a>Taro 封装 Apollo 请求库</h5><p>简单封装一下 <code>GraphQL</code> 请求库，方便调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// /api/graphql.ts</span><br><br><span class=\"hljs-keyword\">import</span> Taro <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@tarojs/taro&#x27;</span><br><span class=\"hljs-keyword\">import</span> ApolloClient <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;apollo-boost&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> uri = <span class=\"hljs-string\">&#x27;https://xxx.com/graphql&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> fetch = <span class=\"hljs-function\">(<span class=\"hljs-params\">url, &#123; body: data, ...fetchOptions &#125;</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> Taro.request(&#123; url, data, ...fetchOptions, <span class=\"hljs-attr\">dataType</span>: <span class=\"hljs-string\">&#x27;txt&#x27;</span>, <span class=\"hljs-attr\">responseType</span>: <span class=\"hljs-string\">&#x27;text&#x27;</span> &#125;)<br>    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      res.text = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">Promise</span>.resolve(res.data)<br>      <span class=\"hljs-keyword\">return</span> res<br>    &#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.error(error)<br>    &#125;,<br>  );<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> ApolloClient(&#123; uri, fetch &#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// /api/gql.ts</span><br><br><span class=\"hljs-keyword\">import</span> &#123; gql &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;apollo-boost&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> category = gql<span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">  query &#123;</span><br><span class=\"hljs-string\">    category &#123;</span><br><span class=\"hljs-string\">      name</span><br><span class=\"hljs-string\">      id</span><br><span class=\"hljs-string\">      image</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  &#125;</span><br><span class=\"hljs-string\">`</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// page.ts</span><br><br><span class=\"hljs-keyword\">import</span> &#123; category &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;~/api/gql&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> graphql.query(&#123; <span class=\"hljs-attr\">query</span>: category &#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"真机调试内网穿透\"><a href=\"#真机调试内网穿透\" class=\"headerlink\" title=\"真机调试内网穿透\"></a>真机调试内网穿透</h3><p>详见该文章 -&gt; <a href=\"https://www.izhaoo.com/2020/02/12/weapp-debug-https/\">小程序真机调试问题</a></p>\n","more":"<p>&lt;封面摄于浙江·杭州的西溪湿地，与小潘同学秋游。&gt;</p>\n<blockquote>\n<p>GitHub: <a href=\"https://github.com/izhaoo/garbage-classification\">garbage-classification</a></p>\n</blockquote>\n<div align=\"center\">\n  <img  src=\"https://pic.izhaoo.com/1596359686072.jpg\"   width=\"350\" /><span class=\"image-caption\">口袋拾荒</span>\n</div>\n\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><ul>\n<li>小程序: Taro, GraphQL (Apollo), TypeScript, React (Hooks), Canvas</li>\n<li>后台: AntDesign, TypeScript, React</li>\n<li>服务端: Nest.js, Mongoose, GraphQL （Apollo）, TypeScript, 百度AI</li>\n<li>爬虫: cheerio, superagent, Koa, Mongoose</li>\n</ul>\n<h5 id=\"Taro-图片（URL）-转-base64\"><a href=\"#Taro-图片（URL）-转-base64\" class=\"headerlink\" title=\"Taro 图片（URL） 转 base64\"></a>Taro 图片（URL） 转 base64</h5><p><strong>百度AI</strong> 接口接受 <code>base64</code> 形式的图片，并且识别主体内容和轮廓。所以我们需要通过相机拍照，以 <code>base64</code> 的形式上传到服务端。然而 <code>Taro.createCameraContext</code> 返回的是图片在本地缓存地址，而不是图片文件，无法转换为 <code>base64</code>，<code>Taro</code> 中也没相应的文档。后来发现，原来 <code>Taro</code> 是小程序的子集，在 <code>Taro</code> 中也能使用 <code>wx API</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// func.ts</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">url2base64</span>(<span class=\"hljs-params\">url</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    wx.getFileSystemManager().readFile(&#123;<br>      <span class=\"hljs-attr\">filePath</span>: url,<br>      <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">&#x27;base64&#x27;</span>,<br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>        resolve(res.data)<br>      &#125;,<br>      <span class=\"hljs-attr\">fail</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>        reject(err)<br>      &#125;<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// page.ts</span><br><br><span class=\"hljs-keyword\">import</span> &#123;url2base64&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;~/func.js&#x27;</span><br><br>onCamera = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> ctx = Taro.createCameraContext()<br>  ctx.takePhoto(&#123;<br>    <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-string\">&#x27;high&#x27;</span>,<br>    <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">async</span> res =&gt; &#123;<br>      <span class=\"hljs-keyword\">const</span> base64 = <span class=\"hljs-keyword\">await</span> url2base64(res.tempImagePath)<br>      <span class=\"hljs-keyword\">const</span> &#123; width, height &#125; = <span class=\"hljs-keyword\">await</span> Taro.getImageInfo(&#123; <span class=\"hljs-attr\">src</span>: res.tempImagePath &#125;)<br>      <span class=\"hljs-built_in\">this</span>.handleCanvas(base64, res.tempImagePath, &#123; width, height &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Canvas-绘制物品轮廓（自适应设备）\"><a href=\"#Canvas-绘制物品轮廓（自适应设备）\" class=\"headerlink\" title=\"Canvas 绘制物品轮廓（自适应设备）\"></a>Canvas 绘制物品轮廓（自适应设备）</h5><blockquote>\n<p><a href=\"https://cloud.tencent.com/developer/article/1352187\">细说移动端 经典的REM布局 与 新秀VW布局</a></p>\n</blockquote>\n<p>将图片转为 <code>base64</code> 后就可以请求 <code>百度AI</code> 了，成功识别出了物品的名称（text），轮廓（四个坐标点），现在需要通过 <code>Canvas</code> 将它们绘制在画布中。</p>\n<p>遇到一个问题：图片在微信小程序IDE中调试没问题，但是一旦传到真机调试，比例就会失调，主要是因为文字和轮廓受设备分辨率影响进行了偏移。</p>\n<p>之前看过一篇文章，有个概念：<code>设备像素比 ＝ 物理像素 / 设备独立像素</code>。这里的偏移就是 <code>dpr</code> 导致的，所以我们只需要计算出 <code>dpr</code>，再将它缩放回来即可。（机智如我）</p>\n<p>通过以下代码可以获取页面的实际尺寸：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">window</span> = Taro.getSystemInfo()<br><span class=\"hljs-keyword\">const</span> w = <span class=\"hljs-built_in\">window</span>.windowWidth<br><span class=\"hljs-keyword\">const</span> h = <span class=\"hljs-built_in\">window</span>.windowHeight<br></code></pre></td></tr></table></figure>\n\n<p>再将 <strong>页面尺寸</strong> 与 <strong>照片尺寸</strong> 做个除法计算即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">handleCanvas = <span class=\"hljs-function\">(<span class=\"hljs-params\">base64, src, photo</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">//获取设备实际尺寸</span><br>  <span class=\"hljs-keyword\">const</span> w = res.windowWidth<br>  <span class=\"hljs-keyword\">const</span> h = res.windowHeight - <span class=\"hljs-number\">90</span><br>  <span class=\"hljs-comment\">//计算缩放比</span><br>  <span class=\"hljs-keyword\">const</span> scale = &#123;<br>    <span class=\"hljs-attr\">w</span>: w / photo.width,<br>    <span class=\"hljs-attr\">h</span>: h / photo.height<br>  &#125;<br>  <span class=\"hljs-keyword\">const</span> ctx = Taro.createCanvasContext(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>, <span class=\"hljs-built_in\">this</span>.$scope)<br>  Taro.getSystemInfo(&#123;<br>    <span class=\"hljs-attr\">success</span>: <span class=\"hljs-keyword\">async</span> res =&gt; &#123;<br>      <span class=\"hljs-comment\">// 渲染图片</span><br>      ctx.drawImage(src, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, w, h)<br>      <span class=\"hljs-comment\">// 主体识别，获得轮廓</span><br>      <span class=\"hljs-keyword\">const</span> subject: any = <span class=\"hljs-keyword\">await</span> baiduSubjectDetection(<span class=\"hljs-built_in\">this</span>.state.baiduToken, &#123;<br>        <span class=\"hljs-attr\">image</span>: base64<br>      &#125;)<br>      <span class=\"hljs-keyword\">const</span> &#123; height, width, top, left &#125; = subject.result<br>      <span class=\"hljs-comment\">// 内容识别，获得物品名称</span><br>      <span class=\"hljs-keyword\">const</span> advance: any = <span class=\"hljs-keyword\">await</span> baiduAdvancedGeneral(<span class=\"hljs-built_in\">this</span>.state.baiduToken, &#123;<br>        <span class=\"hljs-attr\">image</span>: base64<br>      &#125;)<br>      <span class=\"hljs-keyword\">const</span> &#123; keyword &#125; = advance.result[<span class=\"hljs-number\">0</span>]<br>      <span class=\"hljs-comment\">//渲染轮廓和尺寸</span><br>      <span class=\"hljs-built_in\">this</span>.setState(&#123; <span class=\"hljs-attr\">keyword</span>: keyword &#125;)<br>      ctx.setStrokeStyle(<span class=\"hljs-string\">&quot;#00ff00&quot;</span>)<br>      ctx.setLineWidth(<span class=\"hljs-number\">2</span>)<br>      ctx.rect(left, top, width, height)<br>      <span class=\"hljs-comment\">//适配屏幕尺寸进行缩放</span><br>      ctx.scale(scale.w, scale.h)<br>      ctx.setFillStyle(<span class=\"hljs-string\">&quot;#00ff00&quot;</span>)<br>      ctx.setFontSize(<span class=\"hljs-number\">18</span> / scale.w)<br>      ctx.fillText(keyword, left, (top + <span class=\"hljs-number\">30</span>))<br>      ctx.stroke()<br>      ctx.draw()<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Canvas-绘制海报并保存到相册\"><a href=\"#Canvas-绘制海报并保存到相册\" class=\"headerlink\" title=\"Canvas 绘制海报并保存到相册\"></a>Canvas 绘制海报并保存到相册</h5><p>推广页面的二维码海报也是用 <code>Canvas</code> 绘制的，实现了长按图片保存到相册功能，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取画布尺寸</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">window</span> = Taro.getSystemInfoSync()<br><span class=\"hljs-keyword\">const</span> w = <span class=\"hljs-built_in\">window</span>.windowWidth * <span class=\"hljs-number\">0.8</span><br><span class=\"hljs-keyword\">const</span> h = <span class=\"hljs-built_in\">window</span>.windowWidth * <span class=\"hljs-number\">0.8</span> * <span class=\"hljs-number\">9</span> / <span class=\"hljs-number\">5</span><br><br><span class=\"hljs-comment\">//保存海报到相册</span><br><span class=\"hljs-keyword\">const</span> handleSaveImage = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-comment\">//将 canvas 保存到缓存中</span><br>  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> Taro.canvasToTempFilePath(&#123;<br>    <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-attr\">width</span>: w,<br>    <span class=\"hljs-attr\">height</span>: h,<br>    <span class=\"hljs-attr\">canvasId</span>: <span class=\"hljs-string\">&#x27;canvas&#x27;</span>,<br>    <span class=\"hljs-attr\">fileType</span>: <span class=\"hljs-string\">&#x27;png&#x27;</span><br>  &#125;)<br>  <span class=\"hljs-comment\">//将缓存中的图片保存到相册中</span><br>  <span class=\"hljs-keyword\">let</span> saveRes = <span class=\"hljs-keyword\">await</span> Taro.saveImageToPhotosAlbum(&#123;<br>    <span class=\"hljs-attr\">filePath</span>: res.tempFilePath<br>  &#125;)<br>  <span class=\"hljs-keyword\">if</span> (saveRes.errMsg === <span class=\"hljs-string\">&#x27;saveImageToPhotosAlbum:ok&#x27;</span>) &#123;<br>    Taro.showToast(&#123;<br>      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;图片已保存到相册&#x27;</span><br>    &#125;)<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    Taro.showToast(&#123;<br>      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;保存失败&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> renderCanvas = <span class=\"hljs-function\">(<span class=\"hljs-params\">text = <span class=\"hljs-string\">&#x27;快来扫一扫吧&#x27;</span></span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> ctx = Taro.createCanvasContext(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>, <span class=\"hljs-literal\">null</span>)<br>  <span class=\"hljs-comment\">//背景铺满</span><br>  ctx.drawImage(background, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, w, h)<br>  ctx.setFillStyle(<span class=\"hljs-string\">&quot;#ffffff&quot;</span>)<br>  <span class=\"hljs-comment\">//文字居中</span><br>  ctx.setFontSize(<span class=\"hljs-number\">22</span>)<br>  ctx.setTextAlign(<span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>  ctx.fillText(<span class=\"hljs-string\">&#x27;口袋拾荒&#x27;</span>, w / <span class=\"hljs-number\">2</span>, h - <span class=\"hljs-number\">200</span>)<br>  ctx.setFontSize(<span class=\"hljs-number\">12</span>)<br>  ctx.fillText(<span class=\"hljs-string\">`- <span class=\"hljs-subst\">$&#123;text&#125;</span> -`</span>, w / <span class=\"hljs-number\">2</span>, h - <span class=\"hljs-number\">180</span>)<br>  ctx.draw()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>by the way，文字居中官方文档中是用 <code>setTextAlign(&#39;center&#39;)</code> 实现的，但是实际却没有效果。因为它是以整个画布的宽度的一半的中心轴为基准线，我们还需要将文字的横轴移到画布中心轴：<code>ctx.fillText(text, w / 2, h)</code>。</p>\n<h5 id=\"数据爬虫\"><a href=\"#数据爬虫\" class=\"headerlink\" title=\"数据爬虫\"></a>数据爬虫</h5><p>爬虫功能很简单，用 <strong>superagent</strong> 库请求网站获取 <code>html</code> 文档，再用 <strong>cheerio</strong> 库解析标签清洗数据，最后用 <strong>mongoose</strong> 存到数据库中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//爬取数据</span><br><span class=\"hljs-keyword\">const</span> superagent = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;superagent&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> cheerio = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;cheerio&#x27;</span>)<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Eight</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.url = &#123;<br>      <span class=\"hljs-attr\">other</span>: <span class=\"hljs-string\">&#x27;https://www.8684.cn/ljfl_glj&#x27;</span>,<br>      <span class=\"hljs-attr\">food</span>: <span class=\"hljs-string\">&#x27;https://www.8684.cn/ljfl_slj&#x27;</span>,<br>      <span class=\"hljs-attr\">harmful</span>: <span class=\"hljs-string\">&#x27;https://www.8684.cn/ljfl_yhlj&#x27;</span>,<br>      <span class=\"hljs-attr\">recyclable</span>: <span class=\"hljs-string\">&#x27;https://www.8684.cn/ljfl_khslj&#x27;</span><br>    &#125;<br>  &#125;<br><br>  parse = <span class=\"hljs-function\">(<span class=\"hljs-params\">body</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> $ = cheerio.load(body.text)<br>    <span class=\"hljs-keyword\">let</span> arr = []<br>    $(<span class=\"hljs-string\">&#x27;.list-col4 li a&#x27;</span>).each(<span class=\"hljs-function\">(<span class=\"hljs-params\">index, ele</span>) =&gt;</span> &#123;<br>      arr.push($(ele).text())<br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> arr<br>  &#125;<br><br>  run = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123; url, parse &#125; = <span class=\"hljs-built_in\">this</span><br>    <span class=\"hljs-keyword\">let</span> data = []<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">in</span> url) &#123;<br>      <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> superagent.get(url[i])<br>      data.push(&#123;<br>        <span class=\"hljs-attr\">key</span>: i,<br>        <span class=\"hljs-attr\">value</span>: parse(res)<br>      &#125;)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> data<br>  &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">exports</span>.Eight = Eight<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//存到数据库</span><br><br><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa()<br><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> &#123; Eight &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./source&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> config = &#123;<br>  <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&#x27;localhost&#x27;</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3000</span>,<br>&#125;<br><br>app.use(<span class=\"hljs-keyword\">async</span> ctx =&gt; &#123;<br>  ctx.body = <span class=\"hljs-string\">&#x27;Hello World&#x27;</span><br>&#125;)<br><br>app.listen(config.port, config.hostname)<br><br><span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">&#x27;Server is running at http://%s:%s . Press Ctrl+C to stop.&#x27;</span>, config.hostname, config.port)<br><br>mongoose.connect(<span class=\"hljs-string\">&#x27;mongodb://localhost/garbage&#x27;</span>)<br><br><span class=\"hljs-keyword\">const</span> Garbage = mongoose.model(<span class=\"hljs-string\">&#x27;Garbage&#x27;</span>, &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">String</span>, <span class=\"hljs-attr\">categoryId</span>: <span class=\"hljs-built_in\">String</span> &#125;);<br><br><span class=\"hljs-keyword\">const</span> eight = <span class=\"hljs-keyword\">new</span> Eight()<br>eight.run().then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> data = res[<span class=\"hljs-number\">0</span>].value<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> data) &#123;<br>    Garbage.create(&#123;<span class=\"hljs-attr\">name</span>:i, <span class=\"hljs-attr\">categoryId</span>: <span class=\"hljs-string\">&#x27;5e427fe8558c2a31cd450fbc&#x27;</span>&#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"Taro-封装-Apollo-请求库\"><a href=\"#Taro-封装-Apollo-请求库\" class=\"headerlink\" title=\"Taro 封装 Apollo 请求库\"></a>Taro 封装 Apollo 请求库</h5><p>简单封装一下 <code>GraphQL</code> 请求库，方便调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// /api/graphql.ts</span><br><br><span class=\"hljs-keyword\">import</span> Taro <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@tarojs/taro&#x27;</span><br><span class=\"hljs-keyword\">import</span> ApolloClient <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;apollo-boost&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> uri = <span class=\"hljs-string\">&#x27;https://xxx.com/graphql&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> fetch = <span class=\"hljs-function\">(<span class=\"hljs-params\">url, &#123; body: data, ...fetchOptions &#125;</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> Taro.request(&#123; url, data, ...fetchOptions, <span class=\"hljs-attr\">dataType</span>: <span class=\"hljs-string\">&#x27;txt&#x27;</span>, <span class=\"hljs-attr\">responseType</span>: <span class=\"hljs-string\">&#x27;text&#x27;</span> &#125;)<br>    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      res.text = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">Promise</span>.resolve(res.data)<br>      <span class=\"hljs-keyword\">return</span> res<br>    &#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.error(error)<br>    &#125;,<br>  );<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> ApolloClient(&#123; uri, fetch &#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// /api/gql.ts</span><br><br><span class=\"hljs-keyword\">import</span> &#123; gql &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;apollo-boost&#x27;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> category = gql<span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">  query &#123;</span><br><span class=\"hljs-string\">    category &#123;</span><br><span class=\"hljs-string\">      name</span><br><span class=\"hljs-string\">      id</span><br><span class=\"hljs-string\">      image</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  &#125;</span><br><span class=\"hljs-string\">`</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// page.ts</span><br><br><span class=\"hljs-keyword\">import</span> &#123; category &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;~/api/gql&#x27;</span><br><br><span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> graphql.query(&#123; <span class=\"hljs-attr\">query</span>: category &#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"真机调试内网穿透\"><a href=\"#真机调试内网穿透\" class=\"headerlink\" title=\"真机调试内网穿透\"></a>真机调试内网穿透</h3><p>详见该文章 -&gt; <a href=\"https://www.izhaoo.com/2020/02/12/weapp-debug-https/\">小程序真机调试问题</a></p>","categories":[{"name":"项目","path":"api/categories/项目.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"}]}