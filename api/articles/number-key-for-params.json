{"title":"请求参数中的数字键","slug":"number-key-for-params","date":"2020-12-18T09:53:32.000Z","updated":"2020-12-18T09:56:28.000Z","comments":true,"path":"api/articles/number-key-for-params.json","realPath":"/2020/12/18/number-key-for-params/","excerpt":"在请求参数中使用数字类型作为集合中的键。","covers":null,"cover":"https://pic.izhaoo.com/20201112102418.jpg","content":"<p>在请求参数中使用数字类型作为集合中的键。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近在业务中遇到一个坑：接口提供方用<strong>数字类型</strong>做集合的<strong>键</strong>，而大部分情况中数字类型会被转换成字符串类型，导致请求失败。</p>\n<p>Java 类型表述：<code>Map&lt;Integer, List&lt;String&gt;&gt;</code></p>\n<p>转换成 JavaScript 对象如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-number\">996</span>: [<span class=\"hljs-string\">&#x27;福报&#x27;</span>, <span class=\"hljs-string\">&#x27;肝就完了&#x27;</span>],<br>  <span class=\"hljs-number\">965</span>: [<span class=\"hljs-string\">&#x27;养老&#x27;</span>, <span class=\"hljs-string\">&#x27;工作生活平衡&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是通过请求传递后，后端接收到的却是：<code>&#123; &#39;996&#39;: [&#39;福报&#39;, &#39;肝就完了&#39;], &#39;965&#39;: [&#39;养老&#39;, &#39;工作生活平衡&#39;] &#125;</code></p>\n<h3 id=\"两种语言支持情况\"><a href=\"#两种语言支持情况\" class=\"headerlink\" title=\"两种语言支持情况\"></a>两种语言支持情况</h3><ul>\n<li><code>JavaScript</code>: 支持，可以用 Number 类型做为 object 中的键。</li>\n<li><code>Java</code>：不支持，不能用 Interger 类型作为 Map 中的键。</li>\n</ul>\n<p>ps: 这个后端肯定吃了空，手动做了层转化，无语…</p>\n<h3 id=\"三种请求类型支持情况\"><a href=\"#三种请求类型支持情况\" class=\"headerlink\" title=\"三种请求类型支持情况\"></a>三种请求类型支持情况</h3><ul>\n<li><code>Post (JSON)</code>: 不支持，JSON 为了兼容 Java 等语言，会将<em>数字类型</em>解析成<em>字符串类型</em>。</li>\n<li><code>Post (form)</code>: 支持，以表单类型进行传参，Map 项会以 <code>Map[key]</code> 的形式传递，且支持数字类型。</li>\n<li><code>Get (URL)</code>: 不支持，通过 URL Params 进行传参，后端默认会以字符串类型接收。</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>让后端改回数字类型的键。别想了，人都找不到。</li>\n<li>以 Post(form) 的形式请求。比较方便，但是只能统一用 Post 方式请求了。许多获取、查询类型的接口不用 Get 看起来很奇怪。</li>\n<li>解析。在中间件中使用参数解析函数，通过深度遍历将所有 Map 的键转换成数字类型。</li>\n</ol>\n","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近在业务中遇到一个坑：接口提供方用<strong>数字类型</strong>做集合的<strong>键</strong>，而大部分情况中数字类型会被转换成字符串类型，导致请求失败。</p>\n<p>Java 类型表述：<code>Map&lt;Integer, List&lt;String&gt;&gt;</code></p>\n<p>转换成 JavaScript 对象如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-number\">996</span>: [<span class=\"hljs-string\">&#x27;福报&#x27;</span>, <span class=\"hljs-string\">&#x27;肝就完了&#x27;</span>],<br>  <span class=\"hljs-number\">965</span>: [<span class=\"hljs-string\">&#x27;养老&#x27;</span>, <span class=\"hljs-string\">&#x27;工作生活平衡&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是通过请求传递后，后端接收到的却是：<code>&#123; &#39;996&#39;: [&#39;福报&#39;, &#39;肝就完了&#39;], &#39;965&#39;: [&#39;养老&#39;, &#39;工作生活平衡&#39;] &#125;</code></p>\n<h3 id=\"两种语言支持情况\"><a href=\"#两种语言支持情况\" class=\"headerlink\" title=\"两种语言支持情况\"></a>两种语言支持情况</h3><ul>\n<li><code>JavaScript</code>: 支持，可以用 Number 类型做为 object 中的键。</li>\n<li><code>Java</code>：不支持，不能用 Interger 类型作为 Map 中的键。</li>\n</ul>\n<p>ps: 这个后端肯定吃了空，手动做了层转化，无语…</p>\n<h3 id=\"三种请求类型支持情况\"><a href=\"#三种请求类型支持情况\" class=\"headerlink\" title=\"三种请求类型支持情况\"></a>三种请求类型支持情况</h3><ul>\n<li><code>Post (JSON)</code>: 不支持，JSON 为了兼容 Java 等语言，会将<em>数字类型</em>解析成<em>字符串类型</em>。</li>\n<li><code>Post (form)</code>: 支持，以表单类型进行传参，Map 项会以 <code>Map[key]</code> 的形式传递，且支持数字类型。</li>\n<li><code>Get (URL)</code>: 不支持，通过 URL Params 进行传参，后端默认会以字符串类型接收。</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>让后端改回数字类型的键。别想了，人都找不到。</li>\n<li>以 Post(form) 的形式请求。比较方便，但是只能统一用 Post 方式请求了。许多获取、查询类型的接口不用 Get 看起来很奇怪。</li>\n<li>解析。在中间件中使用参数解析函数，通过深度遍历将所有 Map 的键转换成数字类型。</li>\n</ol>","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"后端","path":"api/tags/后端.json"}]}