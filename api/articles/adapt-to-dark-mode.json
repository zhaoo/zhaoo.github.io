{"title":"适配深色模式","slug":"adapt-to-dark-mode","date":"2020-11-12T14:11:58.000Z","updated":"2021-02-03T08:01:31.000Z","comments":true,"path":"api/articles/adapt-to-dark-mode.json","realPath":"/2020/11/12/adapt-to-dark-mode/","excerpt":"为博客适配深色模式。","covers":["https://pic.izhaoo.com/20201112114537.jpg","https://pic.izhaoo.com/20201112114752.jpg","https://pic.izhaoo.com/20201113102014.jpg","https://pic.izhaoo.com/20201112104351.jpg","https://pic.izhaoo.com/20201112112109.jpg"],"cover":"https://pic.izhaoo.com/20201112102432.jpg","content":"<p>为博客适配深色模式。</p>\n<span id=\"more\"></span>\n\n<p>&lt;封面摄于江苏·南京的总统府，小潘同学就是在这被猫猫挠了。&gt;</p>\n<h2 id=\"滤镜反色\"><a href=\"#滤镜反色\" class=\"headerlink\" title=\"滤镜反色\"></a>滤镜反色</h2><p>最偷懒的方式就是用 <code>CSS3</code> 的滤镜对整个页面进行反色，只需一行代码。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">html</span><span class=\"hljs-selector-attr\">[theme=<span class=\"hljs-string\">&#x27;dark-mode&#x27;</span>]</span> &#123;<br>  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">invert</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">hue-rotate</span>(<span class=\"hljs-number\">180deg</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://pic.izhaoo.com/20201112114537.jpg\"  ><span class=\"image-caption\">使用CSS3滤镜进行反色</span></p>\n<p>这时候会发现有个小问题，就是图片也会被反色，形成类似胶卷底片的效果。那么只需将图片再反色回来即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">html</span><span class=\"hljs-selector-attr\">[theme=<span class=\"hljs-string\">&#x27;dark-mode&#x27;</span>]</span> <span class=\"hljs-selector-tag\">img</span>&#123;<br>  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">invert</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">hue-rotate</span>(<span class=\"hljs-number\">180deg</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://pic.izhaoo.com/20201112114752.jpg\"  ><span class=\"image-caption\">适配图片</span></p>\n<p>分分钟搞定，但是似乎非黑即白，还不够细腻。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/183812218?utm_source=com.microsoft.emmx\">一行代码使用CSS的黑暗模式</a></p>\n</blockquote>\n<h2 id=\"媒体查询和样式变量\"><a href=\"#媒体查询和样式变量\" class=\"headerlink\" title=\"媒体查询和样式变量\"></a>媒体查询和样式变量</h2><p>媒体查询 (@media) 中的 <code>prefers-color-scheme</code> 用于检测用户是否有将系统的主题色设置为浅色或者深色，配合 <code>CSS Variable</code> 我们可以为浅色或深色模式单独匹配样式，实现更细腻的深色模式。</p>\n<h3 id=\"Media-Query\"><a href=\"#Media-Query\" class=\"headerlink\" title=\"Media Query\"></a>Media Query</h3><p><code>prefers-color-scheme</code> 有以下三个值：</p>\n<ul>\n<li>light: 检测出系统处于 <em>浅色</em> 模式</li>\n<li>dark: 检测出系统处于 <em>深色</em> 模式</li>\n<li>no-preference: 并未检测出系统所处的颜色模式，可能是出于系统不支持或者被隐私保护拦截等因素</li>\n</ul>\n<p>使用方法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;background&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span>: dark) &#123;  <span class=\"hljs-comment\">/* 深色模式 */</span><br>  <span class=\"hljs-selector-class\">.background</span> &#123; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#333333</span>; &#125;<br>  <span class=\"hljs-selector-class\">.text</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ffffff</span>; &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span>: light) &#123;  <span class=\"hljs-comment\">/* 浅色模式 */</span><br>  <span class=\"hljs-selector-class\">.background</span> &#123; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ffffff</span>; &#125;<br>  <span class=\"hljs-selector-class\">.text</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333333</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>兼容性如下，不过对于不支持该属性的浏览器也能忽略该属性从而向下兼容。</p>\n<p><img  src=\"https://pic.izhaoo.com/20201113102014.jpg\"  ><span class=\"image-caption\">浏览器兼容性</span></p>\n<p>通过该属性，我们即可检测出系统当前所处的颜色模式，并对样式进行单独配置。</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme\">MDN: prefers-color-scheme</a></p>\n</blockquote>\n<h3 id=\"CSS-Variable\"><a href=\"#CSS-Variable\" class=\"headerlink\" title=\"CSS Variable\"></a>CSS Variable</h3><p>通过 <code>prefers-color-scheme</code> 匹配颜色模式，但是为所有元素都单独定制两套颜色样式显然很麻烦，后期也难以维护。</p>\n<p>一个页面内的颜色方案通常比较统一，也就那么几种颜色，所以我们可以通过 CSS变量 (CSS Variable) 为颜色进行规整，快速切换颜色模式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ffffff</span>;<br>  --<span class=\"hljs-attribute\">color</span>-text: <span class=\"hljs-number\">#33333d</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span>: dark) &#123;<br>  <span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>    --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#1e2128</span>;<br>    --<span class=\"hljs-attribute\">color</span>-text: <span class=\"hljs-number\">#dddddd</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-selector-class\">.background</span> &#123; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">var</span>(--color-background); &#125;<br><span class=\"hljs-selector-class\">.text</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--color-text); &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"手动切换\"><a href=\"#手动切换\" class=\"headerlink\" title=\"手动切换\"></a>手动切换</h2><p>通过媒体查询和样式变量我们可以跟随系统设置，实现自动切换颜色模式。但是这样还不够友好，有以下场景：</p>\n<ol>\n<li>浏览器不支持 <code>prefers-color-scheme</code>，无法自动切换颜色模式</li>\n<li>系统处于深色模式状态，但是我又想让该网页单独显示浅色模式</li>\n</ol>\n<p>所以还需要添加一个按钮，让用户手动切换颜色模式。</p>\n<h3 id=\"HTML-Attribute\"><a href=\"#HTML-Attribute\" class=\"headerlink\" title=\"HTML Attribute\"></a>HTML Attribute</h3><p>实现用户手动切换颜色模式，首先需要一个“全局变量”来保存当前颜色模式，并且让 <code>CSS</code> 识别该“变量”，匹配颜色模式。我们可以直接在 <code>html</code> 标签（根元素）设定一个属性 <code>color-mode</code>，属性值有 <code>light</code> 和 <code>dark</code>，可以通过 <code>CSS</code> 的属性选择器直接匹配，用户点击切换按钮时可以通过 <code>JS</code> 直接修改该属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">color-mode</span>=<span class=\"hljs-string\">&quot;dark&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;background&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ffffff</span>;<br>  --<span class=\"hljs-attribute\">color</span>-text: <span class=\"hljs-number\">#33333d</span>;<br>&#125;<br><br><span class=\"hljs-selector-attr\">[color-mode=<span class=\"hljs-string\">&#x27;dark&#x27;</span>]</span> &#123;<br>  <span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>    --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#1e2128</span>;<br>    --<span class=\"hljs-attribute\">color</span>-text: <span class=\"hljs-number\">#dddddd</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-selector-class\">.background</span> &#123; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">var</span>(--color-background); &#125;<br><span class=\"hljs-selector-class\">.text</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--color-text); &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Stylus\"><a href=\"#Stylus\" class=\"headerlink\" title=\"Stylus\"></a>Stylus</h3><p><code>hexo-theme-zhaoo</code> 主题使用了 <code>Stylus</code> 预处理器，基于 <strong>变量</strong>、<strong>函数</strong> 等特性可以进一步抽离样式，便于维护。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* variables.styl */</span><br><br><span class=\"hljs-comment\">/* light */</span><br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span> = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.background</span>&#x27;) || <span class=\"hljs-selector-id\">#ffffff</span>)<br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.background-secondary</span>&#x27;) || <span class=\"hljs-selector-id\">#f6f8fa</span>)<br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb = <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span><br>$<span class=\"hljs-attribute\">color</span>-text = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text</span>&#x27;) || <span class=\"hljs-selector-id\">#33333d</span>)<br>$<span class=\"hljs-attribute\">color</span>-text-secondary = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-secondary</span>&#x27;) || <span class=\"hljs-selector-id\">#4e4e4e</span>)<br>$<span class=\"hljs-attribute\">color</span>-text-third = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-third</span>&#x27;) || <span class=\"hljs-selector-id\">#999999</span>)<br><span class=\"hljs-comment\">/* dark */</span><br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.background-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#1e2128</span>)<br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.background-secondary-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#1a1d22</span>)<br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb-dark = <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">40</span><br>$<span class=\"hljs-attribute\">color</span>-text-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#dddddd</span>)<br>$<span class=\"hljs-attribute\">color</span>-text-secondary-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-secondary-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#9899ab</span>)<br>$<span class=\"hljs-attribute\">color</span>-text-third-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-third-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#7d8594</span>)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* color-mode.styl */</span><br><br><span class=\"hljs-selector-pseudo\">:root</span><br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span> $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span><br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb<br>  --<span class=\"hljs-attribute\">color</span>-text $<span class=\"hljs-attribute\">color</span>-text<br>  --<span class=\"hljs-attribute\">color</span>-text-secondary $<span class=\"hljs-attribute\">color</span>-text-secondary<br>  --<span class=\"hljs-attribute\">color</span>-text-third $<span class=\"hljs-attribute\">color</span>-text-third<br>dark()<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span> $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-dark<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary-dark<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb-dark<br>  --<span class=\"hljs-attribute\">color</span>-text $<span class=\"hljs-attribute\">color</span>-text-dark<br>  --<span class=\"hljs-attribute\">color</span>-text-secondary $<span class=\"hljs-attribute\">color</span>-text-secondary-dark<br>  --<span class=\"hljs-attribute\">color</span>-text-third $<span class=\"hljs-attribute\">color</span>-text-third-dark<br><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span> dark)<br>  :<span class=\"hljs-attribute\">root</span>:<span class=\"hljs-keyword\">not</span>([color-mode])<br>    dark()<br>[color-mode=<span class=\"hljs-string\">&#x27;dark&#x27;</span>]<br>  dark()<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><p>触发器就是一个按钮，点击后修改 <code>html</code> 标签的 <code>color-mode</code> 属性，切换颜色模式。比较简单，直接上代码了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;iconfont iconmoono&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;color-toggle&quot;</span> <span class=\"hljs-attr\">color-toggle</span>=<span class=\"hljs-string\">&quot;light&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> switchColorMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>)) <span class=\"hljs-keyword\">return</span>;<br>  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>).addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> mode = <span class=\"hljs-built_in\">this</span>.getAttribute(<span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>) === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>;<br>    <span class=\"hljs-built_in\">document</span>.documentElement.setAttribute(htmlAttribute, mode);<br>  &#125;);<br>&#125;<br>switchColorMode();<br></code></pre></td></tr></table></figure>\n\n<p>至此，用户就可以点击按钮手动切换颜色模式了。</p>\n<h3 id=\"缓存状态\"><a href=\"#缓存状态\" class=\"headerlink\" title=\"缓存状态\"></a>缓存状态</h3><p>该方案还存在问题，跳转页面或刷新页面，颜色模式就会切回到默认。（用户：你***逗我玩呢？）所以我们需要让浏览器缓存用户手动切换的颜色模式，之后加载页面时默认以该模式渲染。背面经环节：前端缓存方案有 <code>cookies</code>、<code>localStorage</code>、<code>sessionStorage</code>、<code>Web SQL</code>、<code>IndexedDB</code>…… </p>\n<p>用最方便的 <code>localStorage</code> 储存用户切换到颜色模式即可，在用户点击按钮后将更新的颜色模式通过 <code>localStorage.setItem</code> 存储，再在页面渲染时通过 <code>localStorage.getItem</code> 获取颜色模式并渲染即可，<code>key</code> 为 <code>color-mode</code>。</p>\n<p>我们还需要解决一个问题，<strong>系统自动配置</strong> (媒体查询) 与 <strong>用户手动配置</strong> (按钮切换) 之间的同步和冲突问题。例如：1. 在固定时段（晚上或白天），页面渲染时按用户切换的颜色模式加载。2. 在时段改变后（白天变为晚上），页面渲染时按系统颜色模式渲染。</p>\n<p>我们只需要再添加一组 <code>key</code> 为 <code>color-mode-media-query</code> 的 <code>localStorage</code>，缓存媒体查询的颜色模式。渲染时判断 <em>当前媒体查询</em> 与 <em>缓存</em> 是否相等，相等说明处于同一时段，不等说明时段已改变，从而决定渲染方式。</p>\n<p>最后，这段 <code>JS</code> 需要添加到 <code>&lt;/body&gt;</code> 标签前面加载，不然会闪屏。</p>\n<p>完整 <code>JS</code> 代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">!<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>, <span class=\"hljs-built_in\">document</span></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> rootElement = <span class=\"hljs-built_in\">document</span>.documentElement;<br>  <span class=\"hljs-keyword\">var</span> toggleElement = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>);<br>  <span class=\"hljs-keyword\">var</span> highlightElement = <span class=\"hljs-built_in\">document</span>.getElementsByName(<span class=\"hljs-string\">&#x27;highlight-style&#x27;</span>);<br>  <span class=\"hljs-keyword\">var</span> modeStorageKey = <span class=\"hljs-string\">&#x27;color-mode&#x27;</span>;<br>  <span class=\"hljs-keyword\">var</span> mediaQueryStorageKey = <span class=\"hljs-string\">&#x27;color-mode-media-query&#x27;</span>;<br>  <span class=\"hljs-keyword\">var</span> htmlAttribute = <span class=\"hljs-string\">&#x27;color-mode&#x27;</span>;<br>  <span class=\"hljs-keyword\">var</span> toggleAttribute = <span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>;<br><br>  <span class=\"hljs-keyword\">var</span> getMediaQuery = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> getModeStorage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">localStorage</span>.getItem(modeStorageKey);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setModeStorage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">localStorage</span>.setItem(modeStorageKey, mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> getMediaQueryStorage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">localStorage</span>.getItem(mediaQueryStorageKey);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setMediaQueryStorage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">localStorage</span>.setItem(mediaQueryStorageKey, mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setColorMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    rootElement.setAttribute(htmlAttribute, mode);<br>    setModeStorage(mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setIcon = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!toggleElement) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">var</span> addIconName = mode === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;iconmoono&#x27;</span> : <span class=\"hljs-string\">&#x27;iconsuno&#x27;</span>;<br>    <span class=\"hljs-keyword\">var</span> removeIconName = mode === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;iconsuno&#x27;</span> : <span class=\"hljs-string\">&#x27;iconmoono&#x27;</span>;<br>    toggleElement.classList.remove(removeIconName);<br>    toggleElement.classList.add(addIconName);<br>    toggleElement.setAttribute(toggleAttribute, mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setHighlightStyle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    highlightElement.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>&#123;<br>      item.disabled = !(item.getAttribute(<span class=\"hljs-string\">&#x27;mode&#x27;</span>) === mode);<br>    &#125;);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> loadColorMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> mode = mode || getModeStorage() || getMediaQuery();<br>    <span class=\"hljs-keyword\">if</span> (getMediaQuery() === getMediaQueryStorage()) &#123;<br>      mode = getModeStorage();<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      mode = getMediaQuery();<br>      setMediaQueryStorage(mode);<br>    &#125;<br>    setColorMode(mode);<br>    setIcon(mode);<br>    setHighlightStyle(mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> switchColorMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!toggleElement) <span class=\"hljs-keyword\">return</span>;<br>    toggleElement.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-keyword\">var</span> mode = <span class=\"hljs-built_in\">this</span>.getAttribute(toggleAttribute) === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>;<br>      setColorMode(mode);<br>      setIcon(mode);<br>      setHighlightStyle(mode);<br>    &#125;);<br>  &#125;<br><br>  loadColorMode();<br>  switchColorMode();<br>&#125;(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-built_in\">document</span>);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持] (<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a>)</p>\n</blockquote>\n<h2 id=\"适配特殊样式\"><a href=\"#适配特殊样式\" class=\"headerlink\" title=\"适配特殊样式\"></a>适配特殊样式</h2><p>大部分元素可以通过 <code>CSS</code> 属性直接匹配样式，但是仍有一部分元素需要通过“特殊”方法进行处理。</p>\n<h3 id=\"PNG\"><a href=\"#PNG\" class=\"headerlink\" title=\"PNG\"></a>PNG</h3><p>适配首屏云朵，其实就是张 <code>PNG</code> 图片，要是 <code>PNG</code> 能用 <code>CSS</code> 控制颜色就好了。</p>\n<p><img  src=\"https://pic.izhaoo.com/20201112104351.jpg\"  ><span class=\"image-caption\">适配PNG</span></p>\n<p>从张鑫旭大佬的博客找到了解决方案，可以用 <code>CSS3</code> 滤镜中的投影 (filter: drop-shadow) 进行上色。但是需要做一些处理，将原图隐藏而阴影显示，其实只要将原图偏移出视口，再将阴影偏移回正确位置即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">img</span> &#123;<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>  <span class=\"hljs-attribute\">left</span>: -<span class=\"hljs-number\">100vw</span>;  <span class=\"hljs-comment\">/* 原图偏移出视口 */</span><br>  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">drop-shadow</span>(<span class=\"hljs-built_in\">var</span>(--color-background) <span class=\"hljs-number\">100vw</span> <span class=\"hljs-number\">0px</span>);  <span class=\"hljs-comment\">/* 阴影进行上色，并偏移回原位置 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2016/06/png-icon-change-color-by-css/\">PNG格式小图标的CSS任意颜色赋色技术</a></p>\n</blockquote>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><p>接下来适配首屏波浪，小图标等 <code>SVG</code> 内容。</p>\n<p><img  src=\"https://pic.izhaoo.com/20201112112109.jpg\"  ><span class=\"image-caption\">适配SVG</span></p>\n<p>首先 <code>SVG</code> 也是可以用上面提到的 <code>filter: drop-shadow</code> 进行上色的。</p>\n<p>另外，也可以用 <code>SVG</code> 标签中的 <code>fill</code> 属性进行赋色，如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;preview-waves&quot;</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"hljs-attr\">xmlns:xlink</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/1999/xlink&quot;</span></span><br><span class=\"hljs-tag\">  <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 24 150 28&quot;</span> <span class=\"hljs-attr\">preserveAspectRatio</span>=<span class=\"hljs-string\">&quot;none&quot;</span> <span class=\"hljs-attr\">shape-rendering</span>=<span class=\"hljs-string\">&quot;auto&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">defs</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;gentle-wave&quot;</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">defs</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;preview-parallax&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">&quot;#gentle-wave&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;48&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rgba(var(--color-background-rgb), 0.7&quot;</span> /&gt;</span>  //通过 fill 属性进行赋色<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">&quot;#gentle-wave&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;48&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rgba(var(--color-background-rgb), 0.5)&quot;</span> /&gt;</span>  //通过 fill 属性进行赋色<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">&quot;#gentle-wave&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;48&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;5&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rgba(var(--color-background-rgb), 0.3)&quot;</span> /&gt;</span>  //通过 fill 属性进行赋色<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">&quot;#gentle-wave&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;48&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;7&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rgb(var(--color-background-rgb))&quot;</span> /&gt;</span>  //通过 fill 属性进行赋色<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"rgba\"><a href=\"#rgba\" class=\"headerlink\" title=\"rgba\"></a>rgba</h3><p>对应含有透明通道的颜色 (rgba)，如果在 <code>rgba()</code> 中包裹 CSS变量，<code>stylus</code> 会解析出错，这应该是 <code>stylus</code> 的一个 <code>bug</code>。我们可以用 <code>stylus</code> 中的 <code>@css</code> 指令解决，被包裹在 <code>@css</code> 中的内容将不会被 <code>stylus</code> 解析，而是直接以 <code>CSS</code> 的形式输出。如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@css</span> &#123;<br>  <span class=\"hljs-selector-class\">.menu</span> &#123;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-built_in\">var</span>(--color-background-rgb), <span class=\"hljs-number\">0.7</span>);<br>  &#125;<br>  <span class=\"hljs-selector-class\">.navbar</span> &#123;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-built_in\">var</span>(--color-background-rgb), <span class=\"hljs-number\">0.8</span>)s;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"highlight\"><a href=\"#highlight\" class=\"headerlink\" title=\"highlight\"></a>highlight</h3><p>代码高亮也需要做适配，可以引入浅色和深色两套代码高亮样式，默认用 <code>disabled</code> 属性禁用，然后在页面渲染时根据颜色模式开启对应的代码高亮样式。如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;% if(theme.highlight.enable)&#123; %&gt;<br>&lt;% if(theme.vendors.highlight_css)&#123; %&gt;<br>&lt;% for (i in theme.highlight.style) &#123; %&gt;<br>&lt;% style = theme.highlight.style[i].toLowerCase().replace(/(?&lt;!([0-9]))\\s(?!([0-9]))/g, &#x27;-&#x27;).replace(/\\s/g, &#x27;&#x27;) %&gt;  //引入多套样式<br>&lt;%- css(&#123;href: theme.vendors.highlight_css + style + &#x27;.min.css&#x27;, name: &#x27;highlight-style&#x27;, mode: i&#125;) %&gt;<br>&lt;% &#125; %&gt;<br>&lt;% &#125;else&#123; %&gt;<br>&lt;%- css(&#x27;lib/highlight/a11y-dark.css&#x27;)%&gt;<br>&lt;% &#125;&#125; %&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> setHighlightStyle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>  highlightElement.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>&#123;<br>    item.disabled = !(item.getAttribute(<span class=\"hljs-string\">&#x27;mode&#x27;</span>) === mode);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>","more":"<p>&lt;封面摄于江苏·南京的总统府，小潘同学就是在这被猫猫挠了。&gt;</p>\n<h2 id=\"滤镜反色\"><a href=\"#滤镜反色\" class=\"headerlink\" title=\"滤镜反色\"></a>滤镜反色</h2><p>最偷懒的方式就是用 <code>CSS3</code> 的滤镜对整个页面进行反色，只需一行代码。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">html</span><span class=\"hljs-selector-attr\">[theme=<span class=\"hljs-string\">&#x27;dark-mode&#x27;</span>]</span> &#123;<br>  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">invert</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">hue-rotate</span>(<span class=\"hljs-number\">180deg</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://pic.izhaoo.com/20201112114537.jpg\"  ><span class=\"image-caption\">使用CSS3滤镜进行反色</span></p>\n<p>这时候会发现有个小问题，就是图片也会被反色，形成类似胶卷底片的效果。那么只需将图片再反色回来即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">html</span><span class=\"hljs-selector-attr\">[theme=<span class=\"hljs-string\">&#x27;dark-mode&#x27;</span>]</span> <span class=\"hljs-selector-tag\">img</span>&#123;<br>  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">invert</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">hue-rotate</span>(<span class=\"hljs-number\">180deg</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://pic.izhaoo.com/20201112114752.jpg\"  ><span class=\"image-caption\">适配图片</span></p>\n<p>分分钟搞定，但是似乎非黑即白，还不够细腻。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/183812218?utm_source=com.microsoft.emmx\">一行代码使用CSS的黑暗模式</a></p>\n</blockquote>\n<h2 id=\"媒体查询和样式变量\"><a href=\"#媒体查询和样式变量\" class=\"headerlink\" title=\"媒体查询和样式变量\"></a>媒体查询和样式变量</h2><p>媒体查询 (@media) 中的 <code>prefers-color-scheme</code> 用于检测用户是否有将系统的主题色设置为浅色或者深色，配合 <code>CSS Variable</code> 我们可以为浅色或深色模式单独匹配样式，实现更细腻的深色模式。</p>\n<h3 id=\"Media-Query\"><a href=\"#Media-Query\" class=\"headerlink\" title=\"Media Query\"></a>Media Query</h3><p><code>prefers-color-scheme</code> 有以下三个值：</p>\n<ul>\n<li>light: 检测出系统处于 <em>浅色</em> 模式</li>\n<li>dark: 检测出系统处于 <em>深色</em> 模式</li>\n<li>no-preference: 并未检测出系统所处的颜色模式，可能是出于系统不支持或者被隐私保护拦截等因素</li>\n</ul>\n<p>使用方法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;background&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span>: dark) &#123;  <span class=\"hljs-comment\">/* 深色模式 */</span><br>  <span class=\"hljs-selector-class\">.background</span> &#123; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#333333</span>; &#125;<br>  <span class=\"hljs-selector-class\">.text</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ffffff</span>; &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span>: light) &#123;  <span class=\"hljs-comment\">/* 浅色模式 */</span><br>  <span class=\"hljs-selector-class\">.background</span> &#123; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ffffff</span>; &#125;<br>  <span class=\"hljs-selector-class\">.text</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333333</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>兼容性如下，不过对于不支持该属性的浏览器也能忽略该属性从而向下兼容。</p>\n<p><img  src=\"https://pic.izhaoo.com/20201113102014.jpg\"  ><span class=\"image-caption\">浏览器兼容性</span></p>\n<p>通过该属性，我们即可检测出系统当前所处的颜色模式，并对样式进行单独配置。</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme\">MDN: prefers-color-scheme</a></p>\n</blockquote>\n<h3 id=\"CSS-Variable\"><a href=\"#CSS-Variable\" class=\"headerlink\" title=\"CSS Variable\"></a>CSS Variable</h3><p>通过 <code>prefers-color-scheme</code> 匹配颜色模式，但是为所有元素都单独定制两套颜色样式显然很麻烦，后期也难以维护。</p>\n<p>一个页面内的颜色方案通常比较统一，也就那么几种颜色，所以我们可以通过 CSS变量 (CSS Variable) 为颜色进行规整，快速切换颜色模式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ffffff</span>;<br>  --<span class=\"hljs-attribute\">color</span>-text: <span class=\"hljs-number\">#33333d</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span>: dark) &#123;<br>  <span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>    --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#1e2128</span>;<br>    --<span class=\"hljs-attribute\">color</span>-text: <span class=\"hljs-number\">#dddddd</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-selector-class\">.background</span> &#123; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">var</span>(--color-background); &#125;<br><span class=\"hljs-selector-class\">.text</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--color-text); &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"手动切换\"><a href=\"#手动切换\" class=\"headerlink\" title=\"手动切换\"></a>手动切换</h2><p>通过媒体查询和样式变量我们可以跟随系统设置，实现自动切换颜色模式。但是这样还不够友好，有以下场景：</p>\n<ol>\n<li>浏览器不支持 <code>prefers-color-scheme</code>，无法自动切换颜色模式</li>\n<li>系统处于深色模式状态，但是我又想让该网页单独显示浅色模式</li>\n</ol>\n<p>所以还需要添加一个按钮，让用户手动切换颜色模式。</p>\n<h3 id=\"HTML-Attribute\"><a href=\"#HTML-Attribute\" class=\"headerlink\" title=\"HTML Attribute\"></a>HTML Attribute</h3><p>实现用户手动切换颜色模式，首先需要一个“全局变量”来保存当前颜色模式，并且让 <code>CSS</code> 识别该“变量”，匹配颜色模式。我们可以直接在 <code>html</code> 标签（根元素）设定一个属性 <code>color-mode</code>，属性值有 <code>light</code> 和 <code>dark</code>，可以通过 <code>CSS</code> 的属性选择器直接匹配，用户点击切换按钮时可以通过 <code>JS</code> 直接修改该属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">color-mode</span>=<span class=\"hljs-string\">&quot;dark&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;background&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ffffff</span>;<br>  --<span class=\"hljs-attribute\">color</span>-text: <span class=\"hljs-number\">#33333d</span>;<br>&#125;<br><br><span class=\"hljs-selector-attr\">[color-mode=<span class=\"hljs-string\">&#x27;dark&#x27;</span>]</span> &#123;<br>  <span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>    --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#1e2128</span>;<br>    --<span class=\"hljs-attribute\">color</span>-text: <span class=\"hljs-number\">#dddddd</span>;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-selector-class\">.background</span> &#123; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">var</span>(--color-background); &#125;<br><span class=\"hljs-selector-class\">.text</span> &#123; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--color-text); &#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Stylus\"><a href=\"#Stylus\" class=\"headerlink\" title=\"Stylus\"></a>Stylus</h3><p><code>hexo-theme-zhaoo</code> 主题使用了 <code>Stylus</code> 预处理器，基于 <strong>变量</strong>、<strong>函数</strong> 等特性可以进一步抽离样式，便于维护。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* variables.styl */</span><br><br><span class=\"hljs-comment\">/* light */</span><br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span> = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.background</span>&#x27;) || <span class=\"hljs-selector-id\">#ffffff</span>)<br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.background-secondary</span>&#x27;) || <span class=\"hljs-selector-id\">#f6f8fa</span>)<br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb = <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span><br>$<span class=\"hljs-attribute\">color</span>-text = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text</span>&#x27;) || <span class=\"hljs-selector-id\">#33333d</span>)<br>$<span class=\"hljs-attribute\">color</span>-text-secondary = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-secondary</span>&#x27;) || <span class=\"hljs-selector-id\">#4e4e4e</span>)<br>$<span class=\"hljs-attribute\">color</span>-text-third = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-third</span>&#x27;) || <span class=\"hljs-selector-id\">#999999</span>)<br><span class=\"hljs-comment\">/* dark */</span><br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.background-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#1e2128</span>)<br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.background-secondary-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#1a1d22</span>)<br>$<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb-dark = <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">40</span><br>$<span class=\"hljs-attribute\">color</span>-text-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#dddddd</span>)<br>$<span class=\"hljs-attribute\">color</span>-text-secondary-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-secondary-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#9899ab</span>)<br>$<span class=\"hljs-attribute\">color</span>-text-third-dark = unquote(hexo-config(&#x27;<span class=\"hljs-attribute\">color</span><span class=\"hljs-selector-class\">.text-third-dark</span>&#x27;) || <span class=\"hljs-selector-id\">#7d8594</span>)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* color-mode.styl */</span><br><br><span class=\"hljs-selector-pseudo\">:root</span><br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span> $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span><br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb<br>  --<span class=\"hljs-attribute\">color</span>-text $<span class=\"hljs-attribute\">color</span>-text<br>  --<span class=\"hljs-attribute\">color</span>-text-secondary $<span class=\"hljs-attribute\">color</span>-text-secondary<br>  --<span class=\"hljs-attribute\">color</span>-text-third $<span class=\"hljs-attribute\">color</span>-text-third<br>dark()<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span> $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-dark<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-secondary-dark<br>  --<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb $<span class=\"hljs-attribute\">color</span>-<span class=\"hljs-attribute\">background</span>-rgb-dark<br>  --<span class=\"hljs-attribute\">color</span>-text $<span class=\"hljs-attribute\">color</span>-text-dark<br>  --<span class=\"hljs-attribute\">color</span>-text-secondary $<span class=\"hljs-attribute\">color</span>-text-secondary-dark<br>  --<span class=\"hljs-attribute\">color</span>-text-third $<span class=\"hljs-attribute\">color</span>-text-third-dark<br><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span> dark)<br>  :<span class=\"hljs-attribute\">root</span>:<span class=\"hljs-keyword\">not</span>([color-mode])<br>    dark()<br>[color-mode=<span class=\"hljs-string\">&#x27;dark&#x27;</span>]<br>  dark()<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><p>触发器就是一个按钮，点击后修改 <code>html</code> 标签的 <code>color-mode</code> 属性，切换颜色模式。比较简单，直接上代码了：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;iconfont iconmoono&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;color-toggle&quot;</span> <span class=\"hljs-attr\">color-toggle</span>=<span class=\"hljs-string\">&quot;light&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> switchColorMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>)) <span class=\"hljs-keyword\">return</span>;<br>  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>).addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> mode = <span class=\"hljs-built_in\">this</span>.getAttribute(<span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>) === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>;<br>    <span class=\"hljs-built_in\">document</span>.documentElement.setAttribute(htmlAttribute, mode);<br>  &#125;);<br>&#125;<br>switchColorMode();<br></code></pre></td></tr></table></figure>\n\n<p>至此，用户就可以点击按钮手动切换颜色模式了。</p>\n<h3 id=\"缓存状态\"><a href=\"#缓存状态\" class=\"headerlink\" title=\"缓存状态\"></a>缓存状态</h3><p>该方案还存在问题，跳转页面或刷新页面，颜色模式就会切回到默认。（用户：你***逗我玩呢？）所以我们需要让浏览器缓存用户手动切换的颜色模式，之后加载页面时默认以该模式渲染。背面经环节：前端缓存方案有 <code>cookies</code>、<code>localStorage</code>、<code>sessionStorage</code>、<code>Web SQL</code>、<code>IndexedDB</code>…… </p>\n<p>用最方便的 <code>localStorage</code> 储存用户切换到颜色模式即可，在用户点击按钮后将更新的颜色模式通过 <code>localStorage.setItem</code> 存储，再在页面渲染时通过 <code>localStorage.getItem</code> 获取颜色模式并渲染即可，<code>key</code> 为 <code>color-mode</code>。</p>\n<p>我们还需要解决一个问题，<strong>系统自动配置</strong> (媒体查询) 与 <strong>用户手动配置</strong> (按钮切换) 之间的同步和冲突问题。例如：1. 在固定时段（晚上或白天），页面渲染时按用户切换的颜色模式加载。2. 在时段改变后（白天变为晚上），页面渲染时按系统颜色模式渲染。</p>\n<p>我们只需要再添加一组 <code>key</code> 为 <code>color-mode-media-query</code> 的 <code>localStorage</code>，缓存媒体查询的颜色模式。渲染时判断 <em>当前媒体查询</em> 与 <em>缓存</em> 是否相等，相等说明处于同一时段，不等说明时段已改变，从而决定渲染方式。</p>\n<p>最后，这段 <code>JS</code> 需要添加到 <code>&lt;/body&gt;</code> 标签前面加载，不然会闪屏。</p>\n<p>完整 <code>JS</code> 代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">!<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">window</span>, <span class=\"hljs-built_in\">document</span></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> rootElement = <span class=\"hljs-built_in\">document</span>.documentElement;<br>  <span class=\"hljs-keyword\">var</span> toggleElement = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>);<br>  <span class=\"hljs-keyword\">var</span> highlightElement = <span class=\"hljs-built_in\">document</span>.getElementsByName(<span class=\"hljs-string\">&#x27;highlight-style&#x27;</span>);<br>  <span class=\"hljs-keyword\">var</span> modeStorageKey = <span class=\"hljs-string\">&#x27;color-mode&#x27;</span>;<br>  <span class=\"hljs-keyword\">var</span> mediaQueryStorageKey = <span class=\"hljs-string\">&#x27;color-mode-media-query&#x27;</span>;<br>  <span class=\"hljs-keyword\">var</span> htmlAttribute = <span class=\"hljs-string\">&#x27;color-mode&#x27;</span>;<br>  <span class=\"hljs-keyword\">var</span> toggleAttribute = <span class=\"hljs-string\">&#x27;color-toggle&#x27;</span>;<br><br>  <span class=\"hljs-keyword\">var</span> getMediaQuery = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> getModeStorage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">localStorage</span>.getItem(modeStorageKey);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setModeStorage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">localStorage</span>.setItem(modeStorageKey, mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> getMediaQueryStorage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">localStorage</span>.getItem(mediaQueryStorageKey);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setMediaQueryStorage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">localStorage</span>.setItem(mediaQueryStorageKey, mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setColorMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    rootElement.setAttribute(htmlAttribute, mode);<br>    setModeStorage(mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setIcon = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!toggleElement) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">var</span> addIconName = mode === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;iconmoono&#x27;</span> : <span class=\"hljs-string\">&#x27;iconsuno&#x27;</span>;<br>    <span class=\"hljs-keyword\">var</span> removeIconName = mode === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;iconsuno&#x27;</span> : <span class=\"hljs-string\">&#x27;iconmoono&#x27;</span>;<br>    toggleElement.classList.remove(removeIconName);<br>    toggleElement.classList.add(addIconName);<br>    toggleElement.setAttribute(toggleAttribute, mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> setHighlightStyle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    highlightElement.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>&#123;<br>      item.disabled = !(item.getAttribute(<span class=\"hljs-string\">&#x27;mode&#x27;</span>) === mode);<br>    &#125;);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> loadColorMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> mode = mode || getModeStorage() || getMediaQuery();<br>    <span class=\"hljs-keyword\">if</span> (getMediaQuery() === getMediaQueryStorage()) &#123;<br>      mode = getModeStorage();<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      mode = getMediaQuery();<br>      setMediaQueryStorage(mode);<br>    &#125;<br>    setColorMode(mode);<br>    setIcon(mode);<br>    setHighlightStyle(mode);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> switchColorMode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!toggleElement) <span class=\"hljs-keyword\">return</span>;<br>    toggleElement.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-keyword\">var</span> mode = <span class=\"hljs-built_in\">this</span>.getAttribute(toggleAttribute) === <span class=\"hljs-string\">&#x27;light&#x27;</span> ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>;<br>      setColorMode(mode);<br>      setIcon(mode);<br>      setHighlightStyle(mode);<br>    &#125;);<br>  &#125;<br><br>  loadColorMode();<br>  switchColorMode();<br>&#125;(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-built_in\">document</span>);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>[你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持] (<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a>)</p>\n</blockquote>\n<h2 id=\"适配特殊样式\"><a href=\"#适配特殊样式\" class=\"headerlink\" title=\"适配特殊样式\"></a>适配特殊样式</h2><p>大部分元素可以通过 <code>CSS</code> 属性直接匹配样式，但是仍有一部分元素需要通过“特殊”方法进行处理。</p>\n<h3 id=\"PNG\"><a href=\"#PNG\" class=\"headerlink\" title=\"PNG\"></a>PNG</h3><p>适配首屏云朵，其实就是张 <code>PNG</code> 图片，要是 <code>PNG</code> 能用 <code>CSS</code> 控制颜色就好了。</p>\n<p><img  src=\"https://pic.izhaoo.com/20201112104351.jpg\"  ><span class=\"image-caption\">适配PNG</span></p>\n<p>从张鑫旭大佬的博客找到了解决方案，可以用 <code>CSS3</code> 滤镜中的投影 (filter: drop-shadow) 进行上色。但是需要做一些处理，将原图隐藏而阴影显示，其实只要将原图偏移出视口，再将阴影偏移回正确位置即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">img</span> &#123;<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>  <span class=\"hljs-attribute\">left</span>: -<span class=\"hljs-number\">100vw</span>;  <span class=\"hljs-comment\">/* 原图偏移出视口 */</span><br>  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">drop-shadow</span>(<span class=\"hljs-built_in\">var</span>(--color-background) <span class=\"hljs-number\">100vw</span> <span class=\"hljs-number\">0px</span>);  <span class=\"hljs-comment\">/* 阴影进行上色，并偏移回原位置 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2016/06/png-icon-change-color-by-css/\">PNG格式小图标的CSS任意颜色赋色技术</a></p>\n</blockquote>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><p>接下来适配首屏波浪，小图标等 <code>SVG</code> 内容。</p>\n<p><img  src=\"https://pic.izhaoo.com/20201112112109.jpg\"  ><span class=\"image-caption\">适配SVG</span></p>\n<p>首先 <code>SVG</code> 也是可以用上面提到的 <code>filter: drop-shadow</code> 进行上色的。</p>\n<p>另外，也可以用 <code>SVG</code> 标签中的 <code>fill</code> 属性进行赋色，如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;preview-waves&quot;</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"hljs-attr\">xmlns:xlink</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/1999/xlink&quot;</span></span><br><span class=\"hljs-tag\">  <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 24 150 28&quot;</span> <span class=\"hljs-attr\">preserveAspectRatio</span>=<span class=\"hljs-string\">&quot;none&quot;</span> <span class=\"hljs-attr\">shape-rendering</span>=<span class=\"hljs-string\">&quot;auto&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">defs</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;gentle-wave&quot;</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">defs</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;preview-parallax&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">&quot;#gentle-wave&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;48&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rgba(var(--color-background-rgb), 0.7&quot;</span> /&gt;</span>  //通过 fill 属性进行赋色<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">&quot;#gentle-wave&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;48&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rgba(var(--color-background-rgb), 0.5)&quot;</span> /&gt;</span>  //通过 fill 属性进行赋色<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">&quot;#gentle-wave&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;48&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;5&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rgba(var(--color-background-rgb), 0.3)&quot;</span> /&gt;</span>  //通过 fill 属性进行赋色<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">use</span> <span class=\"hljs-attr\">xlink:href</span>=<span class=\"hljs-string\">&quot;#gentle-wave&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;48&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;7&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rgb(var(--color-background-rgb))&quot;</span> /&gt;</span>  //通过 fill 属性进行赋色<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"rgba\"><a href=\"#rgba\" class=\"headerlink\" title=\"rgba\"></a>rgba</h3><p>对应含有透明通道的颜色 (rgba)，如果在 <code>rgba()</code> 中包裹 CSS变量，<code>stylus</code> 会解析出错，这应该是 <code>stylus</code> 的一个 <code>bug</code>。我们可以用 <code>stylus</code> 中的 <code>@css</code> 指令解决，被包裹在 <code>@css</code> 中的内容将不会被 <code>stylus</code> 解析，而是直接以 <code>CSS</code> 的形式输出。如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@css</span> &#123;<br>  <span class=\"hljs-selector-class\">.menu</span> &#123;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-built_in\">var</span>(--color-background-rgb), <span class=\"hljs-number\">0.7</span>);<br>  &#125;<br>  <span class=\"hljs-selector-class\">.navbar</span> &#123;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-built_in\">var</span>(--color-background-rgb), <span class=\"hljs-number\">0.8</span>)s;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"highlight\"><a href=\"#highlight\" class=\"headerlink\" title=\"highlight\"></a>highlight</h3><p>代码高亮也需要做适配，可以引入浅色和深色两套代码高亮样式，默认用 <code>disabled</code> 属性禁用，然后在页面渲染时根据颜色模式开启对应的代码高亮样式。如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><code class=\"hljs ejs\">&lt;% if(theme.highlight.enable)&#123; %&gt;<br>&lt;% if(theme.vendors.highlight_css)&#123; %&gt;<br>&lt;% for (i in theme.highlight.style) &#123; %&gt;<br>&lt;% style = theme.highlight.style[i].toLowerCase().replace(/(?&lt;!([0-9]))\\s(?!([0-9]))/g, &#x27;-&#x27;).replace(/\\s/g, &#x27;&#x27;) %&gt;  //引入多套样式<br>&lt;%- css(&#123;href: theme.vendors.highlight_css + style + &#x27;.min.css&#x27;, name: &#x27;highlight-style&#x27;, mode: i&#125;) %&gt;<br>&lt;% &#125; %&gt;<br>&lt;% &#125;else&#123; %&gt;<br>&lt;%- css(&#x27;lib/highlight/a11y-dark.css&#x27;)%&gt;<br>&lt;% &#125;&#125; %&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> setHighlightStyle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">mode</span>) </span>&#123;<br>  highlightElement.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>&#123;<br>    item.disabled = !(item.getAttribute(<span class=\"hljs-string\">&#x27;mode&#x27;</span>) === mode);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"主题","path":"api/tags/主题.json"},{"name":"前端","path":"api/tags/前端.json"}]}