{"title":"树莓派 - JS 驱动 LCD1602","slug":"raspi-johnny-five-lcd1602","date":"2021-02-03T07:44:52.000Z","updated":"2021-02-03T07:55:53.000Z","comments":true,"path":"api/articles/raspi-johnny-five-lcd1602.json","realPath":"/2021/02/03/raspi-johnny-five-lcd1602/","excerpt":"树莓派使用 johnny-five.js 库驱动 LCD1602 输出文字。","covers":["https://pic.izhaoo.com/20210203152622.jpg"],"cover":"https://pic.izhaoo.com/20210203154746.jpg","content":"<p>树莓派使用 johnny-five.js 库驱动 LCD1602 输出文字。</p>\n<span id=\"more\"></span>\n\n<p>&lt;封面摄于浙江·安吉的凤凰山，大一在这些玩了半年树莓派，现在用树莓派来写毕设，不忘初心，笑。&gt;</p>\n<p>最近想用树莓派驱动 IoT 写个毕设，经过一番调研选择了 Johnny-Five 库，咱前端人必须用 JS 干啥都行。开始前先驱动个 LCD1602 试试。 LCD1602 我选择的是 I2C 驱动的，既省线，又不用拖个面包板。</p>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>这里我们选择用 <a href=\"https://github.com/nvm-sh/nvm\">nvm</a> 安装，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash  <span class=\"hljs-comment\"># 安装 nvm</span><br>$ <span class=\"hljs-built_in\">source</span> ~/.bashrc  <span class=\"hljs-comment\"># 刷新 bash 命令</span><br>$ nvm install node  <span class=\"hljs-comment\"># 安装最新 Node.js</span><br></code></pre></td></tr></table></figure>\n<p>执行一下 <code>node -v</code> 和 <code>npm --version</code> 查看是否安装成功。</p>\n<h3 id=\"编译-pigpio\"><a href=\"#编译-pigpio\" class=\"headerlink\" title=\"编译 pigpio\"></a>编译 pigpio</h3><p>Johnny-Five 依赖于 <a href=\"https://github.com/joan2937/pigpio\">pigpio</a>，但是 Johnny-Five 库中集成的 pigpio 版本太老，不支持 64 位的系统，使用我们需要手动编译最新版本的 pigpio。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ git <span class=\"hljs-built_in\">clone</span> https://github.com/joan2937/pigpio.git  <span class=\"hljs-comment\"># 下载最新版</span><br>$ unzip pigpio-master.zip  <span class=\"hljs-comment\"># 解压</span><br>$ <span class=\"hljs-built_in\">cd</span> pigpio-master  <span class=\"hljs-comment\"># 进入目录</span><br>$ make  <span class=\"hljs-comment\"># 编译</span><br>$ make install <span class=\"hljs-comment\"># 安装</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Johnny-Five\"><a href=\"#安装-Johnny-Five\" class=\"headerlink\" title=\"安装 Johnny-Five\"></a>安装 Johnny-Five</h3><p>Johnny-Five 需要两个 JS 依赖，<code>johnny-five.js</code> 和 <code>raspi-io.js</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ mkdir exp &amp;&amp; <span class=\"hljs-built_in\">cd</span> exp  <span class=\"hljs-comment\"># 新建项目</span><br>$ npm init <span class=\"hljs-comment\"># 初始化</span><br>$ npm i johnny-five raspi-io --save<br>$ nano index.js<br></code></pre></td></tr></table></figure>\n\n<p>输入以下内容并保存：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; RaspiIO &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;raspi-io&quot;</span>);<br><span class=\"hljs-keyword\">const</span> five = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;johnny-five&quot;</span>);<br><br><span class=\"hljs-keyword\">const</span> board = <span class=\"hljs-keyword\">new</span> five.Board(&#123;<br>  <span class=\"hljs-attr\">io</span>: <span class=\"hljs-keyword\">new</span> RaspiIO()<br>&#125;);<br><br>board.on(<span class=\"hljs-string\">&quot;ready&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> lcd = <span class=\"hljs-keyword\">new</span> five.LCD(&#123; <br>  <span class=\"hljs-attr\">controller</span>: <span class=\"hljs-string\">&quot;PCF8574T&quot;</span>  <span class=\"hljs-comment\">// 板子的型号</span><br>&#125;);<br>  lcd.print(<span class=\"hljs-string\">&quot;Hello, World&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>请查看板子背部芯片上刻着的型号正确填写，PCF8574、PCF8574A、PCF8574T、PCF8574AT。</p>\n<p>Johnny-Five 有个坑，会导致文字无法正确输出只会输出一个个方块，需要修复一下，详见：<a href=\"https://github.com/rwaldron/johnny-five/issues/1639\">Raspberry and I2C LCD1602 with PCF8574T controller does not show text but only squares</a></p>\n<p>cd 到 <code>node_modules/johnny-five/lib/lcd.js</code>，将 <code>this.io.i2cWrite(this.address, this.memory);</code> 改成 <code>this.io.i2cWrite(this.address, [this.memory]);</code>，保存即可。</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p><strong>接线</strong></p>\n<p>LCD1602 有四根引脚，按如关联方式接入树莓派：</p>\n<table>\n<thead>\n<tr>\n<th>LCD</th>\n<th>树莓派</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GND</td>\n<td>6</td>\n<td>接地</td>\n</tr>\n<tr>\n<td>VCC</td>\n<td>4</td>\n<td>电源（5v or 3.3v）</td>\n</tr>\n<tr>\n<td>SDA</td>\n<td>3</td>\n<td>数据信号</td>\n</tr>\n<tr>\n<td>SCL</td>\n<td>5</td>\n<td>控制信号</td>\n</tr>\n</tbody></table>\n<p>连接完成后命令行输入 <code>sudo raspi-config</code>，Interface Options =&gt; I2C，启动 <em>I2C</em> 并重启。</p>\n<p>重启后命令行输入 <code>i2cdetect -y -r 1</code>，若显示如下则说明 I2C 连接成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f<br>00:          -- -- -- -- -- -- -- -- -- -- -- -- -- <br>10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>20: -- -- -- -- -- -- -- 27 -- -- -- -- -- -- -- -- <br>30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>70: -- -- -- -- -- -- -- -- <br></code></pre></td></tr></table></figure>\n\n<p><strong>运行</strong></p>\n<p>输入 <code>sudo node index.js</code> 运行程序即可看到 LCD 输出了字符。</p>\n<p><img  src=\"https://pic.izhaoo.com/20210203152622.jpg\"  ><span class=\"image-caption\">输出字符</span></p>\n<p>这里只是简单的做了个输出示范，开发中对应的 API 可以查看<a href=\"http://johnny-five.io/api/lcd/\">官方文档</a>。</p>\n<p>Johnny-Five 这个库还是挺厉害的，基本可以无脑驱动周边常用的元器件，python 能干的事儿，咱 JS 肯定要更优雅。也可以尝试一下 <a href=\"https://cylonjs.com/\">Cylon.js</a> 这个库，博主试了一下有坑，对新版系统支持不好。</p>\n<h3 id=\"踩坑指北\"><a href=\"#踩坑指北\" class=\"headerlink\" title=\"踩坑指北\"></a>踩坑指北</h3><p>记录一下踩过的坑：</p>\n<ol>\n<li>pigpio 需要手动编译最新版本，否则无法驱动 64 位系统。</li>\n<li>Johnny-Five 需要修改源码，否则会导致输出不正确。</li>\n<li>板子型号确认正确。</li>\n<li>运行程序需要 <em>root</em> 权限，请跟 <code>sudo</code> 命令。</li>\n<li>运行程序后可能板子上啥也没有，试着拨一下板子背部的旋钮调节一下亮度。<br>（博主调了一天源码没输出，就差给作者打电话了，晚上发现原来板子亮度没开，吐了……）</li>\n</ol>\n","more":"<p>&lt;封面摄于浙江·安吉的凤凰山，大一在这些玩了半年树莓派，现在用树莓派来写毕设，不忘初心，笑。&gt;</p>\n<p>最近想用树莓派驱动 IoT 写个毕设，经过一番调研选择了 Johnny-Five 库，咱前端人必须用 JS 干啥都行。开始前先驱动个 LCD1602 试试。 LCD1602 我选择的是 I2C 驱动的，既省线，又不用拖个面包板。</p>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>这里我们选择用 <a href=\"https://github.com/nvm-sh/nvm\">nvm</a> 安装，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash  <span class=\"hljs-comment\"># 安装 nvm</span><br>$ <span class=\"hljs-built_in\">source</span> ~/.bashrc  <span class=\"hljs-comment\"># 刷新 bash 命令</span><br>$ nvm install node  <span class=\"hljs-comment\"># 安装最新 Node.js</span><br></code></pre></td></tr></table></figure>\n<p>执行一下 <code>node -v</code> 和 <code>npm --version</code> 查看是否安装成功。</p>\n<h3 id=\"编译-pigpio\"><a href=\"#编译-pigpio\" class=\"headerlink\" title=\"编译 pigpio\"></a>编译 pigpio</h3><p>Johnny-Five 依赖于 <a href=\"https://github.com/joan2937/pigpio\">pigpio</a>，但是 Johnny-Five 库中集成的 pigpio 版本太老，不支持 64 位的系统，使用我们需要手动编译最新版本的 pigpio。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ git <span class=\"hljs-built_in\">clone</span> https://github.com/joan2937/pigpio.git  <span class=\"hljs-comment\"># 下载最新版</span><br>$ unzip pigpio-master.zip  <span class=\"hljs-comment\"># 解压</span><br>$ <span class=\"hljs-built_in\">cd</span> pigpio-master  <span class=\"hljs-comment\"># 进入目录</span><br>$ make  <span class=\"hljs-comment\"># 编译</span><br>$ make install <span class=\"hljs-comment\"># 安装</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Johnny-Five\"><a href=\"#安装-Johnny-Five\" class=\"headerlink\" title=\"安装 Johnny-Five\"></a>安装 Johnny-Five</h3><p>Johnny-Five 需要两个 JS 依赖，<code>johnny-five.js</code> 和 <code>raspi-io.js</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">$ mkdir exp &amp;&amp; <span class=\"hljs-built_in\">cd</span> exp  <span class=\"hljs-comment\"># 新建项目</span><br>$ npm init <span class=\"hljs-comment\"># 初始化</span><br>$ npm i johnny-five raspi-io --save<br>$ nano index.js<br></code></pre></td></tr></table></figure>\n\n<p>输入以下内容并保存：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> &#123; RaspiIO &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;raspi-io&quot;</span>);<br><span class=\"hljs-keyword\">const</span> five = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;johnny-five&quot;</span>);<br><br><span class=\"hljs-keyword\">const</span> board = <span class=\"hljs-keyword\">new</span> five.Board(&#123;<br>  <span class=\"hljs-attr\">io</span>: <span class=\"hljs-keyword\">new</span> RaspiIO()<br>&#125;);<br><br>board.on(<span class=\"hljs-string\">&quot;ready&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> lcd = <span class=\"hljs-keyword\">new</span> five.LCD(&#123; <br>  <span class=\"hljs-attr\">controller</span>: <span class=\"hljs-string\">&quot;PCF8574T&quot;</span>  <span class=\"hljs-comment\">// 板子的型号</span><br>&#125;);<br>  lcd.print(<span class=\"hljs-string\">&quot;Hello, World&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>请查看板子背部芯片上刻着的型号正确填写，PCF8574、PCF8574A、PCF8574T、PCF8574AT。</p>\n<p>Johnny-Five 有个坑，会导致文字无法正确输出只会输出一个个方块，需要修复一下，详见：<a href=\"https://github.com/rwaldron/johnny-five/issues/1639\">Raspberry and I2C LCD1602 with PCF8574T controller does not show text but only squares</a></p>\n<p>cd 到 <code>node_modules/johnny-five/lib/lcd.js</code>，将 <code>this.io.i2cWrite(this.address, this.memory);</code> 改成 <code>this.io.i2cWrite(this.address, [this.memory]);</code>，保存即可。</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p><strong>接线</strong></p>\n<p>LCD1602 有四根引脚，按如关联方式接入树莓派：</p>\n<table>\n<thead>\n<tr>\n<th>LCD</th>\n<th>树莓派</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GND</td>\n<td>6</td>\n<td>接地</td>\n</tr>\n<tr>\n<td>VCC</td>\n<td>4</td>\n<td>电源（5v or 3.3v）</td>\n</tr>\n<tr>\n<td>SDA</td>\n<td>3</td>\n<td>数据信号</td>\n</tr>\n<tr>\n<td>SCL</td>\n<td>5</td>\n<td>控制信号</td>\n</tr>\n</tbody></table>\n<p>连接完成后命令行输入 <code>sudo raspi-config</code>，Interface Options =&gt; I2C，启动 <em>I2C</em> 并重启。</p>\n<p>重启后命令行输入 <code>i2cdetect -y -r 1</code>，若显示如下则说明 I2C 连接成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f<br>00:          -- -- -- -- -- -- -- -- -- -- -- -- -- <br>10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>20: -- -- -- -- -- -- -- 27 -- -- -- -- -- -- -- -- <br>30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- <br>70: -- -- -- -- -- -- -- -- <br></code></pre></td></tr></table></figure>\n\n<p><strong>运行</strong></p>\n<p>输入 <code>sudo node index.js</code> 运行程序即可看到 LCD 输出了字符。</p>\n<p><img  src=\"https://pic.izhaoo.com/20210203152622.jpg\"  ><span class=\"image-caption\">输出字符</span></p>\n<p>这里只是简单的做了个输出示范，开发中对应的 API 可以查看<a href=\"http://johnny-five.io/api/lcd/\">官方文档</a>。</p>\n<p>Johnny-Five 这个库还是挺厉害的，基本可以无脑驱动周边常用的元器件，python 能干的事儿，咱 JS 肯定要更优雅。也可以尝试一下 <a href=\"https://cylonjs.com/\">Cylon.js</a> 这个库，博主试了一下有坑，对新版系统支持不好。</p>\n<h3 id=\"踩坑指北\"><a href=\"#踩坑指北\" class=\"headerlink\" title=\"踩坑指北\"></a>踩坑指北</h3><p>记录一下踩过的坑：</p>\n<ol>\n<li>pigpio 需要手动编译最新版本，否则无法驱动 64 位系统。</li>\n<li>Johnny-Five 需要修改源码，否则会导致输出不正确。</li>\n<li>板子型号确认正确。</li>\n<li>运行程序需要 <em>root</em> 权限，请跟 <code>sudo</code> 命令。</li>\n<li>运行程序后可能板子上啥也没有，试着拨一下板子背部的旋钮调节一下亮度。<br>（博主调了一天源码没输出，就差给作者打电话了，晚上发现原来板子亮度没开，吐了……）</li>\n</ol>","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"树莓派","path":"api/tags/树莓派.json"},{"name":"raspberrypi","path":"api/tags/raspberrypi.json"}]}