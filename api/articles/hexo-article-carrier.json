{"title":"Hexo - 开发文章搬运功能","slug":"hexo-article-carrier","date":"2020-07-25T09:14:33.000Z","updated":"2020-09-06T06:38:40.000Z","comments":true,"path":"api/articles/hexo-article-carrier.json","realPath":"/2020/07/25/hexo-article-carrier/","excerpt":"我们不生产文章，我们只是文章的搬运工。","covers":["https://pic.izhaoo.com/20200727125134.jpg","https://pic.izhaoo.com/20200727125519.jpg","https://pic.izhaoo.com/20200727125724.jpg"],"cover":"https://pic.izhaoo.com/20200718151502.jpg","content":"<p>我们不生产文章，我们只是文章的搬运工。</p>\n<span id=\"more\"></span>\n\n<p>最近发现一个蛮有意思的现象：在掘金刷到了一篇写挺好的文章，看完顺手三连。然后过了几天，就能在各种渠道看到这篇文章，公众号、技术博客、朋友圈……最后发现，掘金那篇也不是原创，而是搬运来的。且原文明明标注了“BY-NC-SA”版权协议，大家转载的时候都不注明。</p>\n<blockquote>\n<p>甲：我们不生产文章，我们只是文章的搬运工。<br>乙：这篇文章写的很不错嘛，下一秒就是我的了。<br>丙：读书人的事，怎么能叫偷。<br>……</p>\n</blockquote>\n<p>有意思，那我就在主题写个小功能吧，帮助大家一键搬运。<del>（没有人会搬运我的水文）</del></p>\n<p>效果是酱紫滴：</p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125134.jpg\"  ><span class=\"image-caption\">版权声明</span></p>\n<p>（正常开启版权声明）</p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125519.jpg\"  ><span class=\"image-caption\">放弃抵抗</span></p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125724.jpg\"  ><span class=\"image-caption\">弹窗提示</span></p>\n<p>(放弃抵抗，大家随意)</p>\n<p>点击【一键打包带走】后，将全文（MarkDown、HTML、文本）复制到剪切板，并且弹窗提示。</p>\n<h3 id=\"内容获取\"><a href=\"#内容获取\" class=\"headerlink\" title=\"内容获取\"></a>内容获取</h3><h5 id=\"2020-09-06\"><a href=\"#2020-09-06\" class=\"headerlink\" title=\"2020.09.06\"></a>2020.09.06</h5><p>今日去 <code>hexo</code> 文档转了一圈，发现居然更新了（昨天更新的），新增了一些实用 <code>API</code>，相见恨晚啊！其中就有 <code>page.raw</code> 用来获取文章原始内容，也就是 <code>MarkDown</code> ，这样就不需要之前这么折腾了，so easy~</p>\n<p>直接贴代码（这部分是辅助函数 <code>Helper</code>）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;<br><br><span class=\"hljs-built_in\">module</span>.exports.carrier = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">hexo</span>) </span>&#123;<br>  hexo.extend.helper.register(<span class=\"hljs-string\">&#x27;carrier&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> config = hexo.theme.config;<br>    <span class=\"hljs-keyword\">if</span> (!config.carrier || !config.carrier.enable || !config.carrier.type) &#123;<br>      <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">var</span> data;<br>    <span class=\"hljs-keyword\">switch</span> (config.carrier.type) &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;html&#x27;</span>:<br>        data = <span class=\"hljs-built_in\">this</span>.page.content;<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;markdown&#x27;</span>:<br>        data = <span class=\"hljs-built_in\">this</span>.page.raw;<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;text&#x27;</span>:<br>        data = <span class=\"hljs-built_in\">this</span>.strip_html(<span class=\"hljs-built_in\">this</span>.page.content);<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">default</span>:<br>        data = <span class=\"hljs-string\">&#x27;没有抓到内容哦~&#x27;</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> data;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"2020-07-22\"><a href=\"#2020-07-22\" class=\"headerlink\" title=\"2020.07.22\"></a>2020.07.22</h5><p>已废弃……</p>\n<p>这部分挺难整的，主要是获取 <code>MarkDown</code> 原始内容比较难， <code>hexo</code> 渲染生成 <code>html</code> 之后是不会在生成文件中保留 <code>md</code> 源文件的。所以得想办法在  <code>hexo</code> 渲染的时候把 <code>md</code> 内容抓出来，翻了半天 <code>hexo</code> 官方文档，也没什么完美的思路。（吐槽一下，文档是真的简略。）</p>\n<p>最后在生命周期中找到这个函数：<code>hexo.extend.processor.register(rule, function(file)&#123; var data = file.readSync(); &#125;);</code></p>\n<p>主要是在渲染前，载入 <code>md</code> 文件的时候做一个监听，获取原始内容（也就是 MarkDown）。</p>\n<p>这里就有一个问题了，我们需要判断 <code>Front-Matter</code> 中的 <code>carrier</code> 字段是否为 <code>true</code> 来决定是否开启功能。但是使用 <code>processor</code> 劫持原始数据的时候，内容还未被渲染，所以拿不到该字段。另外就是拿到原始数据后，如何进行持久化保存？给出如下方案：</p>\n<ol>\n<li>不管三七二十一，劫持所有文章，全部保存为文件。后续通过运行时的生命周期获取 <code>carrier</code> 字段并判断是否启用。 （×）</li>\n<li>在原始文件中通过正则表达式手动解析 <code>carrier</code> 字段。选择性的保存文件，甚至直接插入 <code>DOM</code> 节点。 （√）</li>\n</ol>\n<p>最后选择了方案二，正则就比较头疼了……（作者正则水平不太好）</p>\n<p>需要解析的原文片段如下，需要解析出 <code>carrier</code> 字段。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">hexo</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">开发文章搬运功能</span><br><span class=\"hljs-attr\">date:</span> <span class=\"hljs-number\">2020-07-25 17:14:33</span><br><span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">Hexo</span>, <span class=\"hljs-string\">主题</span>]<br><span class=\"hljs-attr\">keywords:</span> <span class=\"hljs-string\">hexo-theme-zhaoo,</span> <span class=\"hljs-string\">zhaoo,</span> <span class=\"hljs-string\">hexo,</span> <span class=\"hljs-string\">主题,</span> <span class=\"hljs-string\">文章搬运，</span> <span class=\"hljs-string\">一键复制</span><br><span class=\"hljs-attr\">categories:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">项目</span><br><span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">https://pic.izhaoo.com/20200718151502.jpg</span><br><span class=\"hljs-attr\">carrier:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-string\">文本内容……</span><br></code></pre></td></tr></table></figure>\n\n<p>网上搜到的正则是这样的，还需要做个改动：<code>^(---(?:\\r?\\n(?!--|\\s*$).*)*)\\s*((?:\\r?\\n(?!---).*)*\\r?\\n---)$</code> </p>\n<p>（不会正则就很难受了，书到用时方恨少~）</p>\n<h3 id=\"复制逻辑\"><a href=\"#复制逻辑\" class=\"headerlink\" title=\"复制逻辑\"></a>复制逻辑</h3><p>前面在 <code>hexo</code> 生命周期中（carrier()）获取到了文章内容，下面要完成用户点击链接后，复制到剪切板的交互逻辑。但是 <code>help</code> 函数只能在模板引擎渲染的时候使用，无法同 <code>js</code> 文件进行同步。（类别于 php函数 与 js）</p>\n<p>用个 <code>hack</code> 方法：在模板中创建一个隐藏的 <code>input</code> ，模板渲染的时候调用 <code>carrier()</code> 函数将文章内容加载到 <code>input</code> 中，然后在 <code>js</code> 中通过与 <code>input</code> 进行交互间接获取了内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&lt;% if (theme.carrier.enable &amp;&amp; page.carrier) &#123; %&gt;<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span>&gt;</span>版权声明：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span>本文作者放弃了版权，大家随意搬运，特此奉上搬运链接：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;javascript:;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;j-carrier-btn&quot;</span>&gt;</span>一键打包带走<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&lt;%= carrier(); %&gt;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;j-carrier-data carrier-data&quot;</span>&gt;</span><br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n\n<p>接下来完成复制到剪切板功能。很简单，通过 <code>select</code> 选择 <code>input</code> 框，再通过 <code>document.execCommand(&quot;Copy&quot;)</code> 方法拷贝到剪切板。有个小问题，隐藏的 <code>input</code> 无法被 <code>select</code>，我们就让它变成小透明，假装隐藏了。比较常用的就是 <code>opacity: 0;</code> 设置透明，但是仍会占据文档流，顺便给个 <code>left: -100px</code> 拖出去。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-class\">.carrier-data</span><br>  <span class=\"hljs-attribute\">opacity</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attribute\">position</span> fixed<br>  <span class=\"hljs-attribute\">left</span> -<span class=\"hljs-number\">100px</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">carrier: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  $(<span class=\"hljs-string\">&quot;.j-carrier-btn&quot;</span>).on(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    $(<span class=\"hljs-string\">&quot;.j-carrier-data&quot;</span>).select();<br>    <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&quot;Copy&quot;</span>);<br>    alert(<span class=\"hljs-string\">&#x27;已经复制到剪切板&#x27;</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"消息弹窗\"><a href=\"#消息弹窗\" class=\"headerlink\" title=\"消息弹窗\"></a>消息弹窗</h3><p>文章复制到剪切板后，需要弹出消息弹窗，提示用户。</p>\n<p>主题开发之初我就给自己规定，不到万不得已，绝不用第三方库。（jQuery实在是没办法了）所以我们就自己封装一个消息弹窗组件。</p>\n<p>第一版代码：</p>\n<p>逻辑很清晰。触发弹窗后，先构造 <code>DOM</code> 并插入到 <code>body</code> （根），添加 <code>in</code> 样式（渐入动画）。若干秒后移除 <code>in</code> 样式（渐出动画），并删除 <code>DOM</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">Message: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">&#123; text, type, timer &#125;</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;&lt;div class=&quot;zui-message &#x27;</span> + (type || <span class=\"hljs-string\">&quot;info&quot;</span>) + <span class=\"hljs-string\">&#x27;&quot;&gt;&lt;p&gt;&#x27;</span> + text + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&lt;/div&gt;&#x27;</span>;<br>  $(<span class=\"hljs-string\">&quot;body&quot;</span>).append(message);<br>  <span class=\"hljs-keyword\">var</span> e = $(<span class=\"hljs-string\">&quot;.zui-message&quot;</span>);<br>  e.addClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    e.removeClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>    $(<span class=\"hljs-built_in\">this</span>).remove();<br>  &#125;, timer || <span class=\"hljs-number\">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">Message(&#123; <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;已复制到剪切板&#x27;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;success&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-variable\">$color</span>-info = <span class=\"hljs-number\">#909399</span><br><span class=\"hljs-variable\">$color</span>-success = <span class=\"hljs-number\">#67c23a</span><br><span class=\"hljs-variable\">$color</span>-danger = <span class=\"hljs-number\">#f56c6c</span><br><span class=\"hljs-variable\">$color</span>-warning = <span class=\"hljs-number\">#e6a23c</span><br><span class=\"hljs-variable\">$color</span>-info-bgc = <span class=\"hljs-number\">#edf2fc</span><br><span class=\"hljs-variable\">$color</span>-success-bgc = <span class=\"hljs-number\">#f0f9eb</span><br><span class=\"hljs-variable\">$color</span>-danger-bgc = <span class=\"hljs-number\">#fef0f0</span><br><span class=\"hljs-variable\">$color</span>-warning-bgc = <span class=\"hljs-number\">#fdf6ec</span><br><span class=\"hljs-selector-class\">.zui-message</span><br>  <span class=\"hljs-attribute\">position</span> fixed<br>  <span class=\"hljs-attribute\">margin</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attribute\">padding</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span><br>  <span class=\"hljs-attribute\">top</span> -<span class=\"hljs-number\">50px</span><br>  <span class=\"hljs-attribute\">left</span> <span class=\"hljs-number\">50%</span><br>  <span class=\"hljs-attribute\">min-width</span> <span class=\"hljs-number\">250px</span><br>  <span class=\"hljs-attribute\">overflow</span> hidden<br>  <span class=\"hljs-attribute\">z-index</span> <span class=\"hljs-number\">2020</span><br>  <span class=\"hljs-attribute\">display</span> flex<br>  <span class=\"hljs-attribute\">justify-content</span> center<br>  <span class=\"hljs-attribute\">align-items</span> center<br>  <span class=\"hljs-attribute\">transform</span> translateX(-<span class=\"hljs-number\">50%</span>)<br>  <span class=\"hljs-attribute\">transition</span> top <span class=\"hljs-number\">0.4s</span><br>  <span class=\"hljs-attribute\">background-color</span> <span class=\"hljs-variable\">$color</span>-info-bgc<br>  <span class=\"hljs-selector-tag\">p</span><br>    <span class=\"hljs-attribute\">margin</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attribute\">color</span> <span class=\"hljs-variable\">$color</span>-info<br>  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">$type</span> <span class=\"hljs-keyword\">in</span> info success danger warning  <span class=\"hljs-comment\">//遍历四种类型</span><br>    &amp;.&#123;<span class=\"hljs-variable\">$type</span>&#125;<br>      <span class=\"hljs-attribute\">background-color</span> convert(<span class=\"hljs-string\">&#x27;$color-&#x27;</span> + <span class=\"hljs-variable\">$type</span> + <span class=\"hljs-string\">&#x27;-bgc&#x27;</span>)  //拼接变量名，引入颜色<br>      <span class=\"hljs-selector-tag\">p</span><br>        <span class=\"hljs-attribute\">color</span> convert(<span class=\"hljs-string\">&#x27;$color-&#x27;</span> + <span class=\"hljs-variable\">$type</span>)<br>  &amp;<span class=\"hljs-selector-class\">.in</span><br>    <span class=\"hljs-attribute\">top</span> <span class=\"hljs-number\">50px</span>  //渐入动画<br></code></pre></td></tr></table></figure>\n\n<p>跑一便，似乎不太对，点击后弹窗直接显示，三秒后弹窗直接消失，没有出现动画效果。</p>\n<p>分析一下原因：由于动态插入 <code>DOM</code> 后直接添加了样式（绘制未完成），此时浏览器还未计算出 <code>CSS</code> 属性就直接给绑定了 <code>transition</code>，导致直接渲染了最终效果，给个异步延迟可以解决。关闭很好理解，没等渐出效果生效就直接删除 <code>DOM</code> 了。</p>\n<p>第二版代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">Message: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">&#123; text, type, timer &#125;</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;&lt;div class=&quot;zui-message &#x27;</span> + (type || <span class=\"hljs-string\">&quot;info&quot;</span>) + <span class=\"hljs-string\">&#x27;&quot;&gt;&lt;p&gt;&#x27;</span> + text + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&lt;/div&gt;&#x27;</span>;<br>  $(<span class=\"hljs-string\">&quot;body&quot;</span>).append(message);<br>  <span class=\"hljs-keyword\">var</span> e = $(<span class=\"hljs-string\">&quot;.zui-message&quot;</span>);<br>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    e.addClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>  &#125;, <span class=\"hljs-number\">0</span>);<br>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    e.removeClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      $(<span class=\"hljs-built_in\">this</span>).remove();<br>    &#125;, <span class=\"hljs-number\">0</span>);<br>  &#125;, timer || <span class=\"hljs-number\">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>一堆 <code>setTimeout(fn, 0)</code> 太丑了，绑定事件代替之。</p>\n<p>第三版代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">Message: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">&#123; text, type, timer &#125;</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;&lt;div class=&quot;zui-message &#x27;</span> + (type || <span class=\"hljs-string\">&quot;info&quot;</span>) + <span class=\"hljs-string\">&#x27;&quot;&gt;&lt;p&gt;&#x27;</span> + text + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&lt;/div&gt;&#x27;</span>;<br>  $(<span class=\"hljs-string\">&quot;body&quot;</span>).append(message);<br>  <span class=\"hljs-keyword\">var</span> e = $(<span class=\"hljs-string\">&quot;.zui-message&quot;</span>);<br>  e.ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    e.addClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      e.removeClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>      e.on(<span class=\"hljs-string\">&quot;transitionend webkitTransitionEnd&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        $(<span class=\"hljs-built_in\">this</span>).remove();<br>      &#125;);<br>    &#125;, timer || <span class=\"hljs-number\">3000</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>动画效果是出来了，但是感觉好卡，一帧一帧的。</p>\n<p>犯了个低级错误：用定位来做动画，浏览器主线程会不停地<strong>回流</strong>，改变元素位置，然后再计算下一个渲染位置。优化一下，使用 <code>transform</code> 代替，浏览器只会计算动画初始位置和结束位置，不会频繁触发<strong>回流</strong>。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-class\">.zui-message</span><br>  <span class=\"hljs-attribute\">top</span> <span class=\"hljs-number\">0px</span><br>  <span class=\"hljs-attribute\">left</span> <span class=\"hljs-number\">50%</span><br>  <span class=\"hljs-attribute\">opacity</span> <span class=\"hljs-number\">0</span>  //顺便加个淡入<br>  <span class=\"hljs-attribute\">transform</span> translate(-<span class=\"hljs-number\">50%</span>, -<span class=\"hljs-number\">50px</span>)<br>  <span class=\"hljs-attribute\">transition</span> opacity <span class=\"hljs-number\">0.3s</span>, transform <span class=\"hljs-number\">0.4s</span>, top <span class=\"hljs-number\">0.4s</span><br>  &amp;<span class=\"hljs-selector-class\">.in</span><br>    <span class=\"hljs-attribute\">transform</span> translate(-<span class=\"hljs-number\">50%</span>, <span class=\"hljs-number\">50px</span>)<br>    <span class=\"hljs-attribute\">opacity</span> <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>最后套个<strong>节流</strong>函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">carrier: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  $(<span class=\"hljs-string\">&quot;.j-carrier-btn&quot;</span>).on(<span class=\"hljs-string\">&quot;click&quot;</span>, utils.throttle(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;  <span class=\"hljs-comment\">//节流</span><br>    $(<span class=\"hljs-string\">&quot;.j-carrier-data&quot;</span>).select();<br>    <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&quot;Copy&quot;</span>);<br>    zui.Message(&#123; <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;已复制到剪切板&#x27;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;success&#x27;</span> &#125;);<br>  &#125;, <span class=\"hljs-number\">3000</span>));<br>&#125;<br></code></pre></td></tr></table></figure>","more":"<p>最近发现一个蛮有意思的现象：在掘金刷到了一篇写挺好的文章，看完顺手三连。然后过了几天，就能在各种渠道看到这篇文章，公众号、技术博客、朋友圈……最后发现，掘金那篇也不是原创，而是搬运来的。且原文明明标注了“BY-NC-SA”版权协议，大家转载的时候都不注明。</p>\n<blockquote>\n<p>甲：我们不生产文章，我们只是文章的搬运工。<br>乙：这篇文章写的很不错嘛，下一秒就是我的了。<br>丙：读书人的事，怎么能叫偷。<br>……</p>\n</blockquote>\n<p>有意思，那我就在主题写个小功能吧，帮助大家一键搬运。<del>（没有人会搬运我的水文）</del></p>\n<p>效果是酱紫滴：</p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125134.jpg\"  ><span class=\"image-caption\">版权声明</span></p>\n<p>（正常开启版权声明）</p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125519.jpg\"  ><span class=\"image-caption\">放弃抵抗</span></p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125724.jpg\"  ><span class=\"image-caption\">弹窗提示</span></p>\n<p>(放弃抵抗，大家随意)</p>\n<p>点击【一键打包带走】后，将全文（MarkDown、HTML、文本）复制到剪切板，并且弹窗提示。</p>\n<h3 id=\"内容获取\"><a href=\"#内容获取\" class=\"headerlink\" title=\"内容获取\"></a>内容获取</h3><h5 id=\"2020-09-06\"><a href=\"#2020-09-06\" class=\"headerlink\" title=\"2020.09.06\"></a>2020.09.06</h5><p>今日去 <code>hexo</code> 文档转了一圈，发现居然更新了（昨天更新的），新增了一些实用 <code>API</code>，相见恨晚啊！其中就有 <code>page.raw</code> 用来获取文章原始内容，也就是 <code>MarkDown</code> ，这样就不需要之前这么折腾了，so easy~</p>\n<p>直接贴代码（这部分是辅助函数 <code>Helper</code>）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;<br><br><span class=\"hljs-built_in\">module</span>.exports.carrier = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">hexo</span>) </span>&#123;<br>  hexo.extend.helper.register(<span class=\"hljs-string\">&#x27;carrier&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> config = hexo.theme.config;<br>    <span class=\"hljs-keyword\">if</span> (!config.carrier || !config.carrier.enable || !config.carrier.type) &#123;<br>      <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">var</span> data;<br>    <span class=\"hljs-keyword\">switch</span> (config.carrier.type) &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;html&#x27;</span>:<br>        data = <span class=\"hljs-built_in\">this</span>.page.content;<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;markdown&#x27;</span>:<br>        data = <span class=\"hljs-built_in\">this</span>.page.raw;<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;text&#x27;</span>:<br>        data = <span class=\"hljs-built_in\">this</span>.strip_html(<span class=\"hljs-built_in\">this</span>.page.content);<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">default</span>:<br>        data = <span class=\"hljs-string\">&#x27;没有抓到内容哦~&#x27;</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> data;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"2020-07-22\"><a href=\"#2020-07-22\" class=\"headerlink\" title=\"2020.07.22\"></a>2020.07.22</h5><p>已废弃……</p>\n<p>这部分挺难整的，主要是获取 <code>MarkDown</code> 原始内容比较难， <code>hexo</code> 渲染生成 <code>html</code> 之后是不会在生成文件中保留 <code>md</code> 源文件的。所以得想办法在  <code>hexo</code> 渲染的时候把 <code>md</code> 内容抓出来，翻了半天 <code>hexo</code> 官方文档，也没什么完美的思路。（吐槽一下，文档是真的简略。）</p>\n<p>最后在生命周期中找到这个函数：<code>hexo.extend.processor.register(rule, function(file)&#123; var data = file.readSync(); &#125;);</code></p>\n<p>主要是在渲染前，载入 <code>md</code> 文件的时候做一个监听，获取原始内容（也就是 MarkDown）。</p>\n<p>这里就有一个问题了，我们需要判断 <code>Front-Matter</code> 中的 <code>carrier</code> 字段是否为 <code>true</code> 来决定是否开启功能。但是使用 <code>processor</code> 劫持原始数据的时候，内容还未被渲染，所以拿不到该字段。另外就是拿到原始数据后，如何进行持久化保存？给出如下方案：</p>\n<ol>\n<li>不管三七二十一，劫持所有文章，全部保存为文件。后续通过运行时的生命周期获取 <code>carrier</code> 字段并判断是否启用。 （×）</li>\n<li>在原始文件中通过正则表达式手动解析 <code>carrier</code> 字段。选择性的保存文件，甚至直接插入 <code>DOM</code> 节点。 （√）</li>\n</ol>\n<p>最后选择了方案二，正则就比较头疼了……（作者正则水平不太好）</p>\n<p>需要解析的原文片段如下，需要解析出 <code>carrier</code> 字段。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-meta\">---</span><br><span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">hexo</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">开发文章搬运功能</span><br><span class=\"hljs-attr\">date:</span> <span class=\"hljs-number\">2020-07-25 17:14:33</span><br><span class=\"hljs-attr\">tags:</span> [<span class=\"hljs-string\">Hexo</span>, <span class=\"hljs-string\">主题</span>]<br><span class=\"hljs-attr\">keywords:</span> <span class=\"hljs-string\">hexo-theme-zhaoo,</span> <span class=\"hljs-string\">zhaoo,</span> <span class=\"hljs-string\">hexo,</span> <span class=\"hljs-string\">主题,</span> <span class=\"hljs-string\">文章搬运，</span> <span class=\"hljs-string\">一键复制</span><br><span class=\"hljs-attr\">categories:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">项目</span><br><span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">https://pic.izhaoo.com/20200718151502.jpg</span><br><span class=\"hljs-attr\">carrier:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-string\">文本内容……</span><br></code></pre></td></tr></table></figure>\n\n<p>网上搜到的正则是这样的，还需要做个改动：<code>^(---(?:\\r?\\n(?!--|\\s*$).*)*)\\s*((?:\\r?\\n(?!---).*)*\\r?\\n---)$</code> </p>\n<p>（不会正则就很难受了，书到用时方恨少~）</p>\n<h3 id=\"复制逻辑\"><a href=\"#复制逻辑\" class=\"headerlink\" title=\"复制逻辑\"></a>复制逻辑</h3><p>前面在 <code>hexo</code> 生命周期中（carrier()）获取到了文章内容，下面要完成用户点击链接后，复制到剪切板的交互逻辑。但是 <code>help</code> 函数只能在模板引擎渲染的时候使用，无法同 <code>js</code> 文件进行同步。（类别于 php函数 与 js）</p>\n<p>用个 <code>hack</code> 方法：在模板中创建一个隐藏的 <code>input</code> ，模板渲染的时候调用 <code>carrier()</code> 函数将文章内容加载到 <code>input</code> 中，然后在 <code>js</code> 中通过与 <code>input</code> 进行交互间接获取了内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><code class=\"hljs html\">&lt;% if (theme.carrier.enable &amp;&amp; page.carrier) &#123; %&gt;<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span>&gt;</span>版权声明：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span>本文作者放弃了版权，大家随意搬运，特此奉上搬运链接：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;javascript:;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;j-carrier-btn&quot;</span>&gt;</span>一键打包带走<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&lt;%= carrier(); %&gt;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;j-carrier-data carrier-data&quot;</span>&gt;</span><br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure>\n\n<p>接下来完成复制到剪切板功能。很简单，通过 <code>select</code> 选择 <code>input</code> 框，再通过 <code>document.execCommand(&quot;Copy&quot;)</code> 方法拷贝到剪切板。有个小问题，隐藏的 <code>input</code> 无法被 <code>select</code>，我们就让它变成小透明，假装隐藏了。比较常用的就是 <code>opacity: 0;</code> 设置透明，但是仍会占据文档流，顺便给个 <code>left: -100px</code> 拖出去。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-class\">.carrier-data</span><br>  <span class=\"hljs-attribute\">opacity</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attribute\">position</span> fixed<br>  <span class=\"hljs-attribute\">left</span> -<span class=\"hljs-number\">100px</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">carrier: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  $(<span class=\"hljs-string\">&quot;.j-carrier-btn&quot;</span>).on(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    $(<span class=\"hljs-string\">&quot;.j-carrier-data&quot;</span>).select();<br>    <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&quot;Copy&quot;</span>);<br>    alert(<span class=\"hljs-string\">&#x27;已经复制到剪切板&#x27;</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"消息弹窗\"><a href=\"#消息弹窗\" class=\"headerlink\" title=\"消息弹窗\"></a>消息弹窗</h3><p>文章复制到剪切板后，需要弹出消息弹窗，提示用户。</p>\n<p>主题开发之初我就给自己规定，不到万不得已，绝不用第三方库。（jQuery实在是没办法了）所以我们就自己封装一个消息弹窗组件。</p>\n<p>第一版代码：</p>\n<p>逻辑很清晰。触发弹窗后，先构造 <code>DOM</code> 并插入到 <code>body</code> （根），添加 <code>in</code> 样式（渐入动画）。若干秒后移除 <code>in</code> 样式（渐出动画），并删除 <code>DOM</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">Message: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">&#123; text, type, timer &#125;</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;&lt;div class=&quot;zui-message &#x27;</span> + (type || <span class=\"hljs-string\">&quot;info&quot;</span>) + <span class=\"hljs-string\">&#x27;&quot;&gt;&lt;p&gt;&#x27;</span> + text + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&lt;/div&gt;&#x27;</span>;<br>  $(<span class=\"hljs-string\">&quot;body&quot;</span>).append(message);<br>  <span class=\"hljs-keyword\">var</span> e = $(<span class=\"hljs-string\">&quot;.zui-message&quot;</span>);<br>  e.addClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    e.removeClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>    $(<span class=\"hljs-built_in\">this</span>).remove();<br>  &#125;, timer || <span class=\"hljs-number\">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">Message(&#123; <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;已复制到剪切板&#x27;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;success&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-variable\">$color</span>-info = <span class=\"hljs-number\">#909399</span><br><span class=\"hljs-variable\">$color</span>-success = <span class=\"hljs-number\">#67c23a</span><br><span class=\"hljs-variable\">$color</span>-danger = <span class=\"hljs-number\">#f56c6c</span><br><span class=\"hljs-variable\">$color</span>-warning = <span class=\"hljs-number\">#e6a23c</span><br><span class=\"hljs-variable\">$color</span>-info-bgc = <span class=\"hljs-number\">#edf2fc</span><br><span class=\"hljs-variable\">$color</span>-success-bgc = <span class=\"hljs-number\">#f0f9eb</span><br><span class=\"hljs-variable\">$color</span>-danger-bgc = <span class=\"hljs-number\">#fef0f0</span><br><span class=\"hljs-variable\">$color</span>-warning-bgc = <span class=\"hljs-number\">#fdf6ec</span><br><span class=\"hljs-selector-class\">.zui-message</span><br>  <span class=\"hljs-attribute\">position</span> fixed<br>  <span class=\"hljs-attribute\">margin</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attribute\">padding</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span><br>  <span class=\"hljs-attribute\">top</span> -<span class=\"hljs-number\">50px</span><br>  <span class=\"hljs-attribute\">left</span> <span class=\"hljs-number\">50%</span><br>  <span class=\"hljs-attribute\">min-width</span> <span class=\"hljs-number\">250px</span><br>  <span class=\"hljs-attribute\">overflow</span> hidden<br>  <span class=\"hljs-attribute\">z-index</span> <span class=\"hljs-number\">2020</span><br>  <span class=\"hljs-attribute\">display</span> flex<br>  <span class=\"hljs-attribute\">justify-content</span> center<br>  <span class=\"hljs-attribute\">align-items</span> center<br>  <span class=\"hljs-attribute\">transform</span> translateX(-<span class=\"hljs-number\">50%</span>)<br>  <span class=\"hljs-attribute\">transition</span> top <span class=\"hljs-number\">0.4s</span><br>  <span class=\"hljs-attribute\">background-color</span> <span class=\"hljs-variable\">$color</span>-info-bgc<br>  <span class=\"hljs-selector-tag\">p</span><br>    <span class=\"hljs-attribute\">margin</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attribute\">color</span> <span class=\"hljs-variable\">$color</span>-info<br>  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">$type</span> <span class=\"hljs-keyword\">in</span> info success danger warning  <span class=\"hljs-comment\">//遍历四种类型</span><br>    &amp;.&#123;<span class=\"hljs-variable\">$type</span>&#125;<br>      <span class=\"hljs-attribute\">background-color</span> convert(<span class=\"hljs-string\">&#x27;$color-&#x27;</span> + <span class=\"hljs-variable\">$type</span> + <span class=\"hljs-string\">&#x27;-bgc&#x27;</span>)  //拼接变量名，引入颜色<br>      <span class=\"hljs-selector-tag\">p</span><br>        <span class=\"hljs-attribute\">color</span> convert(<span class=\"hljs-string\">&#x27;$color-&#x27;</span> + <span class=\"hljs-variable\">$type</span>)<br>  &amp;<span class=\"hljs-selector-class\">.in</span><br>    <span class=\"hljs-attribute\">top</span> <span class=\"hljs-number\">50px</span>  //渐入动画<br></code></pre></td></tr></table></figure>\n\n<p>跑一便，似乎不太对，点击后弹窗直接显示，三秒后弹窗直接消失，没有出现动画效果。</p>\n<p>分析一下原因：由于动态插入 <code>DOM</code> 后直接添加了样式（绘制未完成），此时浏览器还未计算出 <code>CSS</code> 属性就直接给绑定了 <code>transition</code>，导致直接渲染了最终效果，给个异步延迟可以解决。关闭很好理解，没等渐出效果生效就直接删除 <code>DOM</code> 了。</p>\n<p>第二版代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">Message: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">&#123; text, type, timer &#125;</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;&lt;div class=&quot;zui-message &#x27;</span> + (type || <span class=\"hljs-string\">&quot;info&quot;</span>) + <span class=\"hljs-string\">&#x27;&quot;&gt;&lt;p&gt;&#x27;</span> + text + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&lt;/div&gt;&#x27;</span>;<br>  $(<span class=\"hljs-string\">&quot;body&quot;</span>).append(message);<br>  <span class=\"hljs-keyword\">var</span> e = $(<span class=\"hljs-string\">&quot;.zui-message&quot;</span>);<br>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    e.addClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>  &#125;, <span class=\"hljs-number\">0</span>);<br>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    e.removeClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      $(<span class=\"hljs-built_in\">this</span>).remove();<br>    &#125;, <span class=\"hljs-number\">0</span>);<br>  &#125;, timer || <span class=\"hljs-number\">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>一堆 <code>setTimeout(fn, 0)</code> 太丑了，绑定事件代替之。</p>\n<p>第三版代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">Message: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">&#123; text, type, timer &#125;</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&#x27;&lt;div class=&quot;zui-message &#x27;</span> + (type || <span class=\"hljs-string\">&quot;info&quot;</span>) + <span class=\"hljs-string\">&#x27;&quot;&gt;&lt;p&gt;&#x27;</span> + text + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&lt;/div&gt;&#x27;</span>;<br>  $(<span class=\"hljs-string\">&quot;body&quot;</span>).append(message);<br>  <span class=\"hljs-keyword\">var</span> e = $(<span class=\"hljs-string\">&quot;.zui-message&quot;</span>);<br>  e.ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    e.addClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      e.removeClass(<span class=\"hljs-string\">&quot;in&quot;</span>);<br>      e.on(<span class=\"hljs-string\">&quot;transitionend webkitTransitionEnd&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        $(<span class=\"hljs-built_in\">this</span>).remove();<br>      &#125;);<br>    &#125;, timer || <span class=\"hljs-number\">3000</span>);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>动画效果是出来了，但是感觉好卡，一帧一帧的。</p>\n<p>犯了个低级错误：用定位来做动画，浏览器主线程会不停地<strong>回流</strong>，改变元素位置，然后再计算下一个渲染位置。优化一下，使用 <code>transform</code> 代替，浏览器只会计算动画初始位置和结束位置，不会频繁触发<strong>回流</strong>。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-class\">.zui-message</span><br>  <span class=\"hljs-attribute\">top</span> <span class=\"hljs-number\">0px</span><br>  <span class=\"hljs-attribute\">left</span> <span class=\"hljs-number\">50%</span><br>  <span class=\"hljs-attribute\">opacity</span> <span class=\"hljs-number\">0</span>  //顺便加个淡入<br>  <span class=\"hljs-attribute\">transform</span> translate(-<span class=\"hljs-number\">50%</span>, -<span class=\"hljs-number\">50px</span>)<br>  <span class=\"hljs-attribute\">transition</span> opacity <span class=\"hljs-number\">0.3s</span>, transform <span class=\"hljs-number\">0.4s</span>, top <span class=\"hljs-number\">0.4s</span><br>  &amp;<span class=\"hljs-selector-class\">.in</span><br>    <span class=\"hljs-attribute\">transform</span> translate(-<span class=\"hljs-number\">50%</span>, <span class=\"hljs-number\">50px</span>)<br>    <span class=\"hljs-attribute\">opacity</span> <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>最后套个<strong>节流</strong>函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">carrier: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  $(<span class=\"hljs-string\">&quot;.j-carrier-btn&quot;</span>).on(<span class=\"hljs-string\">&quot;click&quot;</span>, utils.throttle(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;  <span class=\"hljs-comment\">//节流</span><br>    $(<span class=\"hljs-string\">&quot;.j-carrier-data&quot;</span>).select();<br>    <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&quot;Copy&quot;</span>);<br>    zui.Message(&#123; <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;已复制到剪切板&#x27;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;success&#x27;</span> &#125;);<br>  &#125;, <span class=\"hljs-number\">3000</span>));<br>&#125;<br></code></pre></td></tr></table></figure>","categories":[{"name":"项目","path":"api/categories/项目.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"主题","path":"api/tags/主题.json"}]}