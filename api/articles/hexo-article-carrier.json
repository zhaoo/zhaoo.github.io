{"title":"Hexo - 开发文章搬运功能","slug":"hexo-article-carrier","date":"2020-07-25T09:14:33.000Z","updated":"2020-09-06T06:38:40.000Z","comments":true,"path":"api/articles/hexo-article-carrier.json","realPath":"/2020/07/25/hexo-article-carrier/","excerpt":"我们不生产文章，我们只是文章的搬运工。","covers":["https://pic.izhaoo.com/20200727125134.jpg","https://pic.izhaoo.com/20200727125519.jpg","https://pic.izhaoo.com/20200727125724.jpg"],"cover":"https://pic.izhaoo.com/20200718151502.jpg","content":"<p>我们不生产文章，我们只是文章的搬运工。</p>\n<span id=\"more\"></span>\n\n<p>最近发现一个蛮有意思的现象：在掘金刷到了一篇写挺好的文章，看完顺手三连。然后过了几天，就能在各种渠道看到这篇文章，公众号、技术博客、朋友圈……最后发现，掘金那篇也不是原创，而是搬运来的。且原文明明标注了“BY-NC-SA”版权协议，大家转载的时候都不注明。</p>\n<blockquote>\n<p>甲：我们不生产文章，我们只是文章的搬运工。<br>乙：这篇文章写的很不错嘛，下一秒就是我的了。<br>丙：读书人的事，怎么能叫偷。<br>……</p>\n</blockquote>\n<p>有意思，那我就在主题写个小功能吧，帮助大家一键搬运。<del>（没有人会搬运我的水文）</del></p>\n<p>效果是酱紫滴：</p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125134.jpg\"  ><span class=\"image-caption\">版权声明</span></p>\n<p>（正常开启版权声明）</p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125519.jpg\"  ><span class=\"image-caption\">放弃抵抗</span></p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125724.jpg\"  ><span class=\"image-caption\">弹窗提示</span></p>\n<p>(放弃抵抗，大家随意)</p>\n<p>点击【一键打包带走】后，将全文（MarkDown、HTML、文本）复制到剪切板，并且弹窗提示。</p>\n<h3 id=\"内容获取\"><a href=\"#内容获取\" class=\"headerlink\" title=\"内容获取\"></a>内容获取</h3><h5 id=\"2020-09-06\"><a href=\"#2020-09-06\" class=\"headerlink\" title=\"2020.09.06\"></a>2020.09.06</h5><p>今日去 <code>hexo</code> 文档转了一圈，发现居然更新了（昨天更新的），新增了一些实用 <code>API</code>，相见恨晚啊！其中就有 <code>page.raw</code> 用来获取文章原始内容，也就是 <code>MarkDown</code> ，这样就不需要之前这么折腾了，so easy~</p>\n<p>直接贴代码（这部分是辅助函数 <code>Helper</code>）：</p>\n<pre><code class=\"javascript\">&#39;use strict&#39;;\n\nmodule.exports.carrier = function (hexo) &#123;\n  hexo.extend.helper.register(&#39;carrier&#39;, function () &#123;\n    var config = hexo.theme.config;\n    if (!config.carrier || !config.carrier.enable || !config.carrier.type) &#123;\n      return;\n    &#125;\n    var data;\n    switch (config.carrier.type) &#123;\n      case &#39;html&#39;:\n        data = this.page.content;\n        break;\n      case &#39;markdown&#39;:\n        data = this.page.raw;\n        break;\n      case &#39;text&#39;:\n        data = this.strip_html(this.page.content);\n        break;\n      default:\n        data = &#39;没有抓到内容哦~&#39;;\n    &#125;\n    return data;\n  &#125;);\n&#125;</code></pre>\n<h5 id=\"2020-07-22\"><a href=\"#2020-07-22\" class=\"headerlink\" title=\"2020.07.22\"></a>2020.07.22</h5><p>已废弃……</p>\n<p>这部分挺难整的，主要是获取 <code>MarkDown</code> 原始内容比较难， <code>hexo</code> 渲染生成 <code>html</code> 之后是不会在生成文件中保留 <code>md</code> 源文件的。所以得想办法在  <code>hexo</code> 渲染的时候把 <code>md</code> 内容抓出来，翻了半天 <code>hexo</code> 官方文档，也没什么完美的思路。（吐槽一下，文档是真的简略。）</p>\n<p>最后在生命周期中找到这个函数：<code>hexo.extend.processor.register(rule, function(file)&#123; var data = file.readSync(); &#125;);</code></p>\n<p>主要是在渲染前，载入 <code>md</code> 文件的时候做一个监听，获取原始内容（也就是 MarkDown）。</p>\n<p>这里就有一个问题了，我们需要判断 <code>Front-Matter</code> 中的 <code>carrier</code> 字段是否为 <code>true</code> 来决定是否开启功能。但是使用 <code>processor</code> 劫持原始数据的时候，内容还未被渲染，所以拿不到该字段。另外就是拿到原始数据后，如何进行持久化保存？给出如下方案：</p>\n<ol>\n<li>不管三七二十一，劫持所有文章，全部保存为文件。后续通过运行时的生命周期获取 <code>carrier</code> 字段并判断是否启用。 （×）</li>\n<li>在原始文件中通过正则表达式手动解析 <code>carrier</code> 字段。选择性的保存文件，甚至直接插入 <code>DOM</code> 节点。 （√）</li>\n</ol>\n<p>最后选择了方案二，正则就比较头疼了……（作者正则水平不太好）</p>\n<p>需要解析的原文片段如下，需要解析出 <code>carrier</code> 字段。</p>\n<pre><code class=\"yml\">---\ntitle: hexo - 开发文章搬运功能\ndate: 2020-07-25 17:14:33\ntags: [Hexo, 主题]\nkeywords: hexo-theme-zhaoo, zhaoo, hexo, 主题, 文章搬运， 一键复制\ncategories:\n- 项目\nimage: https://pic.izhaoo.com/20200718151502.jpg\ncarrier: true\n---\n\n文本内容……</code></pre>\n<p>网上搜到的正则是这样的，还需要做个改动：<code>^(---(?:\\r?\\n(?!--|\\s*$).*)*)\\s*((?:\\r?\\n(?!---).*)*\\r?\\n---)$</code> </p>\n<p>（不会正则就很难受了，书到用时方恨少~）</p>\n<h3 id=\"复制逻辑\"><a href=\"#复制逻辑\" class=\"headerlink\" title=\"复制逻辑\"></a>复制逻辑</h3><p>前面在 <code>hexo</code> 生命周期中（carrier()）获取到了文章内容，下面要完成用户点击链接后，复制到剪切板的交互逻辑。但是 <code>help</code> 函数只能在模板引擎渲染的时候使用，无法同 <code>js</code> 文件进行同步。（类别于 php函数 与 js）</p>\n<p>用个 <code>hack</code> 方法：在模板中创建一个隐藏的 <code>input</code> ，模板渲染的时候调用 <code>carrier()</code> 函数将文章内容加载到 <code>input</code> 中，然后在 <code>js</code> 中通过与 <code>input</code> 进行交互间接获取了内容。</p>\n<pre><code class=\"html\">&lt;% if (theme.carrier.enable &amp;&amp; page.carrier) &#123; %&gt;\n  &lt;li&gt;&lt;strong&gt;版权声明：&lt;/strong&gt;本文作者放弃了版权，大家随意搬运，特此奉上搬运链接：&lt;a href=&quot;javascript:;&quot; class=&quot;j-carrier-btn&quot;&gt;一键打包带走&lt;/a&gt;&lt;/li&gt;\n  &lt;input type=&quot;hidden&quot; value=&quot;&lt;%= carrier(); %&gt;&quot; class=&quot;j-carrier-data carrier-data&quot;&gt;\n&lt;% &#125; %&gt;</code></pre>\n<p>接下来完成复制到剪切板功能。很简单，通过 <code>select</code> 选择 <code>input</code> 框，再通过 <code>document.execCommand(&quot;Copy&quot;)</code> 方法拷贝到剪切板。有个小问题，隐藏的 <code>input</code> 无法被 <code>select</code>，我们就让它变成小透明，假装隐藏了。比较常用的就是 <code>opacity: 0;</code> 设置透明，但是仍会占据文档流，顺便给个 <code>left: -100px</code> 拖出去。</p>\n<pre><code class=\"stylus\">.carrier-data\n  opacity 0\n  position fixed\n  left -100px</code></pre>\n<pre><code class=\"javascript\">carrier: function () &#123;\n  $(&quot;.j-carrier-btn&quot;).on(&quot;click&quot;, function () &#123;\n    $(&quot;.j-carrier-data&quot;).select();\n    document.execCommand(&quot;Copy&quot;);\n    alert(&#39;已经复制到剪切板&#39;);\n  &#125;);\n&#125;</code></pre>\n<h3 id=\"消息弹窗\"><a href=\"#消息弹窗\" class=\"headerlink\" title=\"消息弹窗\"></a>消息弹窗</h3><p>文章复制到剪切板后，需要弹出消息弹窗，提示用户。</p>\n<p>主题开发之初我就给自己规定，不到万不得已，绝不用第三方库。（jQuery实在是没办法了）所以我们就自己封装一个消息弹窗组件。</p>\n<p>第一版代码：</p>\n<p>逻辑很清晰。触发弹窗后，先构造 <code>DOM</code> 并插入到 <code>body</code> （根），添加 <code>in</code> 样式（渐入动画）。若干秒后移除 <code>in</code> 样式（渐出动画），并删除 <code>DOM</code>。</p>\n<pre><code class=\"javascript\">Message: function (&#123; text, type, timer &#125;) &#123;\n  var message = &#39;&lt;div class=&quot;zui-message &#39; + (type || &quot;info&quot;) + &#39;&quot;&gt;&lt;p&gt;&#39; + text + &#39;&lt;/p&gt;&lt;/div&gt;&#39;;\n  $(&quot;body&quot;).append(message);\n  var e = $(&quot;.zui-message&quot;);\n  e.addClass(&quot;in&quot;);\n  setTimeout(function () &#123;\n    e.removeClass(&quot;in&quot;);\n    $(this).remove();\n  &#125;, timer || 3000);\n&#125;</code></pre>\n<pre><code class=\"javascript\">Message(&#123; text: &#39;已复制到剪切板&#39;, type: &#39;success&#39; &#125;);</code></pre>\n<pre><code class=\"stylus\">$color-info = #909399\n$color-success = #67c23a\n$color-danger = #f56c6c\n$color-warning = #e6a23c\n$color-info-bgc = #edf2fc\n$color-success-bgc = #f0f9eb\n$color-danger-bgc = #fef0f0\n$color-warning-bgc = #fdf6ec\n.zui-message\n  position fixed\n  margin 0\n  padding 10px 20px\n  top -50px\n  left 50%\n  min-width 250px\n  overflow hidden\n  z-index 2020\n  display flex\n  justify-content center\n  align-items center\n  transform translateX(-50%)\n  transition top 0.4s\n  background-color $color-info-bgc\n  p\n    margin 0\n    color $color-info\n  for $type in info success danger warning  //遍历四种类型\n    &amp;.&#123;$type&#125;\n      background-color convert(&#39;$color-&#39; + $type + &#39;-bgc&#39;)  //拼接变量名，引入颜色\n      p\n        color convert(&#39;$color-&#39; + $type)\n  &amp;.in\n    top 50px  //渐入动画</code></pre>\n<p>跑一便，似乎不太对，点击后弹窗直接显示，三秒后弹窗直接消失，没有出现动画效果。</p>\n<p>分析一下原因：由于动态插入 <code>DOM</code> 后直接添加了样式（绘制未完成），此时浏览器还未计算出 <code>CSS</code> 属性就直接给绑定了 <code>transition</code>，导致直接渲染了最终效果，给个异步延迟可以解决。关闭很好理解，没等渐出效果生效就直接删除 <code>DOM</code> 了。</p>\n<p>第二版代码：</p>\n<pre><code class=\"javascript\">Message: function (&#123; text, type, timer &#125;) &#123;\n  var message = &#39;&lt;div class=&quot;zui-message &#39; + (type || &quot;info&quot;) + &#39;&quot;&gt;&lt;p&gt;&#39; + text + &#39;&lt;/p&gt;&lt;/div&gt;&#39;;\n  $(&quot;body&quot;).append(message);\n  var e = $(&quot;.zui-message&quot;);\n  setTimeout(function () &#123;\n    e.addClass(&quot;in&quot;);\n  &#125;, 0);\n  setTimeout(function () &#123;\n    e.removeClass(&quot;in&quot;);\n    setTimeout(function () &#123;\n      $(this).remove();\n    &#125;, 0);\n  &#125;, timer || 3000);\n&#125;</code></pre>\n<p>一堆 <code>setTimeout(fn, 0)</code> 太丑了，绑定事件代替之。</p>\n<p>第三版代码：</p>\n<pre><code class=\"javascript\">Message: function (&#123; text, type, timer &#125;) &#123;\n  var message = &#39;&lt;div class=&quot;zui-message &#39; + (type || &quot;info&quot;) + &#39;&quot;&gt;&lt;p&gt;&#39; + text + &#39;&lt;/p&gt;&lt;/div&gt;&#39;;\n  $(&quot;body&quot;).append(message);\n  var e = $(&quot;.zui-message&quot;);\n  e.ready(function () &#123;\n    e.addClass(&quot;in&quot;);\n    setTimeout(function () &#123;\n      e.removeClass(&quot;in&quot;);\n      e.on(&quot;transitionend webkitTransitionEnd&quot;, function () &#123;\n        $(this).remove();\n      &#125;);\n    &#125;, timer || 3000);\n  &#125;);\n&#125;</code></pre>\n<p>动画效果是出来了，但是感觉好卡，一帧一帧的。</p>\n<p>犯了个低级错误：用定位来做动画，浏览器主线程会不停地<strong>回流</strong>，改变元素位置，然后再计算下一个渲染位置。优化一下，使用 <code>transform</code> 代替，浏览器只会计算动画初始位置和结束位置，不会频繁触发<strong>回流</strong>。</p>\n<pre><code class=\"stylus\">.zui-message\n  top 0px\n  left 50%\n  opacity 0  //顺便加个淡入\n  transform translate(-50%, -50px)\n  transition opacity 0.3s, transform 0.4s, top 0.4s\n  &amp;.in\n    transform translate(-50%, 50px)\n    opacity 1</code></pre>\n<p>最后套个<strong>节流</strong>函数：</p>\n<pre><code class=\"javascript\">carrier: function () &#123;\n  $(&quot;.j-carrier-btn&quot;).on(&quot;click&quot;, utils.throttle(function () &#123;  //节流\n    $(&quot;.j-carrier-data&quot;).select();\n    document.execCommand(&quot;Copy&quot;);\n    zui.Message(&#123; text: &#39;已复制到剪切板&#39;, type: &#39;success&#39; &#125;);\n  &#125;, 3000));\n&#125;</code></pre>\n","more":"<p>最近发现一个蛮有意思的现象：在掘金刷到了一篇写挺好的文章，看完顺手三连。然后过了几天，就能在各种渠道看到这篇文章，公众号、技术博客、朋友圈……最后发现，掘金那篇也不是原创，而是搬运来的。且原文明明标注了“BY-NC-SA”版权协议，大家转载的时候都不注明。</p>\n<blockquote>\n<p>甲：我们不生产文章，我们只是文章的搬运工。<br>乙：这篇文章写的很不错嘛，下一秒就是我的了。<br>丙：读书人的事，怎么能叫偷。<br>……</p>\n</blockquote>\n<p>有意思，那我就在主题写个小功能吧，帮助大家一键搬运。<del>（没有人会搬运我的水文）</del></p>\n<p>效果是酱紫滴：</p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125134.jpg\"  ><span class=\"image-caption\">版权声明</span></p>\n<p>（正常开启版权声明）</p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125519.jpg\"  ><span class=\"image-caption\">放弃抵抗</span></p>\n<p><img  src=\"https://pic.izhaoo.com/20200727125724.jpg\"  ><span class=\"image-caption\">弹窗提示</span></p>\n<p>(放弃抵抗，大家随意)</p>\n<p>点击【一键打包带走】后，将全文（MarkDown、HTML、文本）复制到剪切板，并且弹窗提示。</p>\n<h3 id=\"内容获取\"><a href=\"#内容获取\" class=\"headerlink\" title=\"内容获取\"></a>内容获取</h3><h5 id=\"2020-09-06\"><a href=\"#2020-09-06\" class=\"headerlink\" title=\"2020.09.06\"></a>2020.09.06</h5><p>今日去 <code>hexo</code> 文档转了一圈，发现居然更新了（昨天更新的），新增了一些实用 <code>API</code>，相见恨晚啊！其中就有 <code>page.raw</code> 用来获取文章原始内容，也就是 <code>MarkDown</code> ，这样就不需要之前这么折腾了，so easy~</p>\n<p>直接贴代码（这部分是辅助函数 <code>Helper</code>）：</p>\n<pre><code class=\"javascript\">&#39;use strict&#39;;\n\nmodule.exports.carrier = function (hexo) &#123;\n  hexo.extend.helper.register(&#39;carrier&#39;, function () &#123;\n    var config = hexo.theme.config;\n    if (!config.carrier || !config.carrier.enable || !config.carrier.type) &#123;\n      return;\n    &#125;\n    var data;\n    switch (config.carrier.type) &#123;\n      case &#39;html&#39;:\n        data = this.page.content;\n        break;\n      case &#39;markdown&#39;:\n        data = this.page.raw;\n        break;\n      case &#39;text&#39;:\n        data = this.strip_html(this.page.content);\n        break;\n      default:\n        data = &#39;没有抓到内容哦~&#39;;\n    &#125;\n    return data;\n  &#125;);\n&#125;</code></pre>\n<h5 id=\"2020-07-22\"><a href=\"#2020-07-22\" class=\"headerlink\" title=\"2020.07.22\"></a>2020.07.22</h5><p>已废弃……</p>\n<p>这部分挺难整的，主要是获取 <code>MarkDown</code> 原始内容比较难， <code>hexo</code> 渲染生成 <code>html</code> 之后是不会在生成文件中保留 <code>md</code> 源文件的。所以得想办法在  <code>hexo</code> 渲染的时候把 <code>md</code> 内容抓出来，翻了半天 <code>hexo</code> 官方文档，也没什么完美的思路。（吐槽一下，文档是真的简略。）</p>\n<p>最后在生命周期中找到这个函数：<code>hexo.extend.processor.register(rule, function(file)&#123; var data = file.readSync(); &#125;);</code></p>\n<p>主要是在渲染前，载入 <code>md</code> 文件的时候做一个监听，获取原始内容（也就是 MarkDown）。</p>\n<p>这里就有一个问题了，我们需要判断 <code>Front-Matter</code> 中的 <code>carrier</code> 字段是否为 <code>true</code> 来决定是否开启功能。但是使用 <code>processor</code> 劫持原始数据的时候，内容还未被渲染，所以拿不到该字段。另外就是拿到原始数据后，如何进行持久化保存？给出如下方案：</p>\n<ol>\n<li>不管三七二十一，劫持所有文章，全部保存为文件。后续通过运行时的生命周期获取 <code>carrier</code> 字段并判断是否启用。 （×）</li>\n<li>在原始文件中通过正则表达式手动解析 <code>carrier</code> 字段。选择性的保存文件，甚至直接插入 <code>DOM</code> 节点。 （√）</li>\n</ol>\n<p>最后选择了方案二，正则就比较头疼了……（作者正则水平不太好）</p>\n<p>需要解析的原文片段如下，需要解析出 <code>carrier</code> 字段。</p>\n<pre><code class=\"yml\">---\ntitle: hexo - 开发文章搬运功能\ndate: 2020-07-25 17:14:33\ntags: [Hexo, 主题]\nkeywords: hexo-theme-zhaoo, zhaoo, hexo, 主题, 文章搬运， 一键复制\ncategories:\n- 项目\nimage: https://pic.izhaoo.com/20200718151502.jpg\ncarrier: true\n---\n\n文本内容……</code></pre>\n<p>网上搜到的正则是这样的，还需要做个改动：<code>^(---(?:\\r?\\n(?!--|\\s*$).*)*)\\s*((?:\\r?\\n(?!---).*)*\\r?\\n---)$</code> </p>\n<p>（不会正则就很难受了，书到用时方恨少~）</p>\n<h3 id=\"复制逻辑\"><a href=\"#复制逻辑\" class=\"headerlink\" title=\"复制逻辑\"></a>复制逻辑</h3><p>前面在 <code>hexo</code> 生命周期中（carrier()）获取到了文章内容，下面要完成用户点击链接后，复制到剪切板的交互逻辑。但是 <code>help</code> 函数只能在模板引擎渲染的时候使用，无法同 <code>js</code> 文件进行同步。（类别于 php函数 与 js）</p>\n<p>用个 <code>hack</code> 方法：在模板中创建一个隐藏的 <code>input</code> ，模板渲染的时候调用 <code>carrier()</code> 函数将文章内容加载到 <code>input</code> 中，然后在 <code>js</code> 中通过与 <code>input</code> 进行交互间接获取了内容。</p>\n<pre><code class=\"html\">&lt;% if (theme.carrier.enable &amp;&amp; page.carrier) &#123; %&gt;\n  &lt;li&gt;&lt;strong&gt;版权声明：&lt;/strong&gt;本文作者放弃了版权，大家随意搬运，特此奉上搬运链接：&lt;a href=&quot;javascript:;&quot; class=&quot;j-carrier-btn&quot;&gt;一键打包带走&lt;/a&gt;&lt;/li&gt;\n  &lt;input type=&quot;hidden&quot; value=&quot;&lt;%= carrier(); %&gt;&quot; class=&quot;j-carrier-data carrier-data&quot;&gt;\n&lt;% &#125; %&gt;</code></pre>\n<p>接下来完成复制到剪切板功能。很简单，通过 <code>select</code> 选择 <code>input</code> 框，再通过 <code>document.execCommand(&quot;Copy&quot;)</code> 方法拷贝到剪切板。有个小问题，隐藏的 <code>input</code> 无法被 <code>select</code>，我们就让它变成小透明，假装隐藏了。比较常用的就是 <code>opacity: 0;</code> 设置透明，但是仍会占据文档流，顺便给个 <code>left: -100px</code> 拖出去。</p>\n<pre><code class=\"stylus\">.carrier-data\n  opacity 0\n  position fixed\n  left -100px</code></pre>\n<pre><code class=\"javascript\">carrier: function () &#123;\n  $(&quot;.j-carrier-btn&quot;).on(&quot;click&quot;, function () &#123;\n    $(&quot;.j-carrier-data&quot;).select();\n    document.execCommand(&quot;Copy&quot;);\n    alert(&#39;已经复制到剪切板&#39;);\n  &#125;);\n&#125;</code></pre>\n<h3 id=\"消息弹窗\"><a href=\"#消息弹窗\" class=\"headerlink\" title=\"消息弹窗\"></a>消息弹窗</h3><p>文章复制到剪切板后，需要弹出消息弹窗，提示用户。</p>\n<p>主题开发之初我就给自己规定，不到万不得已，绝不用第三方库。（jQuery实在是没办法了）所以我们就自己封装一个消息弹窗组件。</p>\n<p>第一版代码：</p>\n<p>逻辑很清晰。触发弹窗后，先构造 <code>DOM</code> 并插入到 <code>body</code> （根），添加 <code>in</code> 样式（渐入动画）。若干秒后移除 <code>in</code> 样式（渐出动画），并删除 <code>DOM</code>。</p>\n<pre><code class=\"javascript\">Message: function (&#123; text, type, timer &#125;) &#123;\n  var message = &#39;&lt;div class=&quot;zui-message &#39; + (type || &quot;info&quot;) + &#39;&quot;&gt;&lt;p&gt;&#39; + text + &#39;&lt;/p&gt;&lt;/div&gt;&#39;;\n  $(&quot;body&quot;).append(message);\n  var e = $(&quot;.zui-message&quot;);\n  e.addClass(&quot;in&quot;);\n  setTimeout(function () &#123;\n    e.removeClass(&quot;in&quot;);\n    $(this).remove();\n  &#125;, timer || 3000);\n&#125;</code></pre>\n<pre><code class=\"javascript\">Message(&#123; text: &#39;已复制到剪切板&#39;, type: &#39;success&#39; &#125;);</code></pre>\n<pre><code class=\"stylus\">$color-info = #909399\n$color-success = #67c23a\n$color-danger = #f56c6c\n$color-warning = #e6a23c\n$color-info-bgc = #edf2fc\n$color-success-bgc = #f0f9eb\n$color-danger-bgc = #fef0f0\n$color-warning-bgc = #fdf6ec\n.zui-message\n  position fixed\n  margin 0\n  padding 10px 20px\n  top -50px\n  left 50%\n  min-width 250px\n  overflow hidden\n  z-index 2020\n  display flex\n  justify-content center\n  align-items center\n  transform translateX(-50%)\n  transition top 0.4s\n  background-color $color-info-bgc\n  p\n    margin 0\n    color $color-info\n  for $type in info success danger warning  //遍历四种类型\n    &amp;.&#123;$type&#125;\n      background-color convert(&#39;$color-&#39; + $type + &#39;-bgc&#39;)  //拼接变量名，引入颜色\n      p\n        color convert(&#39;$color-&#39; + $type)\n  &amp;.in\n    top 50px  //渐入动画</code></pre>\n<p>跑一便，似乎不太对，点击后弹窗直接显示，三秒后弹窗直接消失，没有出现动画效果。</p>\n<p>分析一下原因：由于动态插入 <code>DOM</code> 后直接添加了样式（绘制未完成），此时浏览器还未计算出 <code>CSS</code> 属性就直接给绑定了 <code>transition</code>，导致直接渲染了最终效果，给个异步延迟可以解决。关闭很好理解，没等渐出效果生效就直接删除 <code>DOM</code> 了。</p>\n<p>第二版代码：</p>\n<pre><code class=\"javascript\">Message: function (&#123; text, type, timer &#125;) &#123;\n  var message = &#39;&lt;div class=&quot;zui-message &#39; + (type || &quot;info&quot;) + &#39;&quot;&gt;&lt;p&gt;&#39; + text + &#39;&lt;/p&gt;&lt;/div&gt;&#39;;\n  $(&quot;body&quot;).append(message);\n  var e = $(&quot;.zui-message&quot;);\n  setTimeout(function () &#123;\n    e.addClass(&quot;in&quot;);\n  &#125;, 0);\n  setTimeout(function () &#123;\n    e.removeClass(&quot;in&quot;);\n    setTimeout(function () &#123;\n      $(this).remove();\n    &#125;, 0);\n  &#125;, timer || 3000);\n&#125;</code></pre>\n<p>一堆 <code>setTimeout(fn, 0)</code> 太丑了，绑定事件代替之。</p>\n<p>第三版代码：</p>\n<pre><code class=\"javascript\">Message: function (&#123; text, type, timer &#125;) &#123;\n  var message = &#39;&lt;div class=&quot;zui-message &#39; + (type || &quot;info&quot;) + &#39;&quot;&gt;&lt;p&gt;&#39; + text + &#39;&lt;/p&gt;&lt;/div&gt;&#39;;\n  $(&quot;body&quot;).append(message);\n  var e = $(&quot;.zui-message&quot;);\n  e.ready(function () &#123;\n    e.addClass(&quot;in&quot;);\n    setTimeout(function () &#123;\n      e.removeClass(&quot;in&quot;);\n      e.on(&quot;transitionend webkitTransitionEnd&quot;, function () &#123;\n        $(this).remove();\n      &#125;);\n    &#125;, timer || 3000);\n  &#125;);\n&#125;</code></pre>\n<p>动画效果是出来了，但是感觉好卡，一帧一帧的。</p>\n<p>犯了个低级错误：用定位来做动画，浏览器主线程会不停地<strong>回流</strong>，改变元素位置，然后再计算下一个渲染位置。优化一下，使用 <code>transform</code> 代替，浏览器只会计算动画初始位置和结束位置，不会频繁触发<strong>回流</strong>。</p>\n<pre><code class=\"stylus\">.zui-message\n  top 0px\n  left 50%\n  opacity 0  //顺便加个淡入\n  transform translate(-50%, -50px)\n  transition opacity 0.3s, transform 0.4s, top 0.4s\n  &amp;.in\n    transform translate(-50%, 50px)\n    opacity 1</code></pre>\n<p>最后套个<strong>节流</strong>函数：</p>\n<pre><code class=\"javascript\">carrier: function () &#123;\n  $(&quot;.j-carrier-btn&quot;).on(&quot;click&quot;, utils.throttle(function () &#123;  //节流\n    $(&quot;.j-carrier-data&quot;).select();\n    document.execCommand(&quot;Copy&quot;);\n    zui.Message(&#123; text: &#39;已复制到剪切板&#39;, type: &#39;success&#39; &#125;);\n  &#125;, 3000));\n&#125;</code></pre>","categories":[{"name":"项目","path":"api/categories/项目.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"主题","path":"api/tags/主题.json"}]}