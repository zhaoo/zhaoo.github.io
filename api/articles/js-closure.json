{"title":"JS - 执行上下文/作用域链/闭包","slug":"js-closure","date":"2020-04-12T09:13:23.000Z","updated":"2020-05-03T10:31:06.000Z","comments":true,"path":"api/articles/js-closure.json","realPath":"/2020/04/12/js-closure/","excerpt":"对于JavaScript中执行上下文、作用域、闭包等概念的一些思考。","covers":["https://pic.izhaoo.com/20200412192325.jpg","https://pic.izhaoo.com/20200412193736.jpg"],"cover":"https://pic.izhaoo.com/20200421201200.jpg","content":"<p>对于<code>JavaScript</code>中<code>执行上下文</code>、<code>作用域</code>、<code>闭包</code>等概念的一些思考。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h3><p><code>执行上下文</code>(Execution Context)用一句话说就是JS代码执行时的抽象<code>环境</code>。</p>\n<p>例如在函数被 <em><code>调用</code></em> 时会生成一个<code>函数执行上下文</code>，就是这个函数的环境，这里强调 <em><code>调用</code></em> ，就是说是运行时的动态过程。</p>\n<p>举个栗子，一个国家就好比是一个<code>执行上下文</code>，公民就好比是<code>变量</code>，许多公民(不出境的那种)在国家这个范围内活动；再往下<code>执行上下文</code>有嵌套，那中国就可以比作<code>全局执行上下文</code>，浙江省就是第一层<code>函数执行上下文</code>，杭州市就是第二层<code>函数执行上下文</code>。</p>\n<h5 id=\"三种类型\"><a href=\"#三种类型\" class=\"headerlink\" title=\"三种类型\"></a>三种类型</h5><p>JS中一共有三种执行上下文类型：</p>\n<ul>\n<li><p><strong>全局执行上下文</strong>: 默认的最底层环境，任何不在<code>函数</code>或<code>eval</code>内部的代码都属于<code>全局执行上下文</code>，一段程序中只有一个全局执行上下文。</p>\n</li>\n<li><p><strong>函数执行上下文</strong>: 当一个函数被 <em><code>调用</code></em> 时，就会创建一个<code>函数执行上下文</code>，并进行一些准备工作。</p>\n</li>\n<li><p><strong>eval执行上下文</strong>: 执行eval函数时会创建一个<code>eval执行上下文</code>，类似于<code>函数执行上下文</code>。因为实际中用到eval的情况比较少，下文不再讨论。</p>\n</li>\n</ul>\n<p>以下代码创建的执行上下文如图所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">2</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">3</span>;<br>  bb();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bb</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-number\">4</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cc</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> e = <span class=\"hljs-number\">5</span>;<br>&#125;<br><br>aa();<br>cc();<br></code></pre></td></tr></table></figure>\n\n<div style=\"text-align: center\">\n  <img  src=\"https://pic.izhaoo.com/20200412192325.jpg\"   /><span class=\"image-caption\">三种类型的执行上下文</span>\n</div>\n\n<h5 id=\"执行栈\"><a href=\"#执行栈\" class=\"headerlink\" title=\"执行栈\"></a>执行栈</h5><p>在JS中，是以<code>栈</code>(后进先出)这种数据结构存储<code>执行上下文</code>的，也就是我们所说的 <em><code>执行栈</code></em>。</p>\n<p>执行JS代码时，JS引擎首先会创建一个<code>全局执行上下文</code>，并压入栈底；之后每当 <em><code>调用</code></em> 一个函数时，都会为该函数创建一个<code>函数执行上下文</code>，并压入栈。</p>\n<p>之后引擎会执行栈顶的函数，函数执行结束后，该<code>函数执行上下文</code>从栈中弹出；再执行下一个函数，直到全部出栈。</p>\n<p>还是这段代码，执行栈如图所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">2</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">3</span>;<br>  bb();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bb</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-number\">4</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cc</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> e = <span class=\"hljs-number\">5</span>;<br>&#125;<br><br>aa();<br>cc();<br></code></pre></td></tr></table></figure>\n\n<div style=\"text-align: center\">\n  <img  src=\"https://pic.izhaoo.com/20200412193736.jpg\"  /><span class=\"image-caption\">执行栈</span>\n</div>\n\n<h5 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h5><p>执行上下文的执行过程分为两个阶段：<code>创建阶段</code>和<code>执行阶段</code>，这部分内容后面会解释到。</p>\n<ul>\n<li><p><strong>创建阶段</strong>: 例如调用函数时，在执行代码前，将创建执行上下文，会处理三件事: <code>绑定this</code> → <code>创建词法环境</code> → <code>创建变量环境</code></p>\n</li>\n<li><p><strong>执行阶段</strong>: 对变量进行赋值，执行代码。</p>\n</li>\n</ul>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><h5 id=\"静态作用域\"><a href=\"#静态作用域\" class=\"headerlink\" title=\"静态作用域\"></a>静态作用域</h5><p>作用域是指程序代码中定义变量的区域，JS中采用的是<code>静态作用域</code>(词法作用域)。作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p>\n<p>还是上面的栗子，<code>执行上下文</code>是国家这个概念上的环境，<code>作用域</code>就是这个国家的实际作用范围；比如中国就是雄鸡这块版图，人民群众在没办护照的情况下是不能跑到国外去的。</p>\n<p>静态作用域 vs 动态作用域</p>\n<ul>\n<li><p>静态作用域: 作用域在函数<strong>定义</strong>时决定</p>\n</li>\n<li><p>动态作用域: 作用域在函数<strong>调用</strong>时决定</p>\n</li>\n</ul>\n<p>因为JS是<code>静态作用域</code>，所以直接看代码中变量的定义位置即可，而不是看调用过程。</p>\n<p>在以下代码中，运行会输出 1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(a);  <span class=\"hljs-comment\">// 输出 1</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bb</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;<br>  aa();<br>&#125;<br><br>bb();<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"作用域链-1\"><a href=\"#作用域链-1\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h5><p>在代码中，我们经常会进行函数嵌套，<code>作用域</code>会随着嵌套结构向顶层链接，形成<code>作用域链</code>。这个概念和<code>原型链</code>类似。</p>\n<p>还是看代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bb</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(a + b);  <span class=\"hljs-comment\">// 输出 1和2</span><br>  &#125;<br>  bb();<br>&#125;<br><br>aa();<br></code></pre></td></tr></table></figure>\n\n<p>在函数<code>bb()作用域</code>中并没有定义变量<code>a</code>和<code>b</code>，所以会通过<code>作用域链</code>往上层查找，在父函数<code>aa()作用域</code>中找到<code>a</code>，在<code>全局作用域</code>中找到<code>b</code>，最后输出。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>上文我们介绍了<code>执行上下文</code>和<code>作用域链</code>，终于到了<code>闭包</code>。</p>\n<p>ES5中变量只有两种作用域：函数外部，<code>全局变量</code>；函数内部，<code>局部变量</code>。且变量提升机制还会将变量声明提升到它所在作用域的顶端去执行。</p>\n<p>函数内部的变量都是局部变量，在函数外部是<strong>无法访问</strong>的。</p>\n<p>闭包其实就是充当一个桥梁的作用，从外部可以间接地访问到内部的变量。简单来讲，就是在一个函数内部返回另外函数，通过返回的函数去获取主函数内部的局部变量。</p>\n<p>先看一段代码: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> private = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 局部变量</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> private;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log(private);  <span class=\"hljs-comment\">// private is not defined</span><br><br><span class=\"hljs-keyword\">var</span> inner = outer();  <span class=\"hljs-comment\">// 将外层 outer 函数返回的匿名函数赋值给 inner</span><br><span class=\"hljs-built_in\">console</span>.log(inner());  <span class=\"hljs-comment\">// 1</span><br></code></pre></td></tr></table></figure>\n\n<p>在<code>outer</code>函数中定义的<code>private</code>局部变量，在函数外部直接访问是无法访问到的。但是我们在函数中能够访问这个局部变量，并通过一个<code>匿名函数</code>返回，在外边调用<code>outer()</code>接收这个匿名函数，并且赋值给外部的<code>inner</code>变量，再调用<code>inner()</code>即可获取到内部的<code>private</code>局部变量了。</p>\n<p>打个比方，函数就好比是一个集装箱，外面的人拿不到里面的物资。这时候甩出来一个小背包，装着里面的部分物资，外面的人就可以在小背包中拿到了。</p>\n<p>闭包可以隐藏函数内部细节，界定<code>公共变量 (public)</code>和<code>私有变量 (private)</code>。配合<code>匿名函数</code>和<code>立即执行函数</code>，常用来实现ES5中的<strong>模块化</strong>。</p>\n<h5 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h5><p>正常函数执行完毕后，里面声明的变量被垃圾回收处理掉，但是闭包可以让作用域里的变量，在函数执行完之后依旧保持没有被垃圾回收处理掉，从而被外部访问。因此闭包也可以将临时变量“缓存”在内存中。</p>\n<h5 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h5><p>前面提到闭包会暂存变量，不被垃圾回收，很直接的就会想到，闭包可能会造成<strong>内存泄漏</strong>。（很多文章都会这么说，包括我在面试中也讲到过。）</p>\n<p>其实这个说法是不确切的，内存泄漏是指<code>不再使用的变量没有被释放</code>。而闭包函数中的<code>局部变量</code>，在之后是有可能使用的，并不是“垃圾变量”，所以称不上内存泄漏。</p>\n<p>可以这么说，这一特性导致了闭包将会消耗额外的内存，因此谨慎使用。</p>\n<h5 id=\"个人体会\"><a href=\"#个人体会\" class=\"headerlink\" title=\"个人体会\"></a>个人体会</h5><p>文中其实我还隐藏了很多细节。比如：执行上下文的概念对象<code>ExecutionContext</code>、作用域链中的<code>[[scope]]</code>等。有兴趣的话应该逐一地去深入了解。（详见文末链接）</p>\n<p><code>执行上下文</code>、<code>作用域链</code>、<code>闭包</code>、<code>this</code>等概念。之前我是通过看面经的方式了解了点皮毛，所以面试过程中总是讲不清楚，一问一答就结束了。（我看你是完全不懂嘛）</p>\n<p>后来我看了它们的实现原理，将它们理了一遍，感觉茅塞顿开，面试的时候就可以滔滔不绝了。其实这些概念都是一环扣一环的，串起来理解就会很直观。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><blockquote>\n<p><a href=\"https://juejin.im/post/5ba32171f265da0ab719a6d7\">[译] 理解 JavaScript 中的执行上下文和执行栈</a><br><a href=\"https://github.com/mqyqingfeng/Blog/issues/3\">JavaScript深入之词法作用域和动态作用域</a><br><a href=\"https://github.com/mqyqingfeng/Blog/issues/6\">JavaScript深入之作用域链</a><br><a href=\"https://zhuanlan.zhihu.com/p/56490498\">我从来不理解JavaScript闭包，直到有人这样向我解释它…</a></p>\n</blockquote>\n","more":"<h3 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h3><p><code>执行上下文</code>(Execution Context)用一句话说就是JS代码执行时的抽象<code>环境</code>。</p>\n<p>例如在函数被 <em><code>调用</code></em> 时会生成一个<code>函数执行上下文</code>，就是这个函数的环境，这里强调 <em><code>调用</code></em> ，就是说是运行时的动态过程。</p>\n<p>举个栗子，一个国家就好比是一个<code>执行上下文</code>，公民就好比是<code>变量</code>，许多公民(不出境的那种)在国家这个范围内活动；再往下<code>执行上下文</code>有嵌套，那中国就可以比作<code>全局执行上下文</code>，浙江省就是第一层<code>函数执行上下文</code>，杭州市就是第二层<code>函数执行上下文</code>。</p>\n<h5 id=\"三种类型\"><a href=\"#三种类型\" class=\"headerlink\" title=\"三种类型\"></a>三种类型</h5><p>JS中一共有三种执行上下文类型：</p>\n<ul>\n<li><p><strong>全局执行上下文</strong>: 默认的最底层环境，任何不在<code>函数</code>或<code>eval</code>内部的代码都属于<code>全局执行上下文</code>，一段程序中只有一个全局执行上下文。</p>\n</li>\n<li><p><strong>函数执行上下文</strong>: 当一个函数被 <em><code>调用</code></em> 时，就会创建一个<code>函数执行上下文</code>，并进行一些准备工作。</p>\n</li>\n<li><p><strong>eval执行上下文</strong>: 执行eval函数时会创建一个<code>eval执行上下文</code>，类似于<code>函数执行上下文</code>。因为实际中用到eval的情况比较少，下文不再讨论。</p>\n</li>\n</ul>\n<p>以下代码创建的执行上下文如图所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">2</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">3</span>;<br>  bb();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bb</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-number\">4</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cc</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> e = <span class=\"hljs-number\">5</span>;<br>&#125;<br><br>aa();<br>cc();<br></code></pre></td></tr></table></figure>\n\n<div style=\"text-align: center\">\n  <img  src=\"https://pic.izhaoo.com/20200412192325.jpg\"   /><span class=\"image-caption\">三种类型的执行上下文</span>\n</div>\n\n<h5 id=\"执行栈\"><a href=\"#执行栈\" class=\"headerlink\" title=\"执行栈\"></a>执行栈</h5><p>在JS中，是以<code>栈</code>(后进先出)这种数据结构存储<code>执行上下文</code>的，也就是我们所说的 <em><code>执行栈</code></em>。</p>\n<p>执行JS代码时，JS引擎首先会创建一个<code>全局执行上下文</code>，并压入栈底；之后每当 <em><code>调用</code></em> 一个函数时，都会为该函数创建一个<code>函数执行上下文</code>，并压入栈。</p>\n<p>之后引擎会执行栈顶的函数，函数执行结束后，该<code>函数执行上下文</code>从栈中弹出；再执行下一个函数，直到全部出栈。</p>\n<p>还是这段代码，执行栈如图所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">2</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">3</span>;<br>  bb();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bb</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-number\">4</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cc</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> e = <span class=\"hljs-number\">5</span>;<br>&#125;<br><br>aa();<br>cc();<br></code></pre></td></tr></table></figure>\n\n<div style=\"text-align: center\">\n  <img  src=\"https://pic.izhaoo.com/20200412193736.jpg\"  /><span class=\"image-caption\">执行栈</span>\n</div>\n\n<h5 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h5><p>执行上下文的执行过程分为两个阶段：<code>创建阶段</code>和<code>执行阶段</code>，这部分内容后面会解释到。</p>\n<ul>\n<li><p><strong>创建阶段</strong>: 例如调用函数时，在执行代码前，将创建执行上下文，会处理三件事: <code>绑定this</code> → <code>创建词法环境</code> → <code>创建变量环境</code></p>\n</li>\n<li><p><strong>执行阶段</strong>: 对变量进行赋值，执行代码。</p>\n</li>\n</ul>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><h5 id=\"静态作用域\"><a href=\"#静态作用域\" class=\"headerlink\" title=\"静态作用域\"></a>静态作用域</h5><p>作用域是指程序代码中定义变量的区域，JS中采用的是<code>静态作用域</code>(词法作用域)。作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p>\n<p>还是上面的栗子，<code>执行上下文</code>是国家这个概念上的环境，<code>作用域</code>就是这个国家的实际作用范围；比如中国就是雄鸡这块版图，人民群众在没办护照的情况下是不能跑到国外去的。</p>\n<p>静态作用域 vs 动态作用域</p>\n<ul>\n<li><p>静态作用域: 作用域在函数<strong>定义</strong>时决定</p>\n</li>\n<li><p>动态作用域: 作用域在函数<strong>调用</strong>时决定</p>\n</li>\n</ul>\n<p>因为JS是<code>静态作用域</code>，所以直接看代码中变量的定义位置即可，而不是看调用过程。</p>\n<p>在以下代码中，运行会输出 1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(a);  <span class=\"hljs-comment\">// 输出 1</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bb</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;<br>  aa();<br>&#125;<br><br>bb();<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"作用域链-1\"><a href=\"#作用域链-1\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h5><p>在代码中，我们经常会进行函数嵌套，<code>作用域</code>会随着嵌套结构向顶层链接，形成<code>作用域链</code>。这个概念和<code>原型链</code>类似。</p>\n<p>还是看代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">aa</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bb</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(a + b);  <span class=\"hljs-comment\">// 输出 1和2</span><br>  &#125;<br>  bb();<br>&#125;<br><br>aa();<br></code></pre></td></tr></table></figure>\n\n<p>在函数<code>bb()作用域</code>中并没有定义变量<code>a</code>和<code>b</code>，所以会通过<code>作用域链</code>往上层查找，在父函数<code>aa()作用域</code>中找到<code>a</code>，在<code>全局作用域</code>中找到<code>b</code>，最后输出。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>上文我们介绍了<code>执行上下文</code>和<code>作用域链</code>，终于到了<code>闭包</code>。</p>\n<p>ES5中变量只有两种作用域：函数外部，<code>全局变量</code>；函数内部，<code>局部变量</code>。且变量提升机制还会将变量声明提升到它所在作用域的顶端去执行。</p>\n<p>函数内部的变量都是局部变量，在函数外部是<strong>无法访问</strong>的。</p>\n<p>闭包其实就是充当一个桥梁的作用，从外部可以间接地访问到内部的变量。简单来讲，就是在一个函数内部返回另外函数，通过返回的函数去获取主函数内部的局部变量。</p>\n<p>先看一段代码: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outer</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> private = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 局部变量</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> private;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log(private);  <span class=\"hljs-comment\">// private is not defined</span><br><br><span class=\"hljs-keyword\">var</span> inner = outer();  <span class=\"hljs-comment\">// 将外层 outer 函数返回的匿名函数赋值给 inner</span><br><span class=\"hljs-built_in\">console</span>.log(inner());  <span class=\"hljs-comment\">// 1</span><br></code></pre></td></tr></table></figure>\n\n<p>在<code>outer</code>函数中定义的<code>private</code>局部变量，在函数外部直接访问是无法访问到的。但是我们在函数中能够访问这个局部变量，并通过一个<code>匿名函数</code>返回，在外边调用<code>outer()</code>接收这个匿名函数，并且赋值给外部的<code>inner</code>变量，再调用<code>inner()</code>即可获取到内部的<code>private</code>局部变量了。</p>\n<p>打个比方，函数就好比是一个集装箱，外面的人拿不到里面的物资。这时候甩出来一个小背包，装着里面的部分物资，外面的人就可以在小背包中拿到了。</p>\n<p>闭包可以隐藏函数内部细节，界定<code>公共变量 (public)</code>和<code>私有变量 (private)</code>。配合<code>匿名函数</code>和<code>立即执行函数</code>，常用来实现ES5中的<strong>模块化</strong>。</p>\n<h5 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h5><p>正常函数执行完毕后，里面声明的变量被垃圾回收处理掉，但是闭包可以让作用域里的变量，在函数执行完之后依旧保持没有被垃圾回收处理掉，从而被外部访问。因此闭包也可以将临时变量“缓存”在内存中。</p>\n<h5 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h5><p>前面提到闭包会暂存变量，不被垃圾回收，很直接的就会想到，闭包可能会造成<strong>内存泄漏</strong>。（很多文章都会这么说，包括我在面试中也讲到过。）</p>\n<p>其实这个说法是不确切的，内存泄漏是指<code>不再使用的变量没有被释放</code>。而闭包函数中的<code>局部变量</code>，在之后是有可能使用的，并不是“垃圾变量”，所以称不上内存泄漏。</p>\n<p>可以这么说，这一特性导致了闭包将会消耗额外的内存，因此谨慎使用。</p>\n<h5 id=\"个人体会\"><a href=\"#个人体会\" class=\"headerlink\" title=\"个人体会\"></a>个人体会</h5><p>文中其实我还隐藏了很多细节。比如：执行上下文的概念对象<code>ExecutionContext</code>、作用域链中的<code>[[scope]]</code>等。有兴趣的话应该逐一地去深入了解。（详见文末链接）</p>\n<p><code>执行上下文</code>、<code>作用域链</code>、<code>闭包</code>、<code>this</code>等概念。之前我是通过看面经的方式了解了点皮毛，所以面试过程中总是讲不清楚，一问一答就结束了。（我看你是完全不懂嘛）</p>\n<p>后来我看了它们的实现原理，将它们理了一遍，感觉茅塞顿开，面试的时候就可以滔滔不绝了。其实这些概念都是一环扣一环的，串起来理解就会很直观。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><blockquote>\n<p><a href=\"https://juejin.im/post/5ba32171f265da0ab719a6d7\">[译] 理解 JavaScript 中的执行上下文和执行栈</a><br><a href=\"https://github.com/mqyqingfeng/Blog/issues/3\">JavaScript深入之词法作用域和动态作用域</a><br><a href=\"https://github.com/mqyqingfeng/Blog/issues/6\">JavaScript深入之作用域链</a><br><a href=\"https://zhuanlan.zhihu.com/p/56490498\">我从来不理解JavaScript闭包，直到有人这样向我解释它…</a></p>\n</blockquote>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"js","path":"api/tags/js.json"}]}