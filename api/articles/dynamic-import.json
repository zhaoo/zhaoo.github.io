{"title":"Dynamic Import","slug":"dynamic-import","date":"2021-11-04T15:53:03.000Z","updated":"2021-11-18T14:32:11.742Z","comments":true,"path":"api/articles/dynamic-import.json","realPath":"/2021/11/04/dynamic-import/","excerpt":"import() 动态引入依赖，实现按需加载和懒加载。","covers":["https://pic.izhaoo.com/20211104162055.jpg"],"cover":"https://pic.izhaoo.com/20210628212831.jpg","content":"<p><code>import()</code> 动态引入依赖，实现按需加载和懒加载。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近封装一个动画组件，需要根据传入的 props 按需引入依赖，一方面实现定制化能力（如：开启插件），另一方面也能减少包体积。</p>\n<h3 id=\"Static-Import\"><a href=\"#Static-Import\" class=\"headerlink\" title=\"Static Import\"></a>Static Import</h3><p>众所周知 ES Modules <code>import</code> 是”静态“的，它只接受字符串作为模块标识符，在编译阶段就会进行依赖分析并将模块绑定到本地作用域，因此必须在文件顶部声明。虽然是常规操作，但是在一些场景并不适用：</p>\n<ul>\n<li>条件判断或通过请求动态引入模块。</li>\n<li>运行时计算模块标识符。</li>\n<li>在普通脚本中引入模块，而不是在模块中。</li>\n<li>完全导入整个模块，不能实现按需加载。</li>\n</ul>\n<p>这时候自然就想到 AMD <code>require()</code> 了，同样他也有些局限：</p>\n<ul>\n<li>只能用于 Node.js 环境，不适用于浏览器环境。</li>\n<li>本质上只是模块声明，运行时再加载模块，而不会进行打包。</li>\n</ul>\n<h3 id=\"Dynamic-Import\"><a href=\"#Dynamic-Import\" class=\"headerlink\" title=\"Dynamic Import\"></a>Dynamic Import</h3><p>Dynamic Import 提案经过几年发展终于进入正式规范 。支持动态引入模块方案，采用函数的形式打包，并返回 Promise 对象，实现按需加载和懒加载。用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;react&#x27;</span>).then(&#123;useState, useEffect&#125; =&gt; &#123;<br>  ...<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>目前主流浏览器（IE必然是非主流）、Node.js（version &gt; 13）、webpack 等环境都已经支持该特性，可以谨慎使用。</p>\n<blockquote>\n<p><a href=\"https://2ality.com/2017/01/import-operator.html#loading-code-on-demand\">ES2020: import() – dynamically importing ES modules</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import\">MDN: import</a></p>\n</blockquote>\n<h5 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h5><p>可以使用字符串模板进行动态拼接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> redux = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">`react-redux/dist/react-redux<span class=\"hljs-subst\">$&#123;isLight ? <span class=\"hljs-string\">&#x27;.min&#x27;</span> : <span class=\"hljs-string\">&#x27;&#x27;</span>&#125;</span>.js`</span>);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"默认模块\"><a href=\"#默认模块\" class=\"headerlink\" title=\"默认模块\"></a>默认模块</h5><p>对于导出的默认模块，我们一般直接引入即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/** import */</span><br><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><br><span class=\"hljs-comment\">/** export */</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> React;<br></code></pre></td></tr></table></figure>\n\n<p>然而通过 <code>import()</code> 引入的是个函数模块，需要对其进行解构并重命名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/** import */</span><br><span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> React&#125; = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;react&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://pic.izhaoo.com/20211104162055.jpg\"  ><span class=\"image-caption\">解构重命名</span></p>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><ol>\n<li>通过入参 <code>isLight</code> 动态引入 embed（轻量级）或 oasis（重量级）渲染引擎。</li>\n<li>通过判断 <code>useFilters</code> 决定是否需要开启滤镜能力。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/** 引入播放器 */</span><br>  <span class=\"hljs-keyword\">const</span> importPlayer = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">`@alipay/mars-player/dist/ri_<span class=\"hljs-subst\">$&#123;isLight ? <span class=\"hljs-string\">&#x27;embed&#x27;</span> : <span class=\"hljs-string\">&#x27;oasis&#x27;</span>&#125;</span>.js`</span>); <span class=\"hljs-comment\">// 引入渲染引擎</span><br>    <span class=\"hljs-keyword\">const</span> &#123;MarsPlayer, registerFilters&#125; = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@alipay/mars-player&#x27;</span>);<br>    <span class=\"hljs-comment\">// 开启滤镜</span><br>    <span class=\"hljs-keyword\">if</span> (useFilters) &#123;<br>      <span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-attr\">default</span>: filters&#125; = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@alipay/mars-player/dist/filter&#x27;</span>);<br>      registerFilters(filters);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> MarsPlayer;<br>  &#125;;<br><br>  <span class=\"hljs-comment\">/** 加载播放器 */</span><br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    importPlayer().then(<span class=\"hljs-function\"><span class=\"hljs-params\">MarsPlayer</span> =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> newPlayer: IMarsPlayer = <span class=\"hljs-keyword\">new</span> MarsPlayer(&#123;<br>        <span class=\"hljs-attr\">interactive</span>: <span class=\"hljs-literal\">true</span>,<br>        ...constructorOptions,<br>        <span class=\"hljs-attr\">container</span>: containerRef.current,<br>      &#125;);<br>      setPlayer(newPlayer);<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> player?.destroy(destroyOptions);<br>  &#125;, []);<br></code></pre></td></tr></table></figure>","more":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>最近封装一个动画组件，需要根据传入的 props 按需引入依赖，一方面实现定制化能力（如：开启插件），另一方面也能减少包体积。</p>\n<h3 id=\"Static-Import\"><a href=\"#Static-Import\" class=\"headerlink\" title=\"Static Import\"></a>Static Import</h3><p>众所周知 ES Modules <code>import</code> 是”静态“的，它只接受字符串作为模块标识符，在编译阶段就会进行依赖分析并将模块绑定到本地作用域，因此必须在文件顶部声明。虽然是常规操作，但是在一些场景并不适用：</p>\n<ul>\n<li>条件判断或通过请求动态引入模块。</li>\n<li>运行时计算模块标识符。</li>\n<li>在普通脚本中引入模块，而不是在模块中。</li>\n<li>完全导入整个模块，不能实现按需加载。</li>\n</ul>\n<p>这时候自然就想到 AMD <code>require()</code> 了，同样他也有些局限：</p>\n<ul>\n<li>只能用于 Node.js 环境，不适用于浏览器环境。</li>\n<li>本质上只是模块声明，运行时再加载模块，而不会进行打包。</li>\n</ul>\n<h3 id=\"Dynamic-Import\"><a href=\"#Dynamic-Import\" class=\"headerlink\" title=\"Dynamic Import\"></a>Dynamic Import</h3><p>Dynamic Import 提案经过几年发展终于进入正式规范 。支持动态引入模块方案，采用函数的形式打包，并返回 Promise 对象，实现按需加载和懒加载。用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;react&#x27;</span>).then(&#123;useState, useEffect&#125; =&gt; &#123;<br>  ...<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>目前主流浏览器（IE必然是非主流）、Node.js（version &gt; 13）、webpack 等环境都已经支持该特性，可以谨慎使用。</p>\n<blockquote>\n<p><a href=\"https://2ality.com/2017/01/import-operator.html#loading-code-on-demand\">ES2020: import() – dynamically importing ES modules</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import\">MDN: import</a></p>\n</blockquote>\n<h5 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h5><p>可以使用字符串模板进行动态拼接：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> redux = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">`react-redux/dist/react-redux<span class=\"hljs-subst\">$&#123;isLight ? <span class=\"hljs-string\">&#x27;.min&#x27;</span> : <span class=\"hljs-string\">&#x27;&#x27;</span>&#125;</span>.js`</span>);<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"默认模块\"><a href=\"#默认模块\" class=\"headerlink\" title=\"默认模块\"></a>默认模块</h5><p>对于导出的默认模块，我们一般直接引入即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/** import */</span><br><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;<br><br><span class=\"hljs-comment\">/** export */</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> React;<br></code></pre></td></tr></table></figure>\n\n<p>然而通过 <code>import()</code> 引入的是个函数模块，需要对其进行解构并重命名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/** import */</span><br><span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">as</span> React&#125; = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;react&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://pic.izhaoo.com/20211104162055.jpg\"  ><span class=\"image-caption\">解构重命名</span></p>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><ol>\n<li>通过入参 <code>isLight</code> 动态引入 embed（轻量级）或 oasis（重量级）渲染引擎。</li>\n<li>通过判断 <code>useFilters</code> 决定是否需要开启滤镜能力。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/** 引入播放器 */</span><br>  <span class=\"hljs-keyword\">const</span> importPlayer = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">`@alipay/mars-player/dist/ri_<span class=\"hljs-subst\">$&#123;isLight ? <span class=\"hljs-string\">&#x27;embed&#x27;</span> : <span class=\"hljs-string\">&#x27;oasis&#x27;</span>&#125;</span>.js`</span>); <span class=\"hljs-comment\">// 引入渲染引擎</span><br>    <span class=\"hljs-keyword\">const</span> &#123;MarsPlayer, registerFilters&#125; = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@alipay/mars-player&#x27;</span>);<br>    <span class=\"hljs-comment\">// 开启滤镜</span><br>    <span class=\"hljs-keyword\">if</span> (useFilters) &#123;<br>      <span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-attr\">default</span>: filters&#125; = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;@alipay/mars-player/dist/filter&#x27;</span>);<br>      registerFilters(filters);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> MarsPlayer;<br>  &#125;;<br><br>  <span class=\"hljs-comment\">/** 加载播放器 */</span><br>  useEffect(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    importPlayer().then(<span class=\"hljs-function\"><span class=\"hljs-params\">MarsPlayer</span> =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> newPlayer: IMarsPlayer = <span class=\"hljs-keyword\">new</span> MarsPlayer(&#123;<br>        <span class=\"hljs-attr\">interactive</span>: <span class=\"hljs-literal\">true</span>,<br>        ...constructorOptions,<br>        <span class=\"hljs-attr\">container</span>: containerRef.current,<br>      &#125;);<br>      setPlayer(newPlayer);<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> player?.destroy(destroyOptions);<br>  &#125;, []);<br></code></pre></td></tr></table></figure>","categories":[{"name":"前端","path":"api/categories/前端.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"}]}